/* A Bison parser, made by GNU Bison 3.0.2.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2013 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.2"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         MYSQLparse
#define yylex           MYSQLlex
#define yyerror         MYSQLerror
#define yydebug         MYSQLdebug
#define yynerrs         MYSQLnerrs


/* Copy the first part of user declarations.  */
#line 25 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:339  */

#define YYLIP  (& thd->m_parser_state->m_lip)
#define YYPS   (& thd->m_parser_state->m_yacc)
#define YYCSCL (thd->variables.character_set_client)

#define MYSQL_YACC
#define YYINITDEPTH 100
#define YYMAXDEPTH 3200                        /* Because of 64K stack */
#define Lex (thd->lex)

#define Select Lex->current_select
#include <my_global.h>
#include "sql_priv.h"
#include "sql_parse.h"                        /* comp_*_creator */
#include "sql_table.h"                        /* primary_key_name */
#include "sql_partition.h"  /* mem_alloc_error, partition_info, HASH_PARTITION */
#include "sql_acl.h"                          /* *_ACL */
#include "password.h"       /* my_make_scrambled_password_323, my_make_scrambled_password */
#include "sql_class.h"      /* Key_part_spec, enum_filetype, Diag_condition_item_name */
#include "slave.h"
#include "lex_symbol.h"
#include "item_create.h"
#include "sp_head.h"
#include "sp_pcontext.h"
#include "sp_rcontext.h"
#include "sp.h"
#include "sql_alter.h"                         // Sql_cmd_alter_table*
#include "sql_truncate.h"                      // Sql_cmd_truncate_table
#include "sql_admin.h"                         // Sql_cmd_analyze/Check..._table
#include "sql_partition_admin.h"               // Sql_cmd_alter_table_*_part.
#include "sql_handler.h"                       // Sql_cmd_handler_*
#include "sql_signal.h"
#include "sql_get_diagnostics.h"               // Sql_cmd_get_diagnostics
#include "event_parse_data.h"
#include "create_options.h"
#include <myisam.h>
#include <myisammrg.h>
#include "keycaches.h"
#include "set_var.h"
#include "rpl_mi.h"
#include "lex_token.h"

/* this is to get the bison compilation windows warnings out */
#ifdef _MSC_VER
/* warning C4065: switch statement contains 'default' but no 'case' labels */
#pragma warning (disable : 4065)
#endif

int yylex(void *yylval, void *yythd);

#define yyoverflow(A,B,C,D,E,F)               \
  {                                           \
    ulong val= *(F);                          \
    if (my_yyoverflow((B), (D), &val))        \
    {                                         \
      yyerror(thd, (char*) (A));              \
      return 2;                               \
    }                                         \
    else                                      \
    {                                         \
      *(F)= (YYSIZE_T)val;                    \
    }                                         \
  }

#define MYSQL_YYABORT                         \
  do                                          \
  {                                           \
    LEX::cleanup_lex_after_parse_error(thd);  \
    YYABORT;                                  \
  } while (0)

#define MYSQL_YYABORT_UNLESS(A)         \
  if (!(A))                             \
  {                                     \
    my_parse_error(ER(ER_SYNTAX_ERROR));\
    MYSQL_YYABORT;                      \
  }

/*
  Work around for broken code generated by bison 1.875.

  The code generated by bison 1.875a and later, bison 2.1 and bison 2.2 is ok.
  With bison 1.875 however, the generated code contains:
<pre>
  yyerrlab1:
  #if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
    __attribute__ ((__unused__))
  #endif
</pre>
  This usage of __attribute__ is illegal, so we remove it.
  See the following references for details:
  http://lists.gnu.org/archive/html/bug-bison/2004-02/msg00014.html
  http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14273
*/

#if defined (__GNUC_MINOR__) && 2093 <= (__GNUC__ * 1000 + __GNUC_MINOR__)
#undef __attribute__
#define __attribute__(X)
#endif


#ifndef DBUG_OFF
#define YYDEBUG 1
#else
#define YYDEBUG 0
#endif

/**
  @brief Push an error message into MySQL error stack with line
  and position information.

  This function provides semantic action implementers with a way
  to push the famous "You have a syntax error near..." error
  message into the error stack, which is normally produced only if
  a parse error is discovered internally by the Bison generated
  parser.
*/

void my_parse_error(const char *s)
{
  THD *thd= current_thd;
  Lex_input_stream *lip= & thd->m_parser_state->m_lip;

  const char *yytext= lip->get_tok_start();
  if (!yytext)
    yytext= "";

  /* Push an error into the error stack */
  ErrConvString err(yytext, strlen(yytext), thd->variables.character_set_client);
  my_printf_error(ER_PARSE_ERROR,  ER(ER_PARSE_ERROR), MYF(0), s,
                  err.ptr(), lip->yylineno);
}

/**
  @brief Bison callback to report a syntax/OOM error

  This function is invoked by the bison-generated parser
  when a syntax error, a parse error or an out-of-memory
  condition occurs. This function is not invoked when the
  parser is requested to abort by semantic action code
  by means of YYABORT or YYACCEPT macros. This is why these
  macros should not be used (use MYSQL_YYABORT/MYSQL_YYACCEPT
  instead).

  The parser will abort immediately after invoking this callback.

  This function is not for use in semantic actions and is internal to
  the parser, as it performs some pre-return cleanup. 
  In semantic actions, please use my_parse_error or my_error to
  push an error into the error stack and MYSQL_YYABORT
  to abort from the parser.
*/

void MYSQLerror(THD *thd, const char *s)
{
  /*
    Restore the original LEX if it was replaced when parsing
    a stored procedure. We must ensure that a parsing error
    does not leave any side effects in the THD.
  */
  LEX::cleanup_lex_after_parse_error(thd);

  /* "parse error" changed into "syntax error" between bison 1.75 and 1.875 */
  if (strcmp(s,"parse error") == 0 || strcmp(s,"syntax error") == 0)
    s= ER(ER_SYNTAX_ERROR);
  my_parse_error(s);
}


#ifndef DBUG_OFF
void turn_parser_debug_on()
{
  /*
     MYSQLdebug is in sql/sql_yacc.cc, in bison generated code.
     Turning this option on is **VERY** verbose, and should be
     used when investigating a syntax error problem only.

     The syntax to run with bison traces is as follows :
     - Starting a server manually :
       mysqld --debug-dbug="d,parser_debug" ...
     - Running a test :
       mysql-test-run.pl --mysqld="--debug-dbug=d,parser_debug" ...

     The result will be in the process stderr (var/log/master.err)
   */

  extern int yydebug;
  yydebug= 1;
}
#endif

static bool is_native_function(THD *thd, const LEX_STRING *name)
{
  if (find_native_function_builder(thd, *name))
    return true;

  if (is_lex_native_function(name))
    return true;

  return false;
}


/**
  Helper action for a case statement (entering the CASE).
  This helper is used for both 'simple' and 'searched' cases.
  This helper, with the other case_stmt_action_..., is executed when
  the following SQL code is parsed:
<pre>
CREATE PROCEDURE proc_19194_simple(i int)
BEGIN
  DECLARE str CHAR(10);

  CASE i
    WHEN 1 THEN SET str="1";
    WHEN 2 THEN SET str="2";
    WHEN 3 THEN SET str="3";
    ELSE SET str="unknown";
  END CASE;

  SELECT str;
END
</pre>
  The actions are used to generate the following code:
<pre>
SHOW PROCEDURE CODE proc_19194_simple;
Pos     Instruction
0       set str@1 NULL
1       set_case_expr (12) 0 i@0
2       jump_if_not 5(12) (case_expr@0 = 1)
3       set str@1 _latin1'1'
4       jump 12
5       jump_if_not 8(12) (case_expr@0 = 2)
6       set str@1 _latin1'2'
7       jump 12
8       jump_if_not 11(12) (case_expr@0 = 3)
9       set str@1 _latin1'3'
10      jump 12
11      set str@1 _latin1'unknown'
12      stmt 0 "SELECT str"
</pre>

  @param lex the parser lex context
*/

void case_stmt_action_case(LEX *lex)
{
  lex->sphead->new_cont_backpatch(NULL);

  /*
    BACKPATCH: Creating target label for the jump to
    "case_stmt_action_end_case"
    (Instruction 12 in the example)
  */

  lex->spcont->push_label(current_thd, empty_lex_str, lex->sphead->instructions());
}

/**
  Helper action for a case expression statement (the expr in 'CASE expr').
  This helper is used for 'searched' cases only.
  @param lex the parser lex context
  @param expr the parsed expression
  @return 0 on success
*/

int case_stmt_action_expr(LEX *lex, Item* expr)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *parsing_ctx= lex->spcont;
  int case_expr_id= parsing_ctx->register_case_expr();
  sp_instr_set_case_expr *i;

  if (parsing_ctx->push_case_expr_id(case_expr_id))
    return 1;

  i= new sp_instr_set_case_expr(sp->instructions(),
                                parsing_ctx, case_expr_id, expr, lex);

  sp->add_cont_backpatch(i);
  return sp->add_instr(i);
}

/**
  Helper action for a case when condition.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param when the parsed expression for the WHEN clause
  @param simple true for simple cases, false for searched cases
*/

int case_stmt_action_when(LEX *lex, Item *when, bool simple)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump_if_not *i;
  Item_case_expr *var;
  Item *expr;

  if (simple)
  {
    var= new Item_case_expr(ctx->get_current_case_expr_id());

#ifndef DBUG_OFF
    if (var)
    {
      var->m_sp= sp;
    }
#endif

    expr= new Item_func_eq(var, when);
    i= new sp_instr_jump_if_not(ip, ctx, expr, lex);
  }
  else
    i= new sp_instr_jump_if_not(ip, ctx, when, lex);

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  return !MY_TEST(i) ||
         sp->push_backpatch(i, ctx->push_label(current_thd, empty_lex_str, 0)) ||
         sp->add_cont_backpatch(i) ||
         sp->add_instr(i);
}

/**
  Helper action for a case then statements.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
*/

int case_stmt_action_then(LEX *lex)
{
  sp_head *sp= lex->sphead;
  sp_pcontext *ctx= lex->spcont;
  uint ip= sp->instructions();
  sp_instr_jump *i = new sp_instr_jump(ip, ctx);
  if (!MY_TEST(i) || sp->add_instr(i))
    return 1;

  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_when" to "case_stmt_action_then"
    (jump_if_not from instruction 2 to 5, 5 to 8 ... in the example)
  */

  sp->backpatch(ctx->pop_label());

  /*
    BACKPATCH: Registering forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */

  return sp->push_backpatch(i, ctx->last_label());
}

/**
  Helper action for an end case.
  This helper is used for both 'simple' and 'searched' cases.
  @param lex the parser lex context
  @param simple true for simple cases, false for searched cases
*/

void case_stmt_action_end_case(LEX *lex, bool simple)
{
  /*
    BACKPATCH: Resolving forward jump from
    "case_stmt_action_then" to "case_stmt_action_end_case"
    (jump from instruction 4 to 12, 7 to 12 ... in the example)
  */
  lex->sphead->backpatch(lex->spcont->pop_label());

  if (simple)
    lex->spcont->pop_case_expr_id();

  lex->sphead->do_cont_backpatch();
}


static bool
find_sys_var_null_base(THD *thd, struct sys_var_with_base *tmp)
{
  tmp->var= find_sys_var(thd, tmp->base_name.str, tmp->base_name.length);

  if (tmp->var == NULL)
    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), tmp->base_name.str);
  else
    tmp->base_name= null_lex_str;

  return thd->is_error();
}


/**
  Helper action for a SET statement.
  Used to push a system variable into the assignment list.

  @param thd      the current thread
  @param tmp      the system variable with base name
  @param var_type the scope of the variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_system_variable(THD *thd, struct sys_var_with_base *tmp,
                    enum enum_var_type var_type, Item *val)
{
  set_var *var;
  LEX *lex= thd->lex;

  /* No AUTOCOMMIT from a stored function or trigger. */
  if (lex->spcont && tmp->var == Sys_autocommit_ptr)
    lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;

  if (val && val->type() == Item::FIELD_ITEM &&
      ((Item_field*)val)->table_name)
  {
    my_error(ER_WRONG_TYPE_FOR_VAR, MYF(0), tmp->var->name.str);
    return TRUE;
  }

  if (! (var= new set_var(var_type, tmp->var, &tmp->base_name, val)))
    return TRUE;

  return lex->var_list.push_back(var);
}


/**
  Helper action for a SET statement.
  Used to push a SP local variable into the assignment list.

  @param thd      the current thread
  @param var_type the SP local variable
  @param val      the value being assigned to the variable

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_local_variable(THD *thd, sp_variable *spv, Item *val)
{
  Item *it;
  LEX *lex= thd->lex;
  sp_instr_set *sp_set;

  if (val)
    it= val;
  else if (spv->default_value)
    it= spv->default_value;
  else
  {
    it= new (thd->mem_root) Item_null();
    if (it == NULL)
      return TRUE;
  }

  sp_set= new sp_instr_set(lex->sphead->instructions(), lex->spcont,
                           spv->offset, it, spv->type, lex, TRUE);

  return (sp_set == NULL || lex->sphead->add_instr(sp_set));
}


/**
  Helper action for a SET statement.
  Used to SET a field of NEW row.

  @param thd      the current thread
  @param name     the field name
  @param val      the value being assigned to the row

  @return TRUE if error, FALSE otherwise.
*/

static bool
set_trigger_new_row(THD *thd, LEX_STRING *name, Item *val)
{
  LEX *lex= thd->lex;
  Item_trigger_field *trg_fld;
  sp_instr_set_trigger_field *sp_fld;

  /* QQ: Shouldn't this be field's default value ? */
  if (! val)
    val= new Item_null();

  DBUG_ASSERT(lex->trg_chistics.action_time == TRG_ACTION_BEFORE &&
              (lex->trg_chistics.event == TRG_EVENT_INSERT ||
               lex->trg_chistics.event == TRG_EVENT_UPDATE));

  trg_fld= new (thd->mem_root)
            Item_trigger_field(lex->current_context(),
                               Item_trigger_field::NEW_ROW,
                               name->str, UPDATE_ACL, FALSE);

  if (trg_fld == NULL)
    return TRUE;

  sp_fld= new sp_instr_set_trigger_field(lex->sphead->instructions(),
                                         lex->spcont, trg_fld, val, lex);

  if (sp_fld == NULL)
    return TRUE;

  /*
    Let us add this item to list of all Item_trigger_field
    objects in trigger.
  */
  lex->trg_table_fields.link_in_list(trg_fld, &trg_fld->next_trg_field);

  return lex->sphead->add_instr(sp_fld);
}


/**
  Create an object to represent a SP variable in the Item-hierarchy.

  @param  thd         The current thread.
  @param  name        The SP variable name.
  @param  spvar       The SP variable (optional).
  @param  start_in_q  Start position of the SP variable name in the query.
  @param  end_in_q    End position of the SP variable name in the query.

  @remark If spvar is not specified, the name is used to search for the
          variable in the parse-time context. If the variable does not
          exist, a error is set and NULL is returned to the caller.

  @return An Item_splocal object representing the SP variable, or NULL on error.
*/
static Item_splocal*
create_item_for_sp_var(THD *thd, LEX_STRING name, sp_variable *spvar,
                       const char *start_in_q, const char *end_in_q)
{
  Item_splocal *item;
  LEX *lex= thd->lex;
  uint pos_in_q, len_in_q;
  sp_pcontext *spc = lex->spcont;

  /* If necessary, look for the variable. */
  if (spc && !spvar)
    spvar= spc->find_variable(name, false);

  if (!spvar)
  {
    my_error(ER_SP_UNDECLARED_VAR, MYF(0), name.str);
    return NULL;
  }

  DBUG_ASSERT(spc && spvar);

  /* Position and length of the SP variable name in the query. */
  pos_in_q= start_in_q - lex->sphead->m_tmp_query;
  len_in_q= end_in_q - start_in_q;

  item= new (thd->mem_root)
    Item_splocal(name, spvar->offset, spvar->type, pos_in_q, len_in_q);

#ifndef DBUG_OFF
  if (item)
    item->m_sp= lex->sphead;
#endif

  return item;
}

/**
  Helper to resolve the SQL:2003 Syntax exception 1) in <in predicate>.
  See SQL:2003, Part 2, section 8.4 <in predicate>, Note 184, page 383.
  This function returns the proper item for the SQL expression
  <code>left [NOT] IN ( expr )</code>
  @param thd the current thread
  @param left the in predicand
  @param equal true for IN predicates, false for NOT IN predicates
  @param expr first and only expression of the in value list
  @return an expression representing the IN predicate.
*/
Item* handle_sql2003_note184_exception(THD *thd, Item* left, bool equal,
                                       Item *expr)
{
  /*
    Relevant references for this issue:
    - SQL:2003, Part 2, section 8.4 <in predicate>, page 383,
    - SQL:2003, Part 2, section 7.2 <row value expression>, page 296,
    - SQL:2003, Part 2, section 6.3 <value expression primary>, page 174,
    - SQL:2003, Part 2, section 7.15 <subquery>, page 370,
    - SQL:2003 Feature F561, "Full value expressions".

    The exception in SQL:2003 Note 184 means:
    Item_singlerow_subselect, which corresponds to a <scalar subquery>,
    should be re-interpreted as an Item_in_subselect, which corresponds
    to a <table subquery> when used inside an <in predicate>.

    Our reading of Note 184 is reccursive, so that all:
    - IN (( <subquery> ))
    - IN ((( <subquery> )))
    - IN '('^N <subquery> ')'^N
    - etc
    should be interpreted as a <table subquery>, no matter how deep in the
    expression the <subquery> is.
  */

  Item *result;

  DBUG_ENTER("handle_sql2003_note184_exception");

  if (expr->type() == Item::SUBSELECT_ITEM)
  {
    Item_subselect *expr2 = (Item_subselect*) expr;

    if (expr2->substype() == Item_subselect::SINGLEROW_SUBS)
    {
      Item_singlerow_subselect *expr3 = (Item_singlerow_subselect*) expr2;
      st_select_lex *subselect;

      /*
        Implement the mandated change, by altering the semantic tree:
          left IN Item_singlerow_subselect(subselect)
        is modified to
          left IN (subselect)
        which is represented as
          Item_in_subselect(left, subselect)
      */
      subselect= expr3->invalidate_and_restore_select_lex();
      result= new (thd->mem_root) Item_in_subselect(left, subselect);

      if (! equal)
        result = negate_expression(thd, result);

      DBUG_RETURN(result);
    }
  }

  if (equal)
    result= new (thd->mem_root) Item_func_eq(left, expr);
  else
    result= new (thd->mem_root) Item_func_ne(left, expr);

  DBUG_RETURN(result);
}

/**
   @brief Creates a new SELECT_LEX for a UNION branch.

   Sets up and initializes a SELECT_LEX structure for a query once the parser
   discovers a UNION token. The current SELECT_LEX is pushed on the stack and
   the new SELECT_LEX becomes the current one.

   @param lex The parser state.

   @param is_union_distinct True if the union preceding the new select statement
   uses UNION DISTINCT.

   @param is_top_level This should be @c TRUE if the newly created SELECT_LEX
   is a non-nested statement.

   @return <code>false</code> if successful, <code>true</code> if an error was
   reported. In the latter case parsing should stop.
 */
bool add_select_to_union_list(LEX *lex, bool is_union_distinct, 
                              bool is_top_level)
{
  /* 
     Only the last SELECT can have INTO. Since the grammar won't allow INTO in
     a nested SELECT, we make this check only when creating a top-level SELECT.
  */
  if (is_top_level && lex->result)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "UNION", "INTO");
    return TRUE;
  }
  if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  /* This counter shouldn't be incremented for UNION parts */
  lex->nest_level--;
  if (mysql_new_select(lex, 0))
    return TRUE;
  mysql_init_select(lex);
  lex->current_select->linkage=UNION_TYPE;
  if (is_union_distinct) /* UNION DISTINCT - remember position */
    lex->current_select->master_unit()->union_distinct=
      lex->current_select;
  return FALSE;
}

/**
   @brief Initializes a SELECT_LEX for a query within parentheses (aka
   braces).

   @return false if successful, true if an error was reported. In the latter
   case parsing should stop.
 */
bool setup_select_in_parentheses(LEX *lex) 
{
  SELECT_LEX * sel= lex->current_select;
  if (sel->set_braces(1))
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      !sel->master_unit()->first_select()->braces &&
      sel->master_unit()->first_select()->linkage ==
      UNION_TYPE)
  {
    my_parse_error(ER(ER_SYNTAX_ERROR));
    return TRUE;
  }
  if (sel->linkage == UNION_TYPE &&
      sel->olap != UNSPECIFIED_OLAP_TYPE &&
      sel->master_unit()->fake_select_lex)
  {
    my_error(ER_WRONG_USAGE, MYF(0), "CUBE/ROLLUP", "ORDER BY");
    return TRUE;
  }
  /* select in braces, can't contain global parameters */
  if (sel->master_unit()->fake_select_lex)
    sel->master_unit()->global_parameters=
      sel->master_unit()->fake_select_lex;
  return FALSE;
}

static bool add_create_index_prepare (LEX *lex, Table_ident *table)
{
  lex->sql_command= SQLCOM_CREATE_INDEX;
  if (!lex->current_select->add_table_to_list(lex->thd, table, NULL,
                                              TL_OPTION_UPDATING,
                                              TL_READ_NO_INSERT,
                                              MDL_SHARED_UPGRADABLE))
    return TRUE;
  lex->alter_info.reset();
  lex->alter_info.flags= Alter_info::ALTER_ADD_INDEX;
  lex->col_list.empty();
  lex->change= NullS;
  lex->option_list= NULL;
  return FALSE;
}

static bool add_create_index (LEX *lex, Key::Keytype type,
                              const LEX_STRING &name,
                              KEY_CREATE_INFO *info= NULL, bool generated= 0)
{
  Key *key;
  key= new Key(type, name, info ? info : &lex->key_create_info, generated, 
               lex->col_list, lex->option_list, lex->check_exists);
  if (key == NULL)
    return TRUE;

  lex->alter_info.key_list.push_back(key);
  lex->col_list.empty();
  return FALSE;
}


/**
  Create a separate LEX for each assignment if in SP.

  If we are in SP we want have own LEX for each assignment.
  This is mostly because it is hard for several sp_instr_set
  and sp_instr_set_trigger instructions share one LEX.
  (Well, it is theoretically possible but adds some extra
  overhead on preparation for execution stage and IMO less
  robust).

  QQ: May be we should simply prohibit group assignments in SP?

  @see sp_create_assignment_instr

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead
*/

static void sp_create_assignment_lex(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    Lex_input_stream *lip= &thd->m_parser_state->m_lip;
    LEX *old_lex= lex;
    lex->sphead->reset_lex(thd);
    lex= thd->lex;

    /* Set new LEX as if we at start of set rule. */
    lex->sql_command= SQLCOM_SET_OPTION;
    mysql_init_select(lex);
    lex->var_list.empty();
    lex->autocommit= 0;
    /* get_ptr() is only correct with no lookahead. */
    DBUG_ASSERT(no_lookahead);
    lex->sphead->m_tmp_query= lip->get_ptr();
    /* Inherit from outer lex. */
    lex->option_type= old_lex->option_type;
  }
}


/**
  Create a SP instruction for a SET assignment.

  @see sp_create_assignment_lex

  @param thd           Thread context
  @param no_lookahead  True if the parser has no lookahead

  @return false if success, true otherwise.
*/

static bool sp_create_assignment_instr(THD *thd, bool no_lookahead)
{
  LEX *lex= thd->lex;

  if (lex->sphead)
  {
    sp_head *sp= lex->sphead;

    if (!lex->var_list.is_empty())
    {
      /*
        We have assignment to user or system variable or
        option setting, so we should construct sp_instr_stmt
        for it.
      */
      LEX_STRING qbuff;
      sp_instr_stmt *i;
      Lex_input_stream *lip= &thd->m_parser_state->m_lip;

      if (!(i= new sp_instr_stmt(sp->instructions(), lex->spcont,
                                 lex)))
        return true;

      /*
        Extract the query statement from the tokenizer.  The
        end is either lip->ptr, if there was no lookahead,
        lip->tok_end otherwise.
      */
      if (no_lookahead)
        qbuff.length= lip->get_ptr() - sp->m_tmp_query;
      else
        qbuff.length= lip->get_tok_end() - sp->m_tmp_query;

      if (!(qbuff.str= (char*) alloc_root(thd->mem_root,
                                          qbuff.length + 5)))
        return true;

      strmake(strmake(qbuff.str, "SET ", 4), sp->m_tmp_query,
              qbuff.length);
      qbuff.length+= 4;
      i->m_query= qbuff;
      if (sp->add_instr(i))
        return true;
    }
    enum_var_type inner_option_type= lex->option_type;
    if (lex->sphead->restore_lex(thd))
      return true;
    /* Copy option_type to outer lex in case it has changed. */
    thd->lex->option_type= inner_option_type;
  }
  return false;
}



#line 945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "sql_yacc.h".  */
#ifndef YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
# define YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int MYSQLdebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    ABORT_SYM = 258,
    ACCESSIBLE_SYM = 259,
    ACTION = 260,
    ADD = 261,
    ADMIN_SYM = 262,
    ADDDATE_SYM = 263,
    AFTER_SYM = 264,
    AGAINST = 265,
    AGGREGATE_SYM = 266,
    ALGORITHM_SYM = 267,
    ALL = 268,
    ALTER = 269,
    ALWAYS_SYM = 270,
    ANALYZE_SYM = 271,
    AND_AND_SYM = 272,
    AND_SYM = 273,
    ANY_SYM = 274,
    AS = 275,
    ASC = 276,
    ASCII_SYM = 277,
    ASENSITIVE_SYM = 278,
    AT_SYM = 279,
    AUTHORS_SYM = 280,
    AUTOEXTEND_SIZE_SYM = 281,
    AUTO_INC = 282,
    AUTO_SYM = 283,
    AVG_ROW_LENGTH = 284,
    AVG_SYM = 285,
    BACKUP_SYM = 286,
    BEFORE_SYM = 287,
    BEGIN_SYM = 288,
    BETWEEN_SYM = 289,
    BIGINT = 290,
    BINARY = 291,
    BINLOG_SYM = 292,
    BIN_NUM = 293,
    BIT_AND = 294,
    BIT_OR = 295,
    BIT_SYM = 296,
    BIT_XOR = 297,
    BLOB_SYM = 298,
    BLOCK_SYM = 299,
    BOOLEAN_SYM = 300,
    BOOL_SYM = 301,
    BOTH = 302,
    BTREE_SYM = 303,
    BY = 304,
    BYTE_SYM = 305,
    CACHE_SYM = 306,
    CALL_SYM = 307,
    CASCADE = 308,
    CASCADED = 309,
    CASE_SYM = 310,
    CAST_SYM = 311,
    CATALOG_NAME_SYM = 312,
    CHAIN_SYM = 313,
    CHANGE = 314,
    CHANGED = 315,
    CHARSET = 316,
    CHAR_SYM = 317,
    CHECKPOINT_SYM = 318,
    CHECKSUM_SYM = 319,
    CHECK_SYM = 320,
    CIPHER_SYM = 321,
    CLASS_ORIGIN_SYM = 322,
    CLIENT_SYM = 323,
    CLIENT_STATS_SYM = 324,
    CLOSE_SYM = 325,
    COALESCE = 326,
    CODE_SYM = 327,
    COLLATE_SYM = 328,
    COLLATION_SYM = 329,
    COLUMNS = 330,
    COLUMN_ADD_SYM = 331,
    COLUMN_CHECK_SYM = 332,
    COLUMN_CREATE_SYM = 333,
    COLUMN_DELETE_SYM = 334,
    COLUMN_GET_SYM = 335,
    COLUMN_SYM = 336,
    COLUMN_NAME_SYM = 337,
    COMMENT_SYM = 338,
    COMMITTED_SYM = 339,
    COMMIT_SYM = 340,
    COMPACT_SYM = 341,
    COMPLETION_SYM = 342,
    COMPRESSED_SYM = 343,
    CONCURRENT = 344,
    CONDITION_SYM = 345,
    CONNECTION_SYM = 346,
    CONSISTENT_SYM = 347,
    CONSTRAINT = 348,
    CONSTRAINT_CATALOG_SYM = 349,
    CONSTRAINT_NAME_SYM = 350,
    CONSTRAINT_SCHEMA_SYM = 351,
    CONTAINS_SYM = 352,
    CONTEXT_SYM = 353,
    CONTINUE_SYM = 354,
    CONTRIBUTORS_SYM = 355,
    CONVERT_SYM = 356,
    COUNT_SYM = 357,
    CPU_SYM = 358,
    CREATE = 359,
    CROSS = 360,
    CUBE_SYM = 361,
    CURDATE = 362,
    CURRENT_SYM = 363,
    CURRENT_USER = 364,
    CURRENT_ROLE = 365,
    CURRENT_POS_SYM = 366,
    CURSOR_SYM = 367,
    CURSOR_NAME_SYM = 368,
    CURTIME = 369,
    DATABASE = 370,
    DATABASES = 371,
    DATAFILE_SYM = 372,
    DATA_SYM = 373,
    DATETIME = 374,
    DATE_ADD_INTERVAL = 375,
    DATE_SUB_INTERVAL = 376,
    DATE_SYM = 377,
    DAY_HOUR_SYM = 378,
    DAY_MICROSECOND_SYM = 379,
    DAY_MINUTE_SYM = 380,
    DAY_SECOND_SYM = 381,
    DAY_SYM = 382,
    DEALLOCATE_SYM = 383,
    DECIMAL_NUM = 384,
    DECIMAL_SYM = 385,
    DECLARE_SYM = 386,
    DEFAULT = 387,
    DEFINER_SYM = 388,
    DELAYED_SYM = 389,
    DELAY_KEY_WRITE_SYM = 390,
    DELETE_SYM = 391,
    DESC = 392,
    DESCRIBE = 393,
    DES_KEY_FILE = 394,
    DETERMINISTIC_SYM = 395,
    DIAGNOSTICS_SYM = 396,
    DIRECTORY_SYM = 397,
    DISABLE_SYM = 398,
    DISCARD = 399,
    DISK_SYM = 400,
    DISTINCT = 401,
    DIV_SYM = 402,
    DOUBLE_SYM = 403,
    DO_SYM = 404,
    DROP = 405,
    DUAL_SYM = 406,
    DUMPFILE = 407,
    DUPLICATE_SYM = 408,
    DYNAMIC_SYM = 409,
    EACH_SYM = 410,
    ELSE = 411,
    ELSEIF_SYM = 412,
    ENABLE_SYM = 413,
    ENCLOSED = 414,
    END = 415,
    ENDS_SYM = 416,
    END_OF_INPUT = 417,
    ENGINES_SYM = 418,
    ENGINE_SYM = 419,
    ENUM = 420,
    EQUAL_SYM = 421,
    ERROR_SYM = 422,
    ERRORS = 423,
    ESCAPED = 424,
    ESCAPE_SYM = 425,
    EVENTS_SYM = 426,
    EVENT_SYM = 427,
    EVERY_SYM = 428,
    EXCHANGE_SYM = 429,
    EXAMINED_SYM = 430,
    EXECUTE_SYM = 431,
    EXISTS = 432,
    EXIT_SYM = 433,
    EXPANSION_SYM = 434,
    EXPORT_SYM = 435,
    EXTENDED_SYM = 436,
    EXTENT_SIZE_SYM = 437,
    EXTRACT_SYM = 438,
    FALSE_SYM = 439,
    FAST_SYM = 440,
    FAULTS_SYM = 441,
    FETCH_SYM = 442,
    FILE_SYM = 443,
    FIRST_SYM = 444,
    FIXED_SYM = 445,
    FLOAT_NUM = 446,
    FLOAT_SYM = 447,
    FLUSH_SYM = 448,
    FORCE_SYM = 449,
    FOREIGN = 450,
    FOR_SYM = 451,
    FOUND_SYM = 452,
    FROM = 453,
    FULL = 454,
    FULLTEXT_SYM = 455,
    FUNCTION_SYM = 456,
    GE = 457,
    GENERAL = 458,
    GENERATED_SYM = 459,
    GEOMETRYCOLLECTION = 460,
    GEOMETRY_SYM = 461,
    GET_FORMAT = 462,
    GET_SYM = 463,
    GLOBAL_SYM = 464,
    GRANT = 465,
    GRANTS = 466,
    GROUP_SYM = 467,
    GROUP_CONCAT_SYM = 468,
    HANDLER_SYM = 469,
    HARD_SYM = 470,
    HASH_SYM = 471,
    HAVING = 472,
    HELP_SYM = 473,
    HEX_NUM = 474,
    HEX_STRING = 475,
    HIGH_PRIORITY = 476,
    HOST_SYM = 477,
    HOSTS_SYM = 478,
    HOUR_MICROSECOND_SYM = 479,
    HOUR_MINUTE_SYM = 480,
    HOUR_SECOND_SYM = 481,
    HOUR_SYM = 482,
    ID_SYM = 483,
    IDENT = 484,
    IDENTIFIED_SYM = 485,
    IDENT_QUOTED = 486,
    IF = 487,
    IGNORE_SYM = 488,
    IGNORE_SERVER_IDS_SYM = 489,
    IMPORT = 490,
    INDEXES = 491,
    INDEX_SYM = 492,
    INDEX_STATS_SYM = 493,
    INFILE = 494,
    INITIAL_SIZE_SYM = 495,
    INNER_SYM = 496,
    INOUT_SYM = 497,
    INSENSITIVE_SYM = 498,
    INSERT = 499,
    INSERT_METHOD = 500,
    INSTALL_SYM = 501,
    INTERVAL_SYM = 502,
    INTO = 503,
    INT_SYM = 504,
    INVOKER_SYM = 505,
    IN_SYM = 506,
    IO_SYM = 507,
    IPC_SYM = 508,
    IS = 509,
    ISOLATION = 510,
    ISSUER_SYM = 511,
    ITERATE_SYM = 512,
    JOIN_SYM = 513,
    KEYS = 514,
    KEY_BLOCK_SIZE = 515,
    KEY_SYM = 516,
    KILL_SYM = 517,
    LANGUAGE_SYM = 518,
    LAST_SYM = 519,
    LAST_VALUE = 520,
    LE = 521,
    LEADING = 522,
    LEAVES = 523,
    LEAVE_SYM = 524,
    LEFT = 525,
    LESS_SYM = 526,
    LEVEL_SYM = 527,
    LEX_HOSTNAME = 528,
    LIKE = 529,
    LIMIT = 530,
    LINEAR_SYM = 531,
    LINES = 532,
    LINESTRING = 533,
    LIST_SYM = 534,
    LOAD = 535,
    LOCAL_SYM = 536,
    LOCATOR_SYM = 537,
    LOCKS_SYM = 538,
    LOCK_SYM = 539,
    LOGFILE_SYM = 540,
    LOGS_SYM = 541,
    LONGBLOB = 542,
    LONGTEXT = 543,
    LONG_NUM = 544,
    LONG_SYM = 545,
    LOOP_SYM = 546,
    LOW_PRIORITY = 547,
    MASTER_CONNECT_RETRY_SYM = 548,
    MASTER_GTID_POS_SYM = 549,
    MASTER_HOST_SYM = 550,
    MASTER_LOG_FILE_SYM = 551,
    MASTER_LOG_POS_SYM = 552,
    MASTER_PASSWORD_SYM = 553,
    MASTER_PORT_SYM = 554,
    MASTER_SERVER_ID_SYM = 555,
    MASTER_SSL_CAPATH_SYM = 556,
    MASTER_SSL_CA_SYM = 557,
    MASTER_SSL_CERT_SYM = 558,
    MASTER_SSL_CIPHER_SYM = 559,
    MASTER_SSL_CRL_SYM = 560,
    MASTER_SSL_CRLPATH_SYM = 561,
    MASTER_SSL_KEY_SYM = 562,
    MASTER_SSL_SYM = 563,
    MASTER_SSL_VERIFY_SERVER_CERT_SYM = 564,
    MASTER_SYM = 565,
    MASTER_USER_SYM = 566,
    MASTER_USE_GTID_SYM = 567,
    MASTER_HEARTBEAT_PERIOD_SYM = 568,
    MATCH = 569,
    MAX_CONNECTIONS_PER_HOUR = 570,
    MAX_QUERIES_PER_HOUR = 571,
    MAX_ROWS = 572,
    MAX_SIZE_SYM = 573,
    MAX_SYM = 574,
    MAX_UPDATES_PER_HOUR = 575,
    MAX_USER_CONNECTIONS_SYM = 576,
    MAX_VALUE_SYM = 577,
    MEDIUMBLOB = 578,
    MEDIUMINT = 579,
    MEDIUMTEXT = 580,
    MEDIUM_SYM = 581,
    MEMORY_SYM = 582,
    MERGE_SYM = 583,
    MESSAGE_TEXT_SYM = 584,
    MICROSECOND_SYM = 585,
    MIGRATE_SYM = 586,
    MINUTE_MICROSECOND_SYM = 587,
    MINUTE_SECOND_SYM = 588,
    MINUTE_SYM = 589,
    MIN_ROWS = 590,
    MIN_SYM = 591,
    MODE_SYM = 592,
    MODIFIES_SYM = 593,
    MODIFY_SYM = 594,
    MOD_SYM = 595,
    MONTH_SYM = 596,
    MULTILINESTRING = 597,
    MULTIPOINT = 598,
    MULTIPOLYGON = 599,
    MUTEX_SYM = 600,
    MYSQL_SYM = 601,
    MYSQL_ERRNO_SYM = 602,
    NAMES_SYM = 603,
    NAME_SYM = 604,
    NATIONAL_SYM = 605,
    NATURAL = 606,
    NCHAR_STRING = 607,
    NCHAR_SYM = 608,
    NDBCLUSTER_SYM = 609,
    NE = 610,
    NEG = 611,
    NEW_SYM = 612,
    NEXT_SYM = 613,
    NODEGROUP_SYM = 614,
    NONE_SYM = 615,
    NOT2_SYM = 616,
    NOT_SYM = 617,
    NOW_SYM = 618,
    NO_SYM = 619,
    NO_WAIT_SYM = 620,
    NO_WRITE_TO_BINLOG = 621,
    NULL_SYM = 622,
    NUM = 623,
    NUMBER_SYM = 624,
    NUMERIC_SYM = 625,
    NVARCHAR_SYM = 626,
    OFFSET_SYM = 627,
    OLD_PASSWORD = 628,
    ON = 629,
    ONE_SYM = 630,
    ONLY_SYM = 631,
    ONLINE_SYM = 632,
    OPEN_SYM = 633,
    OPTIMIZE = 634,
    OPTIONS_SYM = 635,
    OPTION = 636,
    OPTIONALLY = 637,
    OR2_SYM = 638,
    ORDER_SYM = 639,
    OR_OR_SYM = 640,
    OR_SYM = 641,
    OUTER = 642,
    OUTFILE = 643,
    OUT_SYM = 644,
    OWNER_SYM = 645,
    PACK_KEYS_SYM = 646,
    PAGE_SYM = 647,
    PAGE_CHECKSUM_SYM = 648,
    PARAM_MARKER = 649,
    PARSER_SYM = 650,
    PARSE_VCOL_EXPR_SYM = 651,
    PARTIAL = 652,
    PARTITION_SYM = 653,
    PARTITIONS_SYM = 654,
    PARTITIONING_SYM = 655,
    PASSWORD = 656,
    PERSISTENT_SYM = 657,
    PHASE_SYM = 658,
    PLUGINS_SYM = 659,
    PLUGIN_SYM = 660,
    POINT_SYM = 661,
    POLYGON = 662,
    PORT_SYM = 663,
    POSITION_SYM = 664,
    PRECISION = 665,
    PREPARE_SYM = 666,
    PRESERVE_SYM = 667,
    PREV_SYM = 668,
    PRIMARY_SYM = 669,
    PRIVILEGES = 670,
    PROCEDURE_SYM = 671,
    PROCESS = 672,
    PROCESSLIST_SYM = 673,
    PROFILE_SYM = 674,
    PROFILES_SYM = 675,
    PROXY_SYM = 676,
    PURGE = 677,
    QUARTER_SYM = 678,
    QUERY_SYM = 679,
    QUICK = 680,
    RANGE_SYM = 681,
    READS_SYM = 682,
    READ_ONLY_SYM = 683,
    READ_SYM = 684,
    READ_WRITE_SYM = 685,
    REAL = 686,
    REBUILD_SYM = 687,
    RECOVER_SYM = 688,
    REDOFILE_SYM = 689,
    REDO_BUFFER_SIZE_SYM = 690,
    REDUNDANT_SYM = 691,
    REFERENCES = 692,
    REGEXP = 693,
    RELAY = 694,
    RELAYLOG_SYM = 695,
    RELAY_LOG_FILE_SYM = 696,
    RELAY_LOG_POS_SYM = 697,
    RELAY_THREAD = 698,
    RELEASE_SYM = 699,
    RELOAD = 700,
    REMOVE_SYM = 701,
    RENAME = 702,
    REORGANIZE_SYM = 703,
    REPAIR = 704,
    REPEATABLE_SYM = 705,
    REPEAT_SYM = 706,
    REPLACE = 707,
    REPLICATION = 708,
    REQUIRE_SYM = 709,
    RESET_SYM = 710,
    RESIGNAL_SYM = 711,
    RESOURCES = 712,
    RESTORE_SYM = 713,
    RESTRICT = 714,
    RESUME_SYM = 715,
    RETURNED_SQLSTATE_SYM = 716,
    RETURNING_SYM = 717,
    RETURNS_SYM = 718,
    RETURN_SYM = 719,
    REVERSE_SYM = 720,
    REVOKE = 721,
    RIGHT = 722,
    ROLE_SYM = 723,
    ROLLBACK_SYM = 724,
    ROLLUP_SYM = 725,
    ROUTINE_SYM = 726,
    ROWS_SYM = 727,
    ROW_FORMAT_SYM = 728,
    ROW_SYM = 729,
    ROW_COUNT_SYM = 730,
    RTREE_SYM = 731,
    SAVEPOINT_SYM = 732,
    SCHEDULE_SYM = 733,
    SCHEMA_NAME_SYM = 734,
    SECOND_MICROSECOND_SYM = 735,
    SECOND_SYM = 736,
    SECURITY_SYM = 737,
    SELECT_SYM = 738,
    SENSITIVE_SYM = 739,
    SEPARATOR_SYM = 740,
    SERIALIZABLE_SYM = 741,
    SERIAL_SYM = 742,
    SESSION_SYM = 743,
    SERVER_SYM = 744,
    SERVER_OPTIONS = 745,
    SET = 746,
    SET_VAR = 747,
    SHARE_SYM = 748,
    SHIFT_LEFT = 749,
    SHIFT_RIGHT = 750,
    SHOW = 751,
    SHUTDOWN = 752,
    SIGNAL_SYM = 753,
    SIGNED_SYM = 754,
    SIMPLE_SYM = 755,
    SLAVE = 756,
    SLAVES = 757,
    SLAVE_POS_SYM = 758,
    SLOW = 759,
    SMALLINT = 760,
    SNAPSHOT_SYM = 761,
    SOCKET_SYM = 762,
    SOFT_SYM = 763,
    SONAME_SYM = 764,
    SOUNDS_SYM = 765,
    SOURCE_SYM = 766,
    SPATIAL_SYM = 767,
    SPECIFIC_SYM = 768,
    SQLEXCEPTION_SYM = 769,
    SQLSTATE_SYM = 770,
    SQLWARNING_SYM = 771,
    SQL_BIG_RESULT = 772,
    SQL_BUFFER_RESULT = 773,
    SQL_CACHE_SYM = 774,
    SQL_CALC_FOUND_ROWS = 775,
    SQL_NO_CACHE_SYM = 776,
    SQL_SMALL_RESULT = 777,
    SQL_SYM = 778,
    SQL_THREAD = 779,
    SSL_SYM = 780,
    STARTING = 781,
    STARTS_SYM = 782,
    START_SYM = 783,
    STATS_AUTO_RECALC_SYM = 784,
    STATS_PERSISTENT_SYM = 785,
    STATS_SAMPLE_PAGES_SYM = 786,
    STATUS_SYM = 787,
    STDDEV_SAMP_SYM = 788,
    STD_SYM = 789,
    STOP_SYM = 790,
    STORAGE_SYM = 791,
    STRAIGHT_JOIN = 792,
    STRING_SYM = 793,
    SUBCLASS_ORIGIN_SYM = 794,
    SUBDATE_SYM = 795,
    SUBJECT_SYM = 796,
    SUBPARTITIONS_SYM = 797,
    SUBPARTITION_SYM = 798,
    SUBSTRING = 799,
    SUM_SYM = 800,
    SUPER_SYM = 801,
    SUSPEND_SYM = 802,
    SWAPS_SYM = 803,
    SWITCHES_SYM = 804,
    SYSDATE = 805,
    TABLES = 806,
    TABLESPACE = 807,
    TABLE_REF_PRIORITY = 808,
    TABLE_STATS_SYM = 809,
    TABLE_SYM = 810,
    TABLE_CHECKSUM_SYM = 811,
    TABLE_NAME_SYM = 812,
    TEMPORARY = 813,
    TEMPTABLE_SYM = 814,
    TERMINATED = 815,
    TEXT_STRING = 816,
    TEXT_SYM = 817,
    THAN_SYM = 818,
    THEN_SYM = 819,
    TIMESTAMP = 820,
    TIMESTAMP_ADD = 821,
    TIMESTAMP_DIFF = 822,
    TIME_SYM = 823,
    TINYBLOB = 824,
    TINYINT = 825,
    TINYTEXT = 826,
    TO_SYM = 827,
    TRAILING = 828,
    TRANSACTION_SYM = 829,
    TRANSACTIONAL_SYM = 830,
    TRIGGERS_SYM = 831,
    TRIGGER_SYM = 832,
    TRIM = 833,
    TRUE_SYM = 834,
    TRUNCATE_SYM = 835,
    TYPES_SYM = 836,
    TYPE_SYM = 837,
    UDF_RETURNS_SYM = 838,
    ULONGLONG_NUM = 839,
    UNCOMMITTED_SYM = 840,
    UNDEFINED_SYM = 841,
    UNDERSCORE_CHARSET = 842,
    UNDOFILE_SYM = 843,
    UNDO_BUFFER_SIZE_SYM = 844,
    UNDO_SYM = 845,
    UNICODE_SYM = 846,
    UNINSTALL_SYM = 847,
    UNION_SYM = 848,
    UNIQUE_SYM = 849,
    UNKNOWN_SYM = 850,
    UNLOCK_SYM = 851,
    UNSIGNED = 852,
    UNTIL_SYM = 853,
    UPDATE_SYM = 854,
    UPGRADE_SYM = 855,
    USAGE = 856,
    USER = 857,
    USER_STATS_SYM = 858,
    USE_FRM = 859,
    USE_SYM = 860,
    USING = 861,
    UTC_DATE_SYM = 862,
    UTC_TIMESTAMP_SYM = 863,
    UTC_TIME_SYM = 864,
    VALUES = 865,
    VALUE_SYM = 866,
    VARBINARY = 867,
    VARCHAR = 868,
    VARIABLES = 869,
    VARIANCE_SYM = 870,
    VARYING = 871,
    VAR_SAMP_SYM = 872,
    VIA_SYM = 873,
    VIEW_SYM = 874,
    VIRTUAL_SYM = 875,
    WAIT_SYM = 876,
    WARNINGS = 877,
    WEEK_SYM = 878,
    WEIGHT_STRING_SYM = 879,
    WHEN_SYM = 880,
    WHERE = 881,
    WHILE_SYM = 882,
    WITH = 883,
    WITH_CUBE_SYM = 884,
    WITH_ROLLUP_SYM = 885,
    WORK_SYM = 886,
    WRAPPER_SYM = 887,
    WRITE_SYM = 888,
    X509_SYM = 889,
    XA_SYM = 890,
    XML_SYM = 891,
    XOR = 892,
    YEAR_MONTH_SYM = 893,
    YEAR_SYM = 894,
    ZEROFILL = 895,
    IMPOSSIBLE_ACTION = 896
  };
#endif
/* Tokens.  */
#define ABORT_SYM 258
#define ACCESSIBLE_SYM 259
#define ACTION 260
#define ADD 261
#define ADMIN_SYM 262
#define ADDDATE_SYM 263
#define AFTER_SYM 264
#define AGAINST 265
#define AGGREGATE_SYM 266
#define ALGORITHM_SYM 267
#define ALL 268
#define ALTER 269
#define ALWAYS_SYM 270
#define ANALYZE_SYM 271
#define AND_AND_SYM 272
#define AND_SYM 273
#define ANY_SYM 274
#define AS 275
#define ASC 276
#define ASCII_SYM 277
#define ASENSITIVE_SYM 278
#define AT_SYM 279
#define AUTHORS_SYM 280
#define AUTOEXTEND_SIZE_SYM 281
#define AUTO_INC 282
#define AUTO_SYM 283
#define AVG_ROW_LENGTH 284
#define AVG_SYM 285
#define BACKUP_SYM 286
#define BEFORE_SYM 287
#define BEGIN_SYM 288
#define BETWEEN_SYM 289
#define BIGINT 290
#define BINARY 291
#define BINLOG_SYM 292
#define BIN_NUM 293
#define BIT_AND 294
#define BIT_OR 295
#define BIT_SYM 296
#define BIT_XOR 297
#define BLOB_SYM 298
#define BLOCK_SYM 299
#define BOOLEAN_SYM 300
#define BOOL_SYM 301
#define BOTH 302
#define BTREE_SYM 303
#define BY 304
#define BYTE_SYM 305
#define CACHE_SYM 306
#define CALL_SYM 307
#define CASCADE 308
#define CASCADED 309
#define CASE_SYM 310
#define CAST_SYM 311
#define CATALOG_NAME_SYM 312
#define CHAIN_SYM 313
#define CHANGE 314
#define CHANGED 315
#define CHARSET 316
#define CHAR_SYM 317
#define CHECKPOINT_SYM 318
#define CHECKSUM_SYM 319
#define CHECK_SYM 320
#define CIPHER_SYM 321
#define CLASS_ORIGIN_SYM 322
#define CLIENT_SYM 323
#define CLIENT_STATS_SYM 324
#define CLOSE_SYM 325
#define COALESCE 326
#define CODE_SYM 327
#define COLLATE_SYM 328
#define COLLATION_SYM 329
#define COLUMNS 330
#define COLUMN_ADD_SYM 331
#define COLUMN_CHECK_SYM 332
#define COLUMN_CREATE_SYM 333
#define COLUMN_DELETE_SYM 334
#define COLUMN_GET_SYM 335
#define COLUMN_SYM 336
#define COLUMN_NAME_SYM 337
#define COMMENT_SYM 338
#define COMMITTED_SYM 339
#define COMMIT_SYM 340
#define COMPACT_SYM 341
#define COMPLETION_SYM 342
#define COMPRESSED_SYM 343
#define CONCURRENT 344
#define CONDITION_SYM 345
#define CONNECTION_SYM 346
#define CONSISTENT_SYM 347
#define CONSTRAINT 348
#define CONSTRAINT_CATALOG_SYM 349
#define CONSTRAINT_NAME_SYM 350
#define CONSTRAINT_SCHEMA_SYM 351
#define CONTAINS_SYM 352
#define CONTEXT_SYM 353
#define CONTINUE_SYM 354
#define CONTRIBUTORS_SYM 355
#define CONVERT_SYM 356
#define COUNT_SYM 357
#define CPU_SYM 358
#define CREATE 359
#define CROSS 360
#define CUBE_SYM 361
#define CURDATE 362
#define CURRENT_SYM 363
#define CURRENT_USER 364
#define CURRENT_ROLE 365
#define CURRENT_POS_SYM 366
#define CURSOR_SYM 367
#define CURSOR_NAME_SYM 368
#define CURTIME 369
#define DATABASE 370
#define DATABASES 371
#define DATAFILE_SYM 372
#define DATA_SYM 373
#define DATETIME 374
#define DATE_ADD_INTERVAL 375
#define DATE_SUB_INTERVAL 376
#define DATE_SYM 377
#define DAY_HOUR_SYM 378
#define DAY_MICROSECOND_SYM 379
#define DAY_MINUTE_SYM 380
#define DAY_SECOND_SYM 381
#define DAY_SYM 382
#define DEALLOCATE_SYM 383
#define DECIMAL_NUM 384
#define DECIMAL_SYM 385
#define DECLARE_SYM 386
#define DEFAULT 387
#define DEFINER_SYM 388
#define DELAYED_SYM 389
#define DELAY_KEY_WRITE_SYM 390
#define DELETE_SYM 391
#define DESC 392
#define DESCRIBE 393
#define DES_KEY_FILE 394
#define DETERMINISTIC_SYM 395
#define DIAGNOSTICS_SYM 396
#define DIRECTORY_SYM 397
#define DISABLE_SYM 398
#define DISCARD 399
#define DISK_SYM 400
#define DISTINCT 401
#define DIV_SYM 402
#define DOUBLE_SYM 403
#define DO_SYM 404
#define DROP 405
#define DUAL_SYM 406
#define DUMPFILE 407
#define DUPLICATE_SYM 408
#define DYNAMIC_SYM 409
#define EACH_SYM 410
#define ELSE 411
#define ELSEIF_SYM 412
#define ENABLE_SYM 413
#define ENCLOSED 414
#define END 415
#define ENDS_SYM 416
#define END_OF_INPUT 417
#define ENGINES_SYM 418
#define ENGINE_SYM 419
#define ENUM 420
#define EQUAL_SYM 421
#define ERROR_SYM 422
#define ERRORS 423
#define ESCAPED 424
#define ESCAPE_SYM 425
#define EVENTS_SYM 426
#define EVENT_SYM 427
#define EVERY_SYM 428
#define EXCHANGE_SYM 429
#define EXAMINED_SYM 430
#define EXECUTE_SYM 431
#define EXISTS 432
#define EXIT_SYM 433
#define EXPANSION_SYM 434
#define EXPORT_SYM 435
#define EXTENDED_SYM 436
#define EXTENT_SIZE_SYM 437
#define EXTRACT_SYM 438
#define FALSE_SYM 439
#define FAST_SYM 440
#define FAULTS_SYM 441
#define FETCH_SYM 442
#define FILE_SYM 443
#define FIRST_SYM 444
#define FIXED_SYM 445
#define FLOAT_NUM 446
#define FLOAT_SYM 447
#define FLUSH_SYM 448
#define FORCE_SYM 449
#define FOREIGN 450
#define FOR_SYM 451
#define FOUND_SYM 452
#define FROM 453
#define FULL 454
#define FULLTEXT_SYM 455
#define FUNCTION_SYM 456
#define GE 457
#define GENERAL 458
#define GENERATED_SYM 459
#define GEOMETRYCOLLECTION 460
#define GEOMETRY_SYM 461
#define GET_FORMAT 462
#define GET_SYM 463
#define GLOBAL_SYM 464
#define GRANT 465
#define GRANTS 466
#define GROUP_SYM 467
#define GROUP_CONCAT_SYM 468
#define HANDLER_SYM 469
#define HARD_SYM 470
#define HASH_SYM 471
#define HAVING 472
#define HELP_SYM 473
#define HEX_NUM 474
#define HEX_STRING 475
#define HIGH_PRIORITY 476
#define HOST_SYM 477
#define HOSTS_SYM 478
#define HOUR_MICROSECOND_SYM 479
#define HOUR_MINUTE_SYM 480
#define HOUR_SECOND_SYM 481
#define HOUR_SYM 482
#define ID_SYM 483
#define IDENT 484
#define IDENTIFIED_SYM 485
#define IDENT_QUOTED 486
#define IF 487
#define IGNORE_SYM 488
#define IGNORE_SERVER_IDS_SYM 489
#define IMPORT 490
#define INDEXES 491
#define INDEX_SYM 492
#define INDEX_STATS_SYM 493
#define INFILE 494
#define INITIAL_SIZE_SYM 495
#define INNER_SYM 496
#define INOUT_SYM 497
#define INSENSITIVE_SYM 498
#define INSERT 499
#define INSERT_METHOD 500
#define INSTALL_SYM 501
#define INTERVAL_SYM 502
#define INTO 503
#define INT_SYM 504
#define INVOKER_SYM 505
#define IN_SYM 506
#define IO_SYM 507
#define IPC_SYM 508
#define IS 509
#define ISOLATION 510
#define ISSUER_SYM 511
#define ITERATE_SYM 512
#define JOIN_SYM 513
#define KEYS 514
#define KEY_BLOCK_SIZE 515
#define KEY_SYM 516
#define KILL_SYM 517
#define LANGUAGE_SYM 518
#define LAST_SYM 519
#define LAST_VALUE 520
#define LE 521
#define LEADING 522
#define LEAVES 523
#define LEAVE_SYM 524
#define LEFT 525
#define LESS_SYM 526
#define LEVEL_SYM 527
#define LEX_HOSTNAME 528
#define LIKE 529
#define LIMIT 530
#define LINEAR_SYM 531
#define LINES 532
#define LINESTRING 533
#define LIST_SYM 534
#define LOAD 535
#define LOCAL_SYM 536
#define LOCATOR_SYM 537
#define LOCKS_SYM 538
#define LOCK_SYM 539
#define LOGFILE_SYM 540
#define LOGS_SYM 541
#define LONGBLOB 542
#define LONGTEXT 543
#define LONG_NUM 544
#define LONG_SYM 545
#define LOOP_SYM 546
#define LOW_PRIORITY 547
#define MASTER_CONNECT_RETRY_SYM 548
#define MASTER_GTID_POS_SYM 549
#define MASTER_HOST_SYM 550
#define MASTER_LOG_FILE_SYM 551
#define MASTER_LOG_POS_SYM 552
#define MASTER_PASSWORD_SYM 553
#define MASTER_PORT_SYM 554
#define MASTER_SERVER_ID_SYM 555
#define MASTER_SSL_CAPATH_SYM 556
#define MASTER_SSL_CA_SYM 557
#define MASTER_SSL_CERT_SYM 558
#define MASTER_SSL_CIPHER_SYM 559
#define MASTER_SSL_CRL_SYM 560
#define MASTER_SSL_CRLPATH_SYM 561
#define MASTER_SSL_KEY_SYM 562
#define MASTER_SSL_SYM 563
#define MASTER_SSL_VERIFY_SERVER_CERT_SYM 564
#define MASTER_SYM 565
#define MASTER_USER_SYM 566
#define MASTER_USE_GTID_SYM 567
#define MASTER_HEARTBEAT_PERIOD_SYM 568
#define MATCH 569
#define MAX_CONNECTIONS_PER_HOUR 570
#define MAX_QUERIES_PER_HOUR 571
#define MAX_ROWS 572
#define MAX_SIZE_SYM 573
#define MAX_SYM 574
#define MAX_UPDATES_PER_HOUR 575
#define MAX_USER_CONNECTIONS_SYM 576
#define MAX_VALUE_SYM 577
#define MEDIUMBLOB 578
#define MEDIUMINT 579
#define MEDIUMTEXT 580
#define MEDIUM_SYM 581
#define MEMORY_SYM 582
#define MERGE_SYM 583
#define MESSAGE_TEXT_SYM 584
#define MICROSECOND_SYM 585
#define MIGRATE_SYM 586
#define MINUTE_MICROSECOND_SYM 587
#define MINUTE_SECOND_SYM 588
#define MINUTE_SYM 589
#define MIN_ROWS 590
#define MIN_SYM 591
#define MODE_SYM 592
#define MODIFIES_SYM 593
#define MODIFY_SYM 594
#define MOD_SYM 595
#define MONTH_SYM 596
#define MULTILINESTRING 597
#define MULTIPOINT 598
#define MULTIPOLYGON 599
#define MUTEX_SYM 600
#define MYSQL_SYM 601
#define MYSQL_ERRNO_SYM 602
#define NAMES_SYM 603
#define NAME_SYM 604
#define NATIONAL_SYM 605
#define NATURAL 606
#define NCHAR_STRING 607
#define NCHAR_SYM 608
#define NDBCLUSTER_SYM 609
#define NE 610
#define NEG 611
#define NEW_SYM 612
#define NEXT_SYM 613
#define NODEGROUP_SYM 614
#define NONE_SYM 615
#define NOT2_SYM 616
#define NOT_SYM 617
#define NOW_SYM 618
#define NO_SYM 619
#define NO_WAIT_SYM 620
#define NO_WRITE_TO_BINLOG 621
#define NULL_SYM 622
#define NUM 623
#define NUMBER_SYM 624
#define NUMERIC_SYM 625
#define NVARCHAR_SYM 626
#define OFFSET_SYM 627
#define OLD_PASSWORD 628
#define ON 629
#define ONE_SYM 630
#define ONLY_SYM 631
#define ONLINE_SYM 632
#define OPEN_SYM 633
#define OPTIMIZE 634
#define OPTIONS_SYM 635
#define OPTION 636
#define OPTIONALLY 637
#define OR2_SYM 638
#define ORDER_SYM 639
#define OR_OR_SYM 640
#define OR_SYM 641
#define OUTER 642
#define OUTFILE 643
#define OUT_SYM 644
#define OWNER_SYM 645
#define PACK_KEYS_SYM 646
#define PAGE_SYM 647
#define PAGE_CHECKSUM_SYM 648
#define PARAM_MARKER 649
#define PARSER_SYM 650
#define PARSE_VCOL_EXPR_SYM 651
#define PARTIAL 652
#define PARTITION_SYM 653
#define PARTITIONS_SYM 654
#define PARTITIONING_SYM 655
#define PASSWORD 656
#define PERSISTENT_SYM 657
#define PHASE_SYM 658
#define PLUGINS_SYM 659
#define PLUGIN_SYM 660
#define POINT_SYM 661
#define POLYGON 662
#define PORT_SYM 663
#define POSITION_SYM 664
#define PRECISION 665
#define PREPARE_SYM 666
#define PRESERVE_SYM 667
#define PREV_SYM 668
#define PRIMARY_SYM 669
#define PRIVILEGES 670
#define PROCEDURE_SYM 671
#define PROCESS 672
#define PROCESSLIST_SYM 673
#define PROFILE_SYM 674
#define PROFILES_SYM 675
#define PROXY_SYM 676
#define PURGE 677
#define QUARTER_SYM 678
#define QUERY_SYM 679
#define QUICK 680
#define RANGE_SYM 681
#define READS_SYM 682
#define READ_ONLY_SYM 683
#define READ_SYM 684
#define READ_WRITE_SYM 685
#define REAL 686
#define REBUILD_SYM 687
#define RECOVER_SYM 688
#define REDOFILE_SYM 689
#define REDO_BUFFER_SIZE_SYM 690
#define REDUNDANT_SYM 691
#define REFERENCES 692
#define REGEXP 693
#define RELAY 694
#define RELAYLOG_SYM 695
#define RELAY_LOG_FILE_SYM 696
#define RELAY_LOG_POS_SYM 697
#define RELAY_THREAD 698
#define RELEASE_SYM 699
#define RELOAD 700
#define REMOVE_SYM 701
#define RENAME 702
#define REORGANIZE_SYM 703
#define REPAIR 704
#define REPEATABLE_SYM 705
#define REPEAT_SYM 706
#define REPLACE 707
#define REPLICATION 708
#define REQUIRE_SYM 709
#define RESET_SYM 710
#define RESIGNAL_SYM 711
#define RESOURCES 712
#define RESTORE_SYM 713
#define RESTRICT 714
#define RESUME_SYM 715
#define RETURNED_SQLSTATE_SYM 716
#define RETURNING_SYM 717
#define RETURNS_SYM 718
#define RETURN_SYM 719
#define REVERSE_SYM 720
#define REVOKE 721
#define RIGHT 722
#define ROLE_SYM 723
#define ROLLBACK_SYM 724
#define ROLLUP_SYM 725
#define ROUTINE_SYM 726
#define ROWS_SYM 727
#define ROW_FORMAT_SYM 728
#define ROW_SYM 729
#define ROW_COUNT_SYM 730
#define RTREE_SYM 731
#define SAVEPOINT_SYM 732
#define SCHEDULE_SYM 733
#define SCHEMA_NAME_SYM 734
#define SECOND_MICROSECOND_SYM 735
#define SECOND_SYM 736
#define SECURITY_SYM 737
#define SELECT_SYM 738
#define SENSITIVE_SYM 739
#define SEPARATOR_SYM 740
#define SERIALIZABLE_SYM 741
#define SERIAL_SYM 742
#define SESSION_SYM 743
#define SERVER_SYM 744
#define SERVER_OPTIONS 745
#define SET 746
#define SET_VAR 747
#define SHARE_SYM 748
#define SHIFT_LEFT 749
#define SHIFT_RIGHT 750
#define SHOW 751
#define SHUTDOWN 752
#define SIGNAL_SYM 753
#define SIGNED_SYM 754
#define SIMPLE_SYM 755
#define SLAVE 756
#define SLAVES 757
#define SLAVE_POS_SYM 758
#define SLOW 759
#define SMALLINT 760
#define SNAPSHOT_SYM 761
#define SOCKET_SYM 762
#define SOFT_SYM 763
#define SONAME_SYM 764
#define SOUNDS_SYM 765
#define SOURCE_SYM 766
#define SPATIAL_SYM 767
#define SPECIFIC_SYM 768
#define SQLEXCEPTION_SYM 769
#define SQLSTATE_SYM 770
#define SQLWARNING_SYM 771
#define SQL_BIG_RESULT 772
#define SQL_BUFFER_RESULT 773
#define SQL_CACHE_SYM 774
#define SQL_CALC_FOUND_ROWS 775
#define SQL_NO_CACHE_SYM 776
#define SQL_SMALL_RESULT 777
#define SQL_SYM 778
#define SQL_THREAD 779
#define SSL_SYM 780
#define STARTING 781
#define STARTS_SYM 782
#define START_SYM 783
#define STATS_AUTO_RECALC_SYM 784
#define STATS_PERSISTENT_SYM 785
#define STATS_SAMPLE_PAGES_SYM 786
#define STATUS_SYM 787
#define STDDEV_SAMP_SYM 788
#define STD_SYM 789
#define STOP_SYM 790
#define STORAGE_SYM 791
#define STRAIGHT_JOIN 792
#define STRING_SYM 793
#define SUBCLASS_ORIGIN_SYM 794
#define SUBDATE_SYM 795
#define SUBJECT_SYM 796
#define SUBPARTITIONS_SYM 797
#define SUBPARTITION_SYM 798
#define SUBSTRING 799
#define SUM_SYM 800
#define SUPER_SYM 801
#define SUSPEND_SYM 802
#define SWAPS_SYM 803
#define SWITCHES_SYM 804
#define SYSDATE 805
#define TABLES 806
#define TABLESPACE 807
#define TABLE_REF_PRIORITY 808
#define TABLE_STATS_SYM 809
#define TABLE_SYM 810
#define TABLE_CHECKSUM_SYM 811
#define TABLE_NAME_SYM 812
#define TEMPORARY 813
#define TEMPTABLE_SYM 814
#define TERMINATED 815
#define TEXT_STRING 816
#define TEXT_SYM 817
#define THAN_SYM 818
#define THEN_SYM 819
#define TIMESTAMP 820
#define TIMESTAMP_ADD 821
#define TIMESTAMP_DIFF 822
#define TIME_SYM 823
#define TINYBLOB 824
#define TINYINT 825
#define TINYTEXT 826
#define TO_SYM 827
#define TRAILING 828
#define TRANSACTION_SYM 829
#define TRANSACTIONAL_SYM 830
#define TRIGGERS_SYM 831
#define TRIGGER_SYM 832
#define TRIM 833
#define TRUE_SYM 834
#define TRUNCATE_SYM 835
#define TYPES_SYM 836
#define TYPE_SYM 837
#define UDF_RETURNS_SYM 838
#define ULONGLONG_NUM 839
#define UNCOMMITTED_SYM 840
#define UNDEFINED_SYM 841
#define UNDERSCORE_CHARSET 842
#define UNDOFILE_SYM 843
#define UNDO_BUFFER_SIZE_SYM 844
#define UNDO_SYM 845
#define UNICODE_SYM 846
#define UNINSTALL_SYM 847
#define UNION_SYM 848
#define UNIQUE_SYM 849
#define UNKNOWN_SYM 850
#define UNLOCK_SYM 851
#define UNSIGNED 852
#define UNTIL_SYM 853
#define UPDATE_SYM 854
#define UPGRADE_SYM 855
#define USAGE 856
#define USER 857
#define USER_STATS_SYM 858
#define USE_FRM 859
#define USE_SYM 860
#define USING 861
#define UTC_DATE_SYM 862
#define UTC_TIMESTAMP_SYM 863
#define UTC_TIME_SYM 864
#define VALUES 865
#define VALUE_SYM 866
#define VARBINARY 867
#define VARCHAR 868
#define VARIABLES 869
#define VARIANCE_SYM 870
#define VARYING 871
#define VAR_SAMP_SYM 872
#define VIA_SYM 873
#define VIEW_SYM 874
#define VIRTUAL_SYM 875
#define WAIT_SYM 876
#define WARNINGS 877
#define WEEK_SYM 878
#define WEIGHT_STRING_SYM 879
#define WHEN_SYM 880
#define WHERE 881
#define WHILE_SYM 882
#define WITH 883
#define WITH_CUBE_SYM 884
#define WITH_ROLLUP_SYM 885
#define WORK_SYM 886
#define WRAPPER_SYM 887
#define WRITE_SYM 888
#define X509_SYM 889
#define XA_SYM 890
#define XML_SYM 891
#define XOR 892
#define YEAR_MONTH_SYM 893
#define YEAR_SYM 894
#define ZEROFILL 895
#define IMPOSSIBLE_ACTION 896

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE YYSTYPE;
union YYSTYPE
{
#line 897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:355  */

  int  num;
  ulong ulong_num;
  ulonglong ulonglong_number;
  longlong longlong_number;
  LEX_STRING lex_str;
  LEX_STRING *lex_str_ptr;
  LEX_SYMBOL symbol;
  LEX_TYPE lex_type;
  Table_ident *table;
  char *simple_string;
  Item *item;
  Item_num *item_num;
  List<Item> *item_list;
  List<String> *string_list;
  String *string;
  Key_part_spec *key_part;
  TABLE_LIST *table_list;
  udf_func *udf;
  LEX_USER *lex_user;
  struct sys_var_with_base variable;
  enum enum_var_type var_type;
  Key::Keytype key_type;
  enum ha_key_alg key_alg;
  handlerton *db_type;
  enum row_type row_type;
  enum ha_rkey_function ha_rkey_mode;
  enum enum_tx_isolation tx_isolation;
  enum Cast_target cast_type;
  enum Item_udftype udf_type;
  enum ha_choice choice;
  CHARSET_INFO *charset;
  thr_lock_type lock_type;
  interval_type interval, interval_time_st;
  timestamp_type date_time_type;
  st_select_lex *select_lex;
  chooser_compare_func_creator boolfunc2creator;
  class sp_condition_value *spcondvalue;
  struct { int vars, conds, hndlrs, curs; } spblock;
  sp_name *spname;
  LEX *lex;
  sp_head *sphead;
  struct p_elem_val *p_elem_value;
  enum index_hint_type index_hint;
  enum enum_filetype filetype;
  enum Foreign_key::fk_option m_fk_option;
  enum enum_yes_no_unknown m_yes_no_unk;
  Diag_condition_item_name diag_condition_item_name;
  Diagnostics_information::Which_area diag_area;
  Diagnostics_information *diag_info;
  Statement_information_item *stmt_info_item;
  Statement_information_item::Name stmt_info_item_name;
  List<Statement_information_item> *stmt_info_list;
  Condition_information_item *cond_info_item;
  Condition_information_item::Name cond_info_item_name;
  List<Condition_information_item> *cond_info_list;
  DYNCALL_CREATE_DEF *dyncol_def;
  List<DYNCALL_CREATE_DEF> *dyncol_def_list;
  bool is_not_empty;

#line 2328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:355  */
};
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif



int MYSQLparse (THD *thd);

#endif /* !YY_MYSQL_HOME_BUILDBOT_GIT_MKDIST_SQL_SQL_YACC_H_INCLUDED  */

/* Copy the second part of user declarations.  */
#line 958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:358  */

bool my_yyoverflow(short **a, YYSTYPE **b, ulong *yystacksize);

#line 2345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  623
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   65755

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  664
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  1003
/* YYNRULES -- Number of rules.  */
#define YYNRULES  2831
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  4803

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   896

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   657,     2,     2,     2,   651,   646,     2,
     654,   655,   649,   648,   656,   647,   662,   650,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   663,   660,
     644,   642,   643,     2,   661,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,   652,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   658,   645,   659,   653,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,  1937,  1937,  1949,  1948,  1973,  1980,  1982,  1986,  1987,
    1992,  1993,  1994,  1995,  1996,  1997,  1998,  1999,  2000,  2001,
    2002,  2003,  2004,  2005,  2006,  2007,  2008,  2009,  2010,  2011,
    2012,  2013,  2014,  2015,  2016,  2017,  2018,  2019,  2020,  2021,
    2022,  2023,  2024,  2025,  2026,  2027,  2028,  2029,  2030,  2031,
    2032,  2033,  2034,  2035,  2036,  2037,  2038,  2039,  2040,  2041,
    2042,  2043,  2044,  2045,  2046,  2050,  2059,  2060,  2064,  2073,
    2079,  2089,  2088,  2098,  2100,  2104,  2105,  2109,  2122,  2121,
    2141,  2140,  2149,  2150,  2154,  2158,  2162,  2166,  2170,  2174,
    2179,  2183,  2187,  2191,  2195,  2199,  2204,  2208,  2213,  2244,
    2249,  2252,  2254,  2255,  2259,  2265,  2269,  2285,  2289,  2295,
    2305,  2315,  2328,  2332,  2336,  2352,  2351,  2396,  2401,  2395,
    2408,  2413,  2406,  2420,  2425,  2418,  2431,  2430,  2443,  2442,
    2458,  2462,  2466,  2470,  2474,  2481,  2494,  2495,  2499,  2503,
    2507,  2511,  2515,  2519,  2523,  2531,  2530,  2561,  2560,  2567,
    2574,  2575,  2581,  2587,  2597,  2603,  2609,  2611,  2618,  2619,
    2623,  2629,  2638,  2639,  2647,  2647,  2703,  2704,  2705,  2706,
    2707,  2708,  2709,  2710,  2711,  2712,  2713,  2714,  2715,  2720,
    2734,  2750,  2768,  2769,  2773,  2774,  2779,  2781,  2783,  2785,
    2787,  2789,  2791,  2797,  2798,  2799,  2803,  2807,  2815,  2814,
    2827,  2829,  2832,  2834,  2838,  2842,  2849,  2851,  2855,  2856,
    2861,  2881,  2909,  2911,  2915,  2916,  2920,  2947,  2948,  2949,
    2950,  2954,  2955,  2959,  2960,  2965,  2968,  2995,  2994,  3058,
    3074,  3073,  3129,  3155,  3155,  3178,  3179,  3184,  3186,  3191,
    3213,  3224,  3228,  3250,  3251,  3255,  3259,  3268,  3274,  3280,
    3289,  3303,  3326,  3332,  3333,  3339,  3342,  3346,  3354,  3374,
    3376,  3394,  3400,  3402,  3404,  3406,  3408,  3410,  3412,  3414,
    3416,  3418,  3420,  3422,  3427,  3442,  3458,  3459,  3464,  3470,
    3479,  3485,  3494,  3502,  3511,  3520,  3522,  3531,  3536,  3542,
    3551,  3559,  3561,  3563,  3565,  3567,  3569,  3571,  3573,  3575,
    3577,  3579,  3581,  3583,  3588,  3606,  3627,  3628,  3632,  3633,
    3634,  3635,  3636,  3637,  3638,  3639,  3640,  3641,  3642,  3643,
    3644,  3649,  3648,  3655,  3655,  3710,  3709,  3738,  3738,  3753,
    3806,  3849,  3870,  3869,  3891,  3910,  3912,  3913,  3917,  3937,
    3960,  3962,  3978,  3960,  3997,  3999,  4000,  4004,  4005,  4010,
    4016,  4009,  4037,  4036,  4052,  4053,  4057,  4058,  4063,  4067,
    4062,  4088,  4092,  4087,  4111,  4121,  4126,  4125,  4160,  4161,
    4166,  4165,  4197,  4197,  4212,  4211,  4248,  4260,  4262,  4259,
    4289,  4288,  4309,  4311,  4316,  4318,  4320,  4337,  4342,  4348,
    4355,  4356,  4364,  4370,  4379,  4385,  4391,  4392,  4396,  4396,
    4401,  4402,  4403,  4407,  4408,  4409,  4413,  4417,  4418,  4419,
    4423,  4424,  4425,  4426,  4427,  4428,  4429,  4430,  4434,  4438,
    4439,  4440,  4444,  4445,  4446,  4447,  4448,  4452,  4456,  4457,
    4458,  4462,  4463,  4464,  4465,  4466,  4467,  4468,  4472,  4476,
    4477,  4478,  4482,  4483,  4484,  4489,  4497,  4505,  4513,  4525,
    4537,  4542,  4547,  4555,  4563,  4571,  4579,  4587,  4595,  4603,
    4616,  4629,  4642,  4644,  4648,  4653,  4666,  4667,  4721,  4720,
    4723,  4729,  4729,  4730,  4744,  4745,  4749,  4751,  4750,  4754,
    4753,  4759,  4796,  4797,  4802,  4801,  4820,  4839,  4838,  4855,
    4859,  4867,  4866,  4869,  4871,  4873,  4875,  4880,  4881,  4887,
    4888,  4905,  4906,  4910,  4911,  4915,  4934,  4944,  4955,  4964,
    4965,  4981,  4983,  4982,  4987,  4985,  4996,  4997,  5001,  5019,
    5035,  5036,  5052,  5067,  5089,  5090,  5095,  5094,  5118,  5130,
    5152,  5151,  5169,  5168,  5188,  5210,  5214,  5243,  5255,  5256,
    5261,  5272,  5260,  5297,  5298,  5302,  5315,  5336,  5349,  5375,
    5376,  5381,  5380,  5417,  5426,  5427,  5431,  5432,  5436,  5438,
    5444,  5450,  5452,  5454,  5456,  5458,  5460,  5470,  5485,  5469,
    5499,  5500,  5504,  5505,  5509,  5510,  5514,  5515,  5519,  5520,
    5524,  5525,  5529,  5534,  5538,  5546,  5550,  5556,  5558,  5562,
    5563,  5567,  5568,  5569,  5573,  5578,  5583,  5588,  5593,  5598,
    5603,  5608,  5623,  5629,  5644,  5649,  5664,  5670,  5688,  5693,
    5698,  5703,  5708,  5713,  5719,  5718,  5744,  5745,  5746,  5751,
    5756,  5761,  5763,  5765,  5767,  5773,  5778,  5783,  5789,  5795,
    5801,  5810,  5818,  5835,  5858,  5872,  5873,  5874,  5875,  5876,
    5877,  5878,  5882,  5883,  5884,  5888,  5889,  5893,  5894,  5895,
    5896,  5901,  5908,  5909,  5913,  5914,  5918,  5919,  5927,  5926,
    5935,  5933,  5943,  5941,  5951,  5949,  5957,  5978,  5984,  5986,
    5990,  5994,  5995,  5999,  6004,  6003,  6029,  6032,  6031,  6041,
    6043,  6048,  6051,  6055,  6062,  6063,  6067,  6068,  6072,  6078,
    6084,  6088,  6104,  6120,  6121,  6122,  6123,  6128,  6132,  6137,
    6142,  6146,  6151,  6156,  6162,  6167,  6173,  6177,  6182,  6187,
    6205,  6207,  6209,  6222,  6224,  6229,  6234,  6246,  6251,  6256,
    6261,  6263,  6265,  6267,  6269,  6271,  6273,  6275,  6278,  6277,
    6282,  6281,  6285,  6287,  6296,  6297,  6298,  6304,  6305,  6306,
    6307,  6308,  6312,  6316,  6317,  6321,  6322,  6326,  6327,  6328,
    6329,  6330,  6334,  6335,  6336,  6337,  6338,  6342,  6347,  6349,
    6355,  6356,  6358,  6363,  6372,  6373,  6377,  6378,  6382,  6383,
    6384,  6388,  6389,  6390,  6391,  6394,  6395,  6399,  6400,  6404,
    6405,  6409,  6410,  6414,  6415,  6416,  6417,  6424,  6425,  6431,
    6437,  6443,  6449,  6450,  6463,  6469,  6475,  6481,  6490,  6511,
    6517,  6522,  6523,  6527,  6535,  6539,  6540,  6544,  6545,  6549,
    6558,  6562,  6563,  6567,  6575,  6576,  6580,  6581,  6585,  6586,
    6591,  6592,  6596,  6603,  6612,  6617,  6625,  6626,  6627,  6628,
    6629,  6630,  6635,  6643,  6644,  6649,  6648,  6661,  6662,  6666,
    6669,  6670,  6671,  6672,  6676,  6684,  6691,  6692,  6696,  6706,
    6707,  6711,  6712,  6715,  6717,  6721,  6733,  6734,  6738,  6745,
    6758,  6759,  6761,  6763,  6769,  6774,  6780,  6786,  6793,  6803,
    6804,  6805,  6806,  6807,  6811,  6815,  6816,  6820,  6821,  6825,
    6826,  6830,  6831,  6832,  6836,  6837,  6841,  6845,  6858,  6870,
    6871,  6875,  6876,  6880,  6881,  6885,  6886,  6890,  6891,  6895,
    6896,  6900,  6901,  6905,  6906,  6910,  6912,  6913,  6919,  6925,
    6931,  6939,  6940,  6944,  6948,  6949,  6962,  6963,  6964,  6968,
    6969,  6973,  6979,  6993,  6994,  6998,  7010,  7011,  7015,  7016,
    7024,  7042,  7023,  7062,  7061,  7075,  7087,  7086,  7105,  7104,
    7123,  7122,  7141,  7135,  7155,  7154,  7187,  7192,  7197,  7202,
    7207,  7217,  7218,  7219,  7220,  7224,  7225,  7237,  7238,  7242,
    7243,  7246,  7248,  7256,  7264,  7266,  7268,  7269,  7277,  7278,
    7282,  7291,  7289,  7302,  7315,  7314,  7327,  7325,  7338,  7345,
    7355,  7356,  7383,  7390,  7394,  7399,  7398,  7414,  7416,  7421,
    7429,  7428,  7444,  7448,  7447,  7459,  7460,  7464,  7479,  7480,
    7484,  7493,  7497,  7502,  7508,  7507,  7519,  7530,  7518,  7546,
    7555,  7564,  7574,  7583,  7589,  7595,  7604,  7613,  7632,  7650,
    7660,  7664,  7669,  7670,  7673,  7675,  7676,  7677,  7678,  7681,
    7686,  7697,  7702,  7713,  7714,  7718,  7719,  7723,  7723,  7726,
    7728,  7732,  7733,  7737,  7738,  7746,  7747,  7748,  7752,  7753,
    7758,  7766,  7767,  7768,  7769,  7774,  7773,  7783,  7782,  7789,
    7796,  7806,  7823,  7826,  7833,  7837,  7844,  7848,  7852,  7859,
    7859,  7865,  7866,  7870,  7871,  7872,  7876,  7877,  7890,  7897,
    7898,  7903,  7902,  7914,  7915,  7916,  7920,  7921,  7921,  7926,
    7925,  7946,  7947,  7951,  7952,  7956,  7957,  7958,  7962,  7963,
    7968,  7967,  7988,  7989,  7993,  7998,  7999,  8006,  8008,  8012,
    8014,  8013,  8025,  8027,  8026,  8039,  8040,  8045,  8054,  8055,
    8056,  8060,  8066,  8075,  8083,  8084,  8084,  8088,  8087,  8113,
    8114,  8118,  8119,  8123,  8124,  8125,  8126,  8127,  8128,  8132,
    8133,  8138,  8137,  8158,  8159,  8160,  8165,  8164,  8170,  8177,
    8182,  8190,  8191,  8195,  8209,  8208,  8221,  8222,  8226,  8227,
    8231,  8241,  8251,  8252,  8257,  8256,  8267,  8268,  8272,  8273,
    8277,  8287,  8298,  8297,  8305,  8305,  8314,  8315,  8320,  8321,
    8330,  8339,  8340,  8344,  8349,  8354,  8359,  8364,  8363,  8383,
    8391,  8383,  8398,  8399,  8400,  8401,  8402,  8406,  8413,  8420,
    8422,  8433,  8434,  8438,  8439,  8467,  8497,  8499,  8506,  8517,
    8518,  8519,  8533,  8538,  8563,  8569,  8575,  8576,  8577,  8578,
    8579,  8583,  8584,  8585,  8589,  8590,  8591,  8595,  8596,  8601,
    8652,  8659,  8702,  8708,  8714,  8720,  8726,  8732,  8738,  8744,
    8748,  8754,  8760,  8766,  8772,  8778,  8782,  8788,  8797,  8803,
    8811,  8817,  8827,  8833,  8842,  8852,  8858,  8868,  8874,  8883,
    8887,  8893,  8899,  8905,  8911,  8917,  8923,  8929,  8935,  8941,
    8947,  8953,  8959,  8965,  8971,  8975,  8976,  8980,  8981,  8985,
    8986,  8990,  8991,  8995,  8996,  8997,  8998,  8999,  9000,  9004,
    9005,  9010,  9016,  9020,  9027,  9034,  9041,  9048,  9055,  9060,
    9066,  9073,  9080,  9088,  9099,  9121,  9128,  9136,  9137,  9138,
    9139,  9140,  9141,  9152,  9153,  9154,  9155,  9156,  9162,  9166,
    9172,  9178,  9184,  9190,  9192,  9199,  9206,  9212,  9236,  9245,
    9252,  9260,  9266,  9273,  9279,  9293,  9300,  9316,  9322,  9328,
    9336,  9344,  9350,  9356,  9362,  9368,  9382,  9393,  9399,  9405,
    9411,  9417,  9423,  9429,  9435,  9441,  9447,  9453,  9459,  9465,
    9471,  9477,  9483,  9489,  9497,  9518,  9525,  9531,  9538,  9545,
    9552,  9559,  9565,  9571,  9578,  9584,  9591,  9597,  9603,  9609,
    9615,  9621,  9639,  9645,  9651,  9658,  9665,  9673,  9680,  9687,
    9694,  9701,  9718,  9724,  9730,  9736,  9742,  9749,  9755,  9761,
    9767,  9773,  9779,  9790,  9796,  9802,  9808,  9814,  9822,  9828,
    9839,  9845,  9851,  9859,  9869,  9875,  9891,  9897,  9904,  9911,
    9918,  9925,  9932,  9936,  9956,  9955, 10027, 10068, 10070, 10075,
   10076, 10080, 10081, 10085, 10086, 10090, 10097, 10105, 10132, 10138,
   10144, 10150, 10156, 10162, 10171, 10178, 10180, 10177, 10187, 10198,
   10204, 10210, 10216, 10222, 10228, 10234, 10240, 10246, 10253, 10252,
   10272, 10271, 10286, 10296, 10304, 10320, 10321, 10326, 10331, 10334,
   10337, 10336, 10353, 10355, 10361, 10360, 10377, 10379, 10381, 10383,
   10385, 10387, 10389, 10391, 10393, 10395, 10401, 10407, 10410, 10409,
   10415, 10416, 10420, 10427, 10435, 10436, 10440, 10447, 10455, 10456,
   10460, 10461, 10465, 10473, 10484, 10485, 10497, 10508, 10509, 10515,
   10516, 10536, 10540, 10538, 10556, 10554, 10565, 10575, 10573, 10591,
   10590, 10600, 10611, 10609, 10628, 10627, 10638, 10650, 10651, 10652,
   10656, 10657, 10665, 10666, 10670, 10685, 10685, 10700, 10740, 10825,
   10836, 10841, 10833, 10860, 10880, 10888, 10880, 10897, 10896, 10919,
   10936, 10919, 10943, 10947, 10973, 10974, 10979, 10982, 10983, 10984,
   10988, 10989, 10994, 10993, 10999, 10998, 11006, 11007, 11010, 11012,
   11012, 11016, 11016, 11021, 11022, 11026, 11028, 11033, 11034, 11038,
   11049, 11062, 11063, 11064, 11065, 11066, 11067, 11068, 11069, 11070,
   11071, 11072, 11073, 11077, 11078, 11079, 11080, 11081, 11082, 11083,
   11084, 11085, 11089, 11090, 11091, 11092, 11095, 11097, 11098, 11102,
   11103, 11111, 11113, 11117, 11119, 11118, 11132, 11135, 11134, 11149,
   11155, 11169, 11171, 11175, 11177, 11182, 11183, 11203, 11228, 11232,
   11233, 11237, 11249, 11251, 11256, 11255, 11290, 11292, 11297, 11298,
   11299, 11304, 11311, 11315, 11316, 11320, 11327, 11331, 11338, 11345,
   11352, 11362, 11395, 11399, 11405, 11411, 11420, 11428, 11432, 11439,
   11440, 11444, 11445, 11446, 11450, 11451, 11452, 11453, 11454, 11455,
   11459, 11460, 11461, 11462, 11463, 11467, 11468, 11469, 11470, 11471,
   11475, 11476, 11477, 11478, 11479, 11483, 11488, 11489, 11493, 11494,
   11497, 11500, 11499, 11542, 11543, 11547, 11548, 11552, 11562, 11562,
   11572, 11573, 11577, 11596, 11629, 11628, 11641, 11649, 11640, 11651,
   11663, 11675, 11674, 11692, 11691, 11702, 11702, 11718, 11725, 11747,
   11767, 11779, 11783, 11788, 11787, 11797, 11803, 11810, 11815, 11820,
   11830, 11831, 11835, 11846, 11859, 11860, 11864, 11876, 11880, 11888,
   11889, 11897, 11905, 11896, 11915, 11922, 11914, 11932, 11940, 11941,
   11949, 11953, 11954, 11965, 11966, 11970, 11979, 11980, 11981, 11983,
   11982, 11993, 11994, 11998, 11999, 12001, 12000, 12004, 12003, 12009,
   12010, 12014, 12015, 12019, 12029, 12030, 12034, 12035, 12040, 12039,
   12053, 12054, 12058, 12063, 12071, 12072, 12080, 12082, 12082, 12090,
   12098, 12089, 12120, 12121, 12125, 12133, 12134, 12138, 12148, 12149,
   12156, 12155, 12171, 12182, 12170, 12185, 12184, 12196, 12195, 12208,
   12210, 12214, 12215, 12219, 12232, 12248, 12249, 12253, 12254, 12258,
   12259, 12260, 12265, 12264, 12285, 12287, 12290, 12292, 12295, 12296,
   12299, 12303, 12307, 12311, 12315, 12319, 12323, 12327, 12331, 12339,
   12342, 12352, 12351, 12367, 12374, 12382, 12390, 12398, 12406, 12414,
   12421, 12428, 12434, 12436, 12438, 12447, 12451, 12456, 12455, 12461,
   12460, 12465, 12474, 12481, 12486, 12491, 12496, 12498, 12500, 12502,
   12504, 12506, 12513, 12521, 12523, 12531, 12538, 12545, 12552, 12558,
   12564, 12572, 12580, 12584, 12589, 12596, 12601, 12608, 12615, 12622,
   12629, 12636, 12643, 12649, 12656, 12663, 12668, 12673, 12678, 12688,
   12690, 12692, 12697, 12698, 12701, 12703, 12707, 12708, 12712, 12713,
   12717, 12718, 12722, 12723, 12727, 12728, 12731, 12733, 12740, 12751,
   12750, 12766, 12765, 12775, 12776, 12777, 12778, 12779, 12783, 12784,
   12788, 12789, 12790, 12794, 12795, 12796, 12811, 12810, 12823, 12822,
   12833, 12837, 12838, 12851, 12854, 12853, 12865, 12866, 12871, 12873,
   12875, 12877, 12879, 12881, 12892, 12894, 12896, 12898, 12904, 12906,
   12917, 12919, 12921, 12923, 12925, 12927, 12929, 12934, 12935, 12939,
   12940, 12944, 12943, 12953, 12954, 12958, 12958, 12961, 12962, 12966,
   12967, 12972, 12971, 12982, 12986, 12990, 13003, 13002, 13017, 13018,
   13019, 13022, 13023, 13024, 13025, 13033, 13037, 13046, 13052, 13064,
   13075, 13085, 13095, 13063, 13103, 13104, 13108, 13109, 13113, 13114,
   13122, 13126, 13127, 13128, 13131, 13133, 13137, 13138, 13142, 13147,
   13154, 13159, 13166, 13168, 13172, 13173, 13177, 13182, 13190, 13191,
   13194, 13196, 13204, 13206, 13210, 13211, 13212, 13216, 13218, 13223,
   13224, 13233, 13234, 13238, 13239, 13243, 13256, 13279, 13291, 13298,
   13317, 13325, 13330, 13342, 13350, 13365, 13385, 13386, 13387, 13395,
   13396, 13397, 13398, 13412, 13418, 13424, 13430, 13436, 13442, 13459,
   13469, 13479, 13485, 13494, 13506, 13512, 13518, 13534, 13535, 13539,
   13548, 13563, 13567, 13613, 13617, 13634, 13638, 13716, 13740, 13770,
   13771, 13787, 13797, 13801, 13807, 13813, 13823, 13829, 13838, 13848,
   13849, 13877, 13891, 13905, 13920, 13921, 13931, 13932, 13942, 13943,
   13944, 13948, 13963, 13995, 14005, 14005, 14007, 14017, 14018, 14019,
   14020, 14021, 14022, 14023, 14024, 14025, 14026, 14027, 14028, 14029,
   14030, 14031, 14032, 14033, 14034, 14035, 14036, 14037, 14038, 14039,
   14040, 14041, 14042, 14043, 14044, 14045, 14046, 14047, 14048, 14049,
   14050, 14051, 14052, 14053, 14054, 14055, 14056, 14057, 14058, 14059,
   14060, 14061, 14062, 14063, 14064, 14065, 14066, 14067, 14068, 14069,
   14070, 14071, 14072, 14073, 14074, 14075, 14076, 14086, 14087, 14088,
   14089, 14090, 14091, 14092, 14093, 14094, 14095, 14096, 14097, 14098,
   14099, 14100, 14101, 14102, 14103, 14104, 14105, 14106, 14107, 14108,
   14109, 14110, 14111, 14112, 14113, 14114, 14115, 14116, 14117, 14118,
   14119, 14120, 14121, 14122, 14123, 14124, 14125, 14126, 14127, 14128,
   14129, 14130, 14131, 14132, 14133, 14134, 14135, 14140, 14141, 14142,
   14143, 14144, 14145, 14146, 14147, 14148, 14149, 14150, 14151, 14152,
   14153, 14154, 14155, 14156, 14157, 14158, 14159, 14160, 14161, 14162,
   14163, 14164, 14165, 14166, 14167, 14168, 14169, 14170, 14171, 14172,
   14173, 14174, 14175, 14176, 14177, 14178, 14179, 14180, 14181, 14182,
   14183, 14184, 14185, 14186, 14187, 14188, 14189, 14190, 14191, 14192,
   14193, 14194, 14195, 14196, 14197, 14198, 14199, 14200, 14201, 14202,
   14203, 14204, 14205, 14206, 14207, 14208, 14209, 14210, 14211, 14212,
   14213, 14214, 14215, 14216, 14217, 14218, 14219, 14220, 14221, 14222,
   14223, 14224, 14225, 14226, 14227, 14228, 14229, 14230, 14231, 14232,
   14233, 14234, 14235, 14236, 14237, 14238, 14239, 14240, 14241, 14242,
   14243, 14244, 14245, 14246, 14247, 14248, 14249, 14250, 14251, 14252,
   14253, 14254, 14255, 14256, 14257, 14258, 14259, 14260, 14261, 14262,
   14263, 14264, 14265, 14266, 14267, 14268, 14269, 14270, 14271, 14272,
   14273, 14274, 14275, 14276, 14277, 14278, 14279, 14280, 14281, 14282,
   14283, 14284, 14285, 14286, 14287, 14288, 14289, 14290, 14291, 14292,
   14293, 14294, 14295, 14296, 14297, 14298, 14299, 14300, 14301, 14302,
   14303, 14304, 14305, 14306, 14307, 14308, 14309, 14310, 14311, 14312,
   14313, 14314, 14315, 14316, 14317, 14318, 14319, 14320, 14321, 14322,
   14323, 14324, 14325, 14326, 14327, 14328, 14329, 14330, 14331, 14332,
   14333, 14334, 14335, 14336, 14337, 14338, 14339, 14340, 14341, 14342,
   14343, 14344, 14345, 14346, 14347, 14348, 14349, 14350, 14351, 14352,
   14353, 14354, 14355, 14356, 14357, 14358, 14359, 14360, 14361, 14362,
   14363, 14364, 14365, 14366, 14367, 14368, 14369, 14370, 14371, 14372,
   14373, 14374, 14375, 14376, 14377, 14378, 14379, 14380, 14381, 14382,
   14383, 14384, 14385, 14386, 14387, 14388, 14389, 14390, 14391, 14392,
   14393, 14394, 14395, 14396, 14397, 14398, 14399, 14400, 14412, 14411,
   14429, 14428, 14435, 14434, 14444, 14443, 14454, 14453, 14459, 14467,
   14469, 14474, 14474, 14483, 14482, 14496, 14495, 14500, 14504, 14505,
   14506, 14510, 14511, 14512, 14513, 14517, 14518, 14519, 14520, 14525,
   14549, 14575, 14586, 14598, 14611, 14626, 14645, 14651, 14676, 14689,
   14715, 14758, 14772, 14773, 14774, 14775, 14779, 14796, 14813, 14814,
   14818, 14819, 14820, 14821, 14825, 14826, 14835, 14846, 14847, 14848,
   14854, 14860, 14872, 14871, 14887, 14888, 14892, 14893, 14897, 14912,
   14913, 14914, 14919, 14920, 14925, 14924, 14944, 14956, 14969, 14968,
   15002, 15003, 15007, 15008, 15012, 15013, 15014, 15015, 15017, 15016,
   15029, 15030, 15031, 15032, 15033, 15039, 15044, 15050, 15061, 15072,
   15076, 15083, 15092, 15094, 15099, 15104, 15111, 15123, 15135, 15142,
   15154, 15155, 15158, 15159, 15162, 15167, 15175, 15186, 15209, 15212,
   15214, 15218, 15219, 15226, 15228, 15232, 15233, 15238, 15237, 15241,
   15240, 15244, 15243, 15247, 15246, 15249, 15250, 15251, 15252, 15253,
   15254, 15255, 15256, 15257, 15258, 15259, 15260, 15261, 15262, 15263,
   15264, 15265, 15266, 15267, 15268, 15269, 15270, 15271, 15272, 15273,
   15274, 15278, 15279, 15283, 15284, 15288, 15298, 15308, 15321, 15336,
   15349, 15362, 15374, 15379, 15387, 15392, 15400, 15405, 15412, 15412,
   15413, 15413, 15416, 15445, 15450, 15456, 15462, 15468, 15472, 15476,
   15477, 15481, 15508, 15510, 15514, 15518, 15522, 15529, 15530, 15534,
   15535, 15539, 15540, 15544, 15545, 15551, 15557, 15563, 15573, 15572,
   15582, 15583, 15588, 15589, 15590, 15595, 15596, 15597, 15601, 15602,
   15606, 15618, 15627, 15637, 15646, 15660, 15661, 15666, 15665, 15681,
   15682, 15683, 15687, 15688, 15692, 15692, 15714, 15715, 15719, 15720,
   15721, 15725, 15729, 15736, 15739, 15737, 15753, 15760, 15781, 15805,
   15807, 15811, 15812, 15816, 15817, 15825, 15826, 15827, 15828, 15834,
   15840, 15850, 15852, 15854, 15859, 15860, 15861, 15862, 15863, 15867,
   15868, 15869, 15870, 15871, 15872, 15882, 15883, 15888, 15901, 15914,
   15916, 15918, 15924, 15925, 15927, 15933, 15932, 15949, 15950, 15954,
   15959, 15967, 15967, 15991, 15992, 15997, 15998, 16000, 16002, 16020,
   16026, 16031, 16013, 16092, 16109, 16133, 16164, 16168, 16177, 16200,
   16129, 16263, 16287, 16296, 16303, 16262, 16323, 16327, 16331, 16335,
   16339, 16343, 16350, 16357, 16364, 16374, 16375, 16379, 16380, 16381,
   16385, 16386, 16391, 16393, 16392, 16398, 16399, 16403, 16410, 16420,
   16426, 16437
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "ABORT_SYM", "ACCESSIBLE_SYM", "ACTION",
  "ADD", "ADMIN_SYM", "ADDDATE_SYM", "AFTER_SYM", "AGAINST",
  "AGGREGATE_SYM", "ALGORITHM_SYM", "ALL", "ALTER", "ALWAYS_SYM",
  "ANALYZE_SYM", "AND_AND_SYM", "AND_SYM", "ANY_SYM", "AS", "ASC",
  "ASCII_SYM", "ASENSITIVE_SYM", "AT_SYM", "AUTHORS_SYM",
  "AUTOEXTEND_SIZE_SYM", "AUTO_INC", "AUTO_SYM", "AVG_ROW_LENGTH",
  "AVG_SYM", "BACKUP_SYM", "BEFORE_SYM", "BEGIN_SYM", "BETWEEN_SYM",
  "BIGINT", "BINARY", "BINLOG_SYM", "BIN_NUM", "BIT_AND", "BIT_OR",
  "BIT_SYM", "BIT_XOR", "BLOB_SYM", "BLOCK_SYM", "BOOLEAN_SYM", "BOOL_SYM",
  "BOTH", "BTREE_SYM", "BY", "BYTE_SYM", "CACHE_SYM", "CALL_SYM",
  "CASCADE", "CASCADED", "CASE_SYM", "CAST_SYM", "CATALOG_NAME_SYM",
  "CHAIN_SYM", "CHANGE", "CHANGED", "CHARSET", "CHAR_SYM",
  "CHECKPOINT_SYM", "CHECKSUM_SYM", "CHECK_SYM", "CIPHER_SYM",
  "CLASS_ORIGIN_SYM", "CLIENT_SYM", "CLIENT_STATS_SYM", "CLOSE_SYM",
  "COALESCE", "CODE_SYM", "COLLATE_SYM", "COLLATION_SYM", "COLUMNS",
  "COLUMN_ADD_SYM", "COLUMN_CHECK_SYM", "COLUMN_CREATE_SYM",
  "COLUMN_DELETE_SYM", "COLUMN_GET_SYM", "COLUMN_SYM", "COLUMN_NAME_SYM",
  "COMMENT_SYM", "COMMITTED_SYM", "COMMIT_SYM", "COMPACT_SYM",
  "COMPLETION_SYM", "COMPRESSED_SYM", "CONCURRENT", "CONDITION_SYM",
  "CONNECTION_SYM", "CONSISTENT_SYM", "CONSTRAINT",
  "CONSTRAINT_CATALOG_SYM", "CONSTRAINT_NAME_SYM", "CONSTRAINT_SCHEMA_SYM",
  "CONTAINS_SYM", "CONTEXT_SYM", "CONTINUE_SYM", "CONTRIBUTORS_SYM",
  "CONVERT_SYM", "COUNT_SYM", "CPU_SYM", "CREATE", "CROSS", "CUBE_SYM",
  "CURDATE", "CURRENT_SYM", "CURRENT_USER", "CURRENT_ROLE",
  "CURRENT_POS_SYM", "CURSOR_SYM", "CURSOR_NAME_SYM", "CURTIME",
  "DATABASE", "DATABASES", "DATAFILE_SYM", "DATA_SYM", "DATETIME",
  "DATE_ADD_INTERVAL", "DATE_SUB_INTERVAL", "DATE_SYM", "DAY_HOUR_SYM",
  "DAY_MICROSECOND_SYM", "DAY_MINUTE_SYM", "DAY_SECOND_SYM", "DAY_SYM",
  "DEALLOCATE_SYM", "DECIMAL_NUM", "DECIMAL_SYM", "DECLARE_SYM", "DEFAULT",
  "DEFINER_SYM", "DELAYED_SYM", "DELAY_KEY_WRITE_SYM", "DELETE_SYM",
  "DESC", "DESCRIBE", "DES_KEY_FILE", "DETERMINISTIC_SYM",
  "DIAGNOSTICS_SYM", "DIRECTORY_SYM", "DISABLE_SYM", "DISCARD", "DISK_SYM",
  "DISTINCT", "DIV_SYM", "DOUBLE_SYM", "DO_SYM", "DROP", "DUAL_SYM",
  "DUMPFILE", "DUPLICATE_SYM", "DYNAMIC_SYM", "EACH_SYM", "ELSE",
  "ELSEIF_SYM", "ENABLE_SYM", "ENCLOSED", "END", "ENDS_SYM",
  "END_OF_INPUT", "ENGINES_SYM", "ENGINE_SYM", "ENUM", "EQUAL_SYM",
  "ERROR_SYM", "ERRORS", "ESCAPED", "ESCAPE_SYM", "EVENTS_SYM",
  "EVENT_SYM", "EVERY_SYM", "EXCHANGE_SYM", "EXAMINED_SYM", "EXECUTE_SYM",
  "EXISTS", "EXIT_SYM", "EXPANSION_SYM", "EXPORT_SYM", "EXTENDED_SYM",
  "EXTENT_SIZE_SYM", "EXTRACT_SYM", "FALSE_SYM", "FAST_SYM", "FAULTS_SYM",
  "FETCH_SYM", "FILE_SYM", "FIRST_SYM", "FIXED_SYM", "FLOAT_NUM",
  "FLOAT_SYM", "FLUSH_SYM", "FORCE_SYM", "FOREIGN", "FOR_SYM", "FOUND_SYM",
  "FROM", "FULL", "FULLTEXT_SYM", "FUNCTION_SYM", "GE", "GENERAL",
  "GENERATED_SYM", "GEOMETRYCOLLECTION", "GEOMETRY_SYM", "GET_FORMAT",
  "GET_SYM", "GLOBAL_SYM", "GRANT", "GRANTS", "GROUP_SYM",
  "GROUP_CONCAT_SYM", "HANDLER_SYM", "HARD_SYM", "HASH_SYM", "HAVING",
  "HELP_SYM", "HEX_NUM", "HEX_STRING", "HIGH_PRIORITY", "HOST_SYM",
  "HOSTS_SYM", "HOUR_MICROSECOND_SYM", "HOUR_MINUTE_SYM",
  "HOUR_SECOND_SYM", "HOUR_SYM", "ID_SYM", "IDENT", "IDENTIFIED_SYM",
  "IDENT_QUOTED", "IF", "IGNORE_SYM", "IGNORE_SERVER_IDS_SYM", "IMPORT",
  "INDEXES", "INDEX_SYM", "INDEX_STATS_SYM", "INFILE", "INITIAL_SIZE_SYM",
  "INNER_SYM", "INOUT_SYM", "INSENSITIVE_SYM", "INSERT", "INSERT_METHOD",
  "INSTALL_SYM", "INTERVAL_SYM", "INTO", "INT_SYM", "INVOKER_SYM",
  "IN_SYM", "IO_SYM", "IPC_SYM", "IS", "ISOLATION", "ISSUER_SYM",
  "ITERATE_SYM", "JOIN_SYM", "KEYS", "KEY_BLOCK_SIZE", "KEY_SYM",
  "KILL_SYM", "LANGUAGE_SYM", "LAST_SYM", "LAST_VALUE", "LE", "LEADING",
  "LEAVES", "LEAVE_SYM", "LEFT", "LESS_SYM", "LEVEL_SYM", "LEX_HOSTNAME",
  "LIKE", "LIMIT", "LINEAR_SYM", "LINES", "LINESTRING", "LIST_SYM", "LOAD",
  "LOCAL_SYM", "LOCATOR_SYM", "LOCKS_SYM", "LOCK_SYM", "LOGFILE_SYM",
  "LOGS_SYM", "LONGBLOB", "LONGTEXT", "LONG_NUM", "LONG_SYM", "LOOP_SYM",
  "LOW_PRIORITY", "MASTER_CONNECT_RETRY_SYM", "MASTER_GTID_POS_SYM",
  "MASTER_HOST_SYM", "MASTER_LOG_FILE_SYM", "MASTER_LOG_POS_SYM",
  "MASTER_PASSWORD_SYM", "MASTER_PORT_SYM", "MASTER_SERVER_ID_SYM",
  "MASTER_SSL_CAPATH_SYM", "MASTER_SSL_CA_SYM", "MASTER_SSL_CERT_SYM",
  "MASTER_SSL_CIPHER_SYM", "MASTER_SSL_CRL_SYM", "MASTER_SSL_CRLPATH_SYM",
  "MASTER_SSL_KEY_SYM", "MASTER_SSL_SYM",
  "MASTER_SSL_VERIFY_SERVER_CERT_SYM", "MASTER_SYM", "MASTER_USER_SYM",
  "MASTER_USE_GTID_SYM", "MASTER_HEARTBEAT_PERIOD_SYM", "MATCH",
  "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS",
  "MAX_SIZE_SYM", "MAX_SYM", "MAX_UPDATES_PER_HOUR",
  "MAX_USER_CONNECTIONS_SYM", "MAX_VALUE_SYM", "MEDIUMBLOB", "MEDIUMINT",
  "MEDIUMTEXT", "MEDIUM_SYM", "MEMORY_SYM", "MERGE_SYM",
  "MESSAGE_TEXT_SYM", "MICROSECOND_SYM", "MIGRATE_SYM",
  "MINUTE_MICROSECOND_SYM", "MINUTE_SECOND_SYM", "MINUTE_SYM", "MIN_ROWS",
  "MIN_SYM", "MODE_SYM", "MODIFIES_SYM", "MODIFY_SYM", "MOD_SYM",
  "MONTH_SYM", "MULTILINESTRING", "MULTIPOINT", "MULTIPOLYGON",
  "MUTEX_SYM", "MYSQL_SYM", "MYSQL_ERRNO_SYM", "NAMES_SYM", "NAME_SYM",
  "NATIONAL_SYM", "NATURAL", "NCHAR_STRING", "NCHAR_SYM", "NDBCLUSTER_SYM",
  "NE", "NEG", "NEW_SYM", "NEXT_SYM", "NODEGROUP_SYM", "NONE_SYM",
  "NOT2_SYM", "NOT_SYM", "NOW_SYM", "NO_SYM", "NO_WAIT_SYM",
  "NO_WRITE_TO_BINLOG", "NULL_SYM", "NUM", "NUMBER_SYM", "NUMERIC_SYM",
  "NVARCHAR_SYM", "OFFSET_SYM", "OLD_PASSWORD", "ON", "ONE_SYM",
  "ONLY_SYM", "ONLINE_SYM", "OPEN_SYM", "OPTIMIZE", "OPTIONS_SYM",
  "OPTION", "OPTIONALLY", "OR2_SYM", "ORDER_SYM", "OR_OR_SYM", "OR_SYM",
  "OUTER", "OUTFILE", "OUT_SYM", "OWNER_SYM", "PACK_KEYS_SYM", "PAGE_SYM",
  "PAGE_CHECKSUM_SYM", "PARAM_MARKER", "PARSER_SYM", "PARSE_VCOL_EXPR_SYM",
  "PARTIAL", "PARTITION_SYM", "PARTITIONS_SYM", "PARTITIONING_SYM",
  "PASSWORD", "PERSISTENT_SYM", "PHASE_SYM", "PLUGINS_SYM", "PLUGIN_SYM",
  "POINT_SYM", "POLYGON", "PORT_SYM", "POSITION_SYM", "PRECISION",
  "PREPARE_SYM", "PRESERVE_SYM", "PREV_SYM", "PRIMARY_SYM", "PRIVILEGES",
  "PROCEDURE_SYM", "PROCESS", "PROCESSLIST_SYM", "PROFILE_SYM",
  "PROFILES_SYM", "PROXY_SYM", "PURGE", "QUARTER_SYM", "QUERY_SYM",
  "QUICK", "RANGE_SYM", "READS_SYM", "READ_ONLY_SYM", "READ_SYM",
  "READ_WRITE_SYM", "REAL", "REBUILD_SYM", "RECOVER_SYM", "REDOFILE_SYM",
  "REDO_BUFFER_SIZE_SYM", "REDUNDANT_SYM", "REFERENCES", "REGEXP", "RELAY",
  "RELAYLOG_SYM", "RELAY_LOG_FILE_SYM", "RELAY_LOG_POS_SYM",
  "RELAY_THREAD", "RELEASE_SYM", "RELOAD", "REMOVE_SYM", "RENAME",
  "REORGANIZE_SYM", "REPAIR", "REPEATABLE_SYM", "REPEAT_SYM", "REPLACE",
  "REPLICATION", "REQUIRE_SYM", "RESET_SYM", "RESIGNAL_SYM", "RESOURCES",
  "RESTORE_SYM", "RESTRICT", "RESUME_SYM", "RETURNED_SQLSTATE_SYM",
  "RETURNING_SYM", "RETURNS_SYM", "RETURN_SYM", "REVERSE_SYM", "REVOKE",
  "RIGHT", "ROLE_SYM", "ROLLBACK_SYM", "ROLLUP_SYM", "ROUTINE_SYM",
  "ROWS_SYM", "ROW_FORMAT_SYM", "ROW_SYM", "ROW_COUNT_SYM", "RTREE_SYM",
  "SAVEPOINT_SYM", "SCHEDULE_SYM", "SCHEMA_NAME_SYM",
  "SECOND_MICROSECOND_SYM", "SECOND_SYM", "SECURITY_SYM", "SELECT_SYM",
  "SENSITIVE_SYM", "SEPARATOR_SYM", "SERIALIZABLE_SYM", "SERIAL_SYM",
  "SESSION_SYM", "SERVER_SYM", "SERVER_OPTIONS", "SET", "SET_VAR",
  "SHARE_SYM", "SHIFT_LEFT", "SHIFT_RIGHT", "SHOW", "SHUTDOWN",
  "SIGNAL_SYM", "SIGNED_SYM", "SIMPLE_SYM", "SLAVE", "SLAVES",
  "SLAVE_POS_SYM", "SLOW", "SMALLINT", "SNAPSHOT_SYM", "SOCKET_SYM",
  "SOFT_SYM", "SONAME_SYM", "SOUNDS_SYM", "SOURCE_SYM", "SPATIAL_SYM",
  "SPECIFIC_SYM", "SQLEXCEPTION_SYM", "SQLSTATE_SYM", "SQLWARNING_SYM",
  "SQL_BIG_RESULT", "SQL_BUFFER_RESULT", "SQL_CACHE_SYM",
  "SQL_CALC_FOUND_ROWS", "SQL_NO_CACHE_SYM", "SQL_SMALL_RESULT", "SQL_SYM",
  "SQL_THREAD", "SSL_SYM", "STARTING", "STARTS_SYM", "START_SYM",
  "STATS_AUTO_RECALC_SYM", "STATS_PERSISTENT_SYM",
  "STATS_SAMPLE_PAGES_SYM", "STATUS_SYM", "STDDEV_SAMP_SYM", "STD_SYM",
  "STOP_SYM", "STORAGE_SYM", "STRAIGHT_JOIN", "STRING_SYM",
  "SUBCLASS_ORIGIN_SYM", "SUBDATE_SYM", "SUBJECT_SYM", "SUBPARTITIONS_SYM",
  "SUBPARTITION_SYM", "SUBSTRING", "SUM_SYM", "SUPER_SYM", "SUSPEND_SYM",
  "SWAPS_SYM", "SWITCHES_SYM", "SYSDATE", "TABLES", "TABLESPACE",
  "TABLE_REF_PRIORITY", "TABLE_STATS_SYM", "TABLE_SYM",
  "TABLE_CHECKSUM_SYM", "TABLE_NAME_SYM", "TEMPORARY", "TEMPTABLE_SYM",
  "TERMINATED", "TEXT_STRING", "TEXT_SYM", "THAN_SYM", "THEN_SYM",
  "TIMESTAMP", "TIMESTAMP_ADD", "TIMESTAMP_DIFF", "TIME_SYM", "TINYBLOB",
  "TINYINT", "TINYTEXT", "TO_SYM", "TRAILING", "TRANSACTION_SYM",
  "TRANSACTIONAL_SYM", "TRIGGERS_SYM", "TRIGGER_SYM", "TRIM", "TRUE_SYM",
  "TRUNCATE_SYM", "TYPES_SYM", "TYPE_SYM", "UDF_RETURNS_SYM",
  "ULONGLONG_NUM", "UNCOMMITTED_SYM", "UNDEFINED_SYM",
  "UNDERSCORE_CHARSET", "UNDOFILE_SYM", "UNDO_BUFFER_SIZE_SYM", "UNDO_SYM",
  "UNICODE_SYM", "UNINSTALL_SYM", "UNION_SYM", "UNIQUE_SYM", "UNKNOWN_SYM",
  "UNLOCK_SYM", "UNSIGNED", "UNTIL_SYM", "UPDATE_SYM", "UPGRADE_SYM",
  "USAGE", "USER", "USER_STATS_SYM", "USE_FRM", "USE_SYM", "USING",
  "UTC_DATE_SYM", "UTC_TIMESTAMP_SYM", "UTC_TIME_SYM", "VALUES",
  "VALUE_SYM", "VARBINARY", "VARCHAR", "VARIABLES", "VARIANCE_SYM",
  "VARYING", "VAR_SAMP_SYM", "VIA_SYM", "VIEW_SYM", "VIRTUAL_SYM",
  "WAIT_SYM", "WARNINGS", "WEEK_SYM", "WEIGHT_STRING_SYM", "WHEN_SYM",
  "WHERE", "WHILE_SYM", "WITH", "WITH_CUBE_SYM", "WITH_ROLLUP_SYM",
  "WORK_SYM", "WRAPPER_SYM", "WRITE_SYM", "X509_SYM", "XA_SYM", "XML_SYM",
  "XOR", "YEAR_MONTH_SYM", "YEAR_SYM", "ZEROFILL", "IMPOSSIBLE_ACTION",
  "'='", "'>'", "'<'", "'|'", "'&'", "'-'", "'+'", "'*'", "'/'", "'%'",
  "'^'", "'~'", "'('", "')'", "','", "'!'", "'{'", "'}'", "';'", "'@'",
  "'.'", "':'", "$accept", "query", "$@1", "opt_end_of_input",
  "verb_clause", "statement", "deallocate", "deallocate_or_drop",
  "prepare", "prepare_src", "execute", "$@2", "execute_using",
  "execute_var_list", "execute_var_ident", "help", "$@3", "change", "$@4",
  "master_defs", "master_def", "ignore_server_id_list", "ignore_server_id",
  "master_file_def", "optional_connection_name", "connection_name",
  "create", "$@5", "$@6", "$@7", "$@8", "$@9", "$@10", "$@11", "$@12",
  "$@13", "server_def", "server_options_list", "server_option",
  "event_tail", "$@14", "ev_schedule_time", "$@15", "opt_ev_status",
  "ev_starts", "ev_ends", "opt_ev_on_completion", "ev_on_completion",
  "opt_ev_comment", "ev_sql_stmt", "$@16", "ev_sql_stmt_inner",
  "clear_privileges", "sp_name", "sp_a_chistics", "sp_c_chistics",
  "sp_chistic", "sp_c_chistic", "sp_suid", "call", "$@17",
  "opt_sp_cparam_list", "opt_sp_cparams", "sp_cparams", "sp_fdparam_list",
  "sp_fdparams", "sp_init_param", "sp_fdparam", "sp_pdparam_list",
  "sp_pdparams", "sp_pdparam", "sp_opt_inout", "sp_proc_stmts",
  "sp_proc_stmts1", "sp_decls", "sp_decl", "$@18", "$@19",
  "sp_cursor_stmt", "$@20", "sp_handler_type", "sp_hcond_list",
  "sp_hcond_element", "sp_cond", "sqlstate", "opt_value", "sp_hcond",
  "signal_stmt", "signal_value", "opt_signal_value",
  "opt_set_signal_information", "signal_information_item_list",
  "signal_allowed_expr", "signal_condition_information_item_name",
  "resignal_stmt", "get_diagnostics", "which_area",
  "diagnostics_information", "statement_information",
  "statement_information_item", "simple_target_specification",
  "statement_information_item_name", "condition_number",
  "condition_information", "condition_information_item",
  "condition_information_item_name", "sp_decl_idents", "sp_opt_default",
  "sp_proc_stmt", "sp_proc_stmt_if", "$@21", "sp_proc_stmt_statement",
  "$@22", "sp_proc_stmt_return", "$@23", "sp_proc_stmt_unlabeled", "$@24",
  "sp_proc_stmt_leave", "sp_proc_stmt_iterate", "sp_proc_stmt_open",
  "sp_proc_stmt_fetch", "$@25", "sp_proc_stmt_close", "sp_opt_fetch_noise",
  "sp_fetch_list", "sp_if", "$@26", "$@27", "$@28", "sp_elseifs",
  "case_stmt_specification", "simple_case_stmt", "$@29", "$@30",
  "searched_case_stmt", "$@31", "simple_when_clause_list",
  "searched_when_clause_list", "simple_when_clause", "$@32", "$@33",
  "searched_when_clause", "$@34", "$@35", "else_clause_opt",
  "sp_labeled_control", "$@36", "sp_opt_label", "sp_labeled_block", "$@37",
  "sp_unlabeled_block", "$@38", "sp_block_content", "$@39",
  "sp_unlabeled_control", "$@40", "$@41", "$@42", "trg_action_time",
  "trg_event", "change_tablespace_access", "change_tablespace_info",
  "tablespace_info", "opt_logfile_group_name", "alter_tablespace_info",
  "logfile_group_info", "alter_logfile_group_info", "add_log_file",
  "change_ts_option_list", "$@43", "change_ts_options", "change_ts_option",
  "tablespace_option_list", "tablespace_options", "tablespace_option",
  "alter_tablespace_option_list", "alter_tablespace_options",
  "alter_tablespace_option", "logfile_group_option_list",
  "logfile_group_options", "logfile_group_option",
  "alter_logfile_group_option_list", "alter_logfile_group_options",
  "alter_logfile_group_option", "ts_datafile", "lg_undofile",
  "lg_redofile", "tablespace_name", "logfile_group_name", "ts_access_mode",
  "opt_ts_initial_size", "opt_ts_autoextend_size", "opt_ts_max_size",
  "opt_ts_extent_size", "opt_ts_undo_buffer_size",
  "opt_ts_redo_buffer_size", "opt_ts_nodegroup", "opt_ts_comment",
  "opt_ts_engine", "opt_ts_wait", "ts_wait", "size_number", "create_body",
  "$@44", "$@45", "create_like", "opt_create_select", "$@46", "$@47",
  "opt_create_partitioning", "opt_partitioning", "partitioning", "$@48",
  "have_partitioning", "partition_entry", "$@49", "partition",
  "part_type_def", "$@50", "opt_linear", "opt_key_algo", "part_field_list",
  "part_field_item_list", "part_field_item", "part_column_list",
  "part_func", "sub_part_func", "opt_num_parts", "opt_sub_part", "$@51",
  "$@52", "sub_part_field_list", "sub_part_field_item", "part_func_expr",
  "opt_num_subparts", "part_defs", "part_def_list", "part_definition",
  "$@53", "part_name", "opt_part_values", "$@54", "$@55", "part_func_max",
  "part_values_in", "part_value_list", "part_value_item", "$@56", "$@57",
  "part_value_item_list", "part_value_expr_item", "opt_sub_partition",
  "sub_part_list", "sub_part_definition", "$@58", "sub_name",
  "opt_part_options", "opt_part_option_list", "opt_part_option",
  "create_select", "$@59", "$@60", "opt_as", "opt_create_database_options",
  "create_database_options", "create_database_option", "opt_table_options",
  "table_options", "table_option", "opt_if_not_exists",
  "create_or_replace", "opt_create_table_options",
  "create_table_options_space_separated", "create_table_options",
  "create_table_option", "$@61", "default_charset", "default_collation",
  "storage_engines", "known_storage_engines", "row_types",
  "merge_insert_types", "opt_select_from", "udf_type", "create_field_list",
  "field_list", "field_list_item", "column_def", "key_def", "$@62", "$@63",
  "$@64", "$@65", "opt_check_constraint", "check_constraint",
  "opt_constraint", "constraint", "field_spec", "$@66", "field_def", "@67",
  "opt_generated_always", "vcol_opt_specifier", "vcol_opt_attribute",
  "vcol_opt_attribute_list", "vcol_attribute", "parse_vcol_expr",
  "virtual_column_func", "type", "$@68", "$@69", "spatial_type", "char",
  "nchar", "varchar", "nvarchar", "int_type", "real_type", "float_options",
  "precision", "field_options", "field_opt_list", "field_option",
  "field_length", "opt_field_length", "opt_precision", "opt_attribute",
  "opt_attribute_list", "attribute", "type_with_opt_collate",
  "now_or_signed_literal", "charset", "charset_name",
  "charset_name_or_default", "opt_load_data_charset",
  "old_or_new_charset_name", "old_or_new_charset_name_or_default",
  "collation_name", "opt_collate", "collation_name_or_default",
  "opt_default", "ascii", "unicode", "opt_binary", "opt_bin_mod",
  "ws_nweights", "$@70", "ws_level_flag_desc", "ws_level_flag_reverse",
  "ws_level_flags", "ws_level_number", "ws_level_list_item",
  "ws_level_list", "ws_level_range", "ws_level_list_or_range",
  "opt_ws_levels", "opt_primary", "references", "opt_ref_list", "ref_list",
  "opt_match_clause", "opt_on_update_delete", "delete_option",
  "normal_key_type", "constraint_key_type", "key_or_index",
  "opt_key_or_index", "keys_or_index", "opt_unique", "fulltext", "spatial",
  "init_key_options", "key_alg", "normal_key_options",
  "fulltext_key_options", "spatial_key_options", "normal_key_opts",
  "spatial_key_opts", "fulltext_key_opts", "key_using_alg", "all_key_opt",
  "normal_key_opt", "spatial_key_opt", "fulltext_key_opt",
  "btree_or_rtree", "key_list", "key_part", "opt_ident",
  "opt_if_not_exists_ident", "opt_component", "string_list", "alter",
  "$@71", "$@72", "$@73", "$@74", "$@75", "$@76", "$@77", "$@78",
  "ev_alter_on_schedule_completion", "opt_ev_rename_to", "opt_ev_sql_stmt",
  "ident_or_empty", "alter_commands", "$@79", "$@80", "$@81",
  "remove_partitioning", "all_or_alt_part_name_list", "add_partition_rule",
  "$@82", "add_part_extra", "reorg_partition_rule", "$@83",
  "reorg_parts_rule", "$@84", "alt_part_name_list", "alt_part_name_item",
  "alter_list", "add_column", "alter_list_item", "$@85", "$@86", "$@87",
  "opt_index_lock_algorithm", "alter_algorithm_option",
  "alter_lock_option", "opt_column", "opt_ignore", "alter_options", "$@88",
  "alter_options_part2", "alter_option_list", "alter_option",
  "opt_restrict", "opt_place", "opt_to", "slave", "$@89", "$@90", "start",
  "opt_start_transaction_option_list", "start_transaction_option_list",
  "start_transaction_option", "slave_thread_opts", "$@91",
  "slave_thread_opt_list", "slave_thread_opt", "slave_until",
  "slave_until_opts", "checksum", "$@92", "opt_checksum_type",
  "repair_table_or_view", "$@93", "repair", "$@94", "opt_mi_repair_type",
  "mi_repair_types", "mi_repair_type", "opt_view_repair_type", "analyze",
  "$@95", "analyze_table_list", "analyze_table_elem_spec",
  "opt_persistent_stat_clause", "persistent_stat_spec",
  "persistent_column_stat_spec", "$@96", "persistent_index_stat_spec",
  "$@97", "table_column_list", "table_index_list", "table_index_name",
  "binlog_base64_event", "check_view_or_table", "$@98", "check", "$@99",
  "opt_mi_check_type", "mi_check_types", "mi_check_type",
  "opt_view_check_type", "optimize", "$@100", "opt_no_write_to_binlog",
  "rename", "$@101", "rename_list", "table_to_table_list",
  "table_to_table", "keycache", "$@102", "keycache_list_or_parts",
  "keycache_list", "assign_to_keycache", "assign_to_keycache_parts",
  "key_cache_name", "preload", "$@103", "preload_list_or_parts",
  "preload_list", "preload_keys", "preload_keys_parts", "adm_partition",
  "$@104", "cache_keys_spec", "$@105", "cache_key_list_or_empty",
  "opt_ignore_leaves", "select", "select_init", "select_paren",
  "select_paren_derived", "select_init2", "$@106", "select_part2", "$@107",
  "$@108", "select_into", "select_from", "select_options",
  "select_option_list", "select_option", "select_lock_type",
  "select_item_list", "select_item", "remember_name", "remember_end",
  "select_alias", "opt_default_time_precision", "opt_time_precision",
  "optional_braces", "expr", "bool_pri", "predicate", "bit_expr", "or",
  "and", "not", "not2", "comp_op", "all_or_any", "opt_dyncol_type",
  "dyncol_type", "dyncall_create_element", "dyncall_create_list",
  "simple_expr", "function_call_keyword", "function_call_nonkeyword",
  "function_call_conflict", "geometry_function", "function_call_generic",
  "@109", "fulltext_options", "opt_natural_language_mode",
  "opt_query_expansion", "opt_udf_expr_list", "udf_expr_list", "udf_expr",
  "sum_expr", "$@110", "$@111", "$@112", "variable", "$@113",
  "variable_aux", "opt_distinct", "opt_gconcat_separator",
  "opt_gorder_clause", "$@114", "gorder_list", "in_sum_expr", "$@115",
  "cast_type", "$@116", "opt_expr_list", "expr_list", "ident_list_arg",
  "ident_list", "opt_expr", "opt_else", "when_list", "table_ref",
  "join_table_list", "esc_table_ref", "derived_table_list", "join_table",
  "$@117", "$@118", "$@119", "$@120", "$@121", "$@122", "inner_join",
  "normal_join", "opt_use_partition", "use_partition", "table_factor",
  "$@123", "select_derived_union", "$@124", "$@125",
  "select_init2_derived", "select_part2_derived", "$@126", "$@127",
  "select_derived", "$@128", "select_derived2", "$@129", "$@130",
  "get_select_lex", "select_derived_init", "opt_outer",
  "index_hint_clause", "index_hint_type", "index_hint_definition", "$@131",
  "$@132", "index_hints_list", "opt_index_hints_list", "$@133",
  "opt_key_definition", "$@134", "opt_key_usage_list", "key_usage_element",
  "key_usage_list", "using_list", "interval", "interval_time_stamp",
  "date_time_type", "table_alias", "opt_table_alias", "opt_all",
  "where_clause", "$@135", "having_clause", "$@136", "opt_escape",
  "group_clause", "group_list", "olap_opt", "alter_order_clause",
  "alter_order_list", "alter_order_item", "opt_order_clause",
  "order_clause", "$@137", "order_list", "order_dir",
  "opt_limit_clause_init", "opt_limit_clause", "limit_clause",
  "limit_options", "limit_option", "limit_rows_option",
  "delete_limit_clause", "int_num", "ulong_num", "real_ulong_num",
  "ulonglong_num", "real_ulonglong_num", "dec_num_error", "dec_num",
  "choice", "procedure_clause", "$@138", "procedure_list",
  "procedure_list2", "procedure_item", "select_var_list_init", "$@139",
  "select_var_list", "select_var_ident", "into", "$@140",
  "into_destination", "$@141", "$@142", "do", "$@143", "drop", "$@144",
  "$@145", "$@146", "table_list", "table_name",
  "table_name_with_opt_use_partition", "table_alias_ref_list",
  "table_alias_ref", "opt_if_exists", "opt_temporary", "insert", "$@147",
  "$@148", "replace", "$@149", "$@150", "insert_lock_option",
  "replace_lock_option", "insert2", "insert_table", "insert_field_spec",
  "$@151", "fields", "insert_values", "$@152", "$@153", "values_list",
  "ident_eq_list", "ident_eq_value", "equal", "opt_equal", "no_braces",
  "$@154", "opt_values", "values", "expr_or_default", "opt_insert_update",
  "$@155", "update", "$@156", "$@157", "update_list", "update_elem",
  "insert_update_list", "insert_update_elem", "opt_low_priority", "delete",
  "$@158", "single_multi", "$@159", "$@160", "$@161", "$@162",
  "opt_select_expressions", "table_wild_list", "table_wild_one",
  "opt_wild", "opt_delete_options", "opt_delete_option", "truncate",
  "$@163", "opt_table_sym", "opt_profile_defs", "profile_defs",
  "profile_def", "opt_profile_args", "show", "$@164", "show_param",
  "$@165", "$@166", "show_engine_param", "master_or_binary", "opt_storage",
  "opt_db", "opt_full", "from_or_in", "binlog_in", "binlog_from",
  "wild_and_where", "describe", "$@167", "$@168", "explainable_command",
  "describe_command", "opt_extended_describe", "opt_describe_column",
  "flush", "$@169", "flush_options", "$@170", "opt_flush_lock",
  "flush_lock", "$@171", "flush_options_list", "flush_option",
  "opt_table_list", "optional_flush_tables_arguments", "reset", "$@172",
  "reset_options", "reset_option", "$@173", "slave_reset_options", "purge",
  "$@174", "purge_options", "purge_option", "kill", "$@175", "kill_type",
  "kill_option", "kill_expr", "shutdown", "use", "load", "$@176", "$@177",
  "$@178", "$@179", "data_or_xml", "opt_local", "load_data_lock",
  "opt_duplicate", "opt_field_term", "field_term_list", "field_term",
  "opt_line_term", "line_term_list", "line_term",
  "opt_xml_rows_identified_by", "opt_ignore_lines", "lines_or_rows",
  "opt_field_or_var_spec", "fields_or_vars", "field_or_var",
  "opt_load_data_set_spec", "load_data_set_list", "load_data_set_elem",
  "text_literal", "text_string", "hex_or_bin_String", "param_marker",
  "signed_literal", "literal", "NUM_literal", "temporal_literal",
  "insert_ident", "table_wild", "order_ident", "simple_ident",
  "simple_ident_nospvar", "simple_ident_q", "field_ident", "table_ident",
  "table_ident_opt_wild", "table_ident_nodb", "IDENT_sys",
  "TEXT_STRING_sys", "TEXT_STRING_literal", "TEXT_STRING_filesystem",
  "ident", "label_ident", "ident_or_text", "user_maybe_role",
  "user_or_role", "user", "keyword", "keyword_sp", "set", "$@180",
  "start_option_value_list", "$@181", "$@182", "$@183",
  "start_option_value_list_following_option_type", "$@184",
  "option_value_list_continued", "option_value_list", "$@185", "$@186",
  "option_value", "$@187", "option_type", "opt_var_type",
  "opt_var_ident_type", "option_value_following_option_type",
  "option_value_no_option_type", "internal_variable_name",
  "transaction_characteristics", "transaction_access_mode",
  "isolation_level", "transaction_access_mode_types", "isolation_types",
  "text_or_password", "set_expr_or_default", "lock", "$@188",
  "table_or_tables", "table_lock_list", "table_lock", "lock_option",
  "unlock", "$@189", "handler", "$@190", "handler_read_or_scan",
  "handler_scan_function", "handler_rkey_function", "$@191",
  "handler_rkey_mode", "revoke", "revoke_command", "admin_option_for_role",
  "grant", "grant_command", "opt_with_admin", "opt_with_admin_option",
  "role_list", "current_role", "grant_role", "opt_table",
  "grant_privileges", "opt_privileges", "object_privilege_list",
  "object_privilege", "$@192", "$@193", "$@194", "$@195", "opt_and",
  "require_list", "require_list_element", "grant_ident", "user_list",
  "grant_list", "user_and_role_list", "via_or_with", "using_or_as",
  "grant_user", "opt_column_list", "column_list", "column_list_id",
  "require_clause", "grant_options", "opt_grant_option",
  "grant_option_list", "grant_option", "begin", "$@196", "opt_work",
  "opt_chain", "opt_release", "opt_savepoint", "commit", "rollback",
  "savepoint", "release", "union_clause", "union_list", "$@197",
  "union_opt", "opt_union_order_or_limit", "union_order_or_limit", "$@198",
  "order_or_limit", "union_option", "query_specification",
  "query_expression_body", "$@199", "subselect", "subselect_start",
  "subselect_end", "opt_query_expression_options",
  "query_expression_option_list", "query_expression_option",
  "view_or_trigger_or_sp_or_event", "definer_tail", "no_definer_tail",
  "definer_opt", "no_definer", "definer", "view_algorithm", "view_suid",
  "view_tail", "$@200", "view_list_opt", "view_list", "view_select",
  "$@201", "view_select_aux", "view_check_option", "trigger_tail", "$@202",
  "$@203", "$@204", "udf_tail", "sf_tail", "$@205", "$@206", "$@207",
  "$@208", "$@209", "sp_tail", "$@210", "$@211", "$@212", "$@213", "xa",
  "xid", "begin_or_start", "opt_join_or_resume", "opt_one_phase",
  "opt_suspend", "$@214", "opt_migrate", "install", "uninstall",
  "keep_gcc_happy", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
     735,   736,   737,   738,   739,   740,   741,   742,   743,   744,
     745,   746,   747,   748,   749,   750,   751,   752,   753,   754,
     755,   756,   757,   758,   759,   760,   761,   762,   763,   764,
     765,   766,   767,   768,   769,   770,   771,   772,   773,   774,
     775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
     785,   786,   787,   788,   789,   790,   791,   792,   793,   794,
     795,   796,   797,   798,   799,   800,   801,   802,   803,   804,
     805,   806,   807,   808,   809,   810,   811,   812,   813,   814,
     815,   816,   817,   818,   819,   820,   821,   822,   823,   824,
     825,   826,   827,   828,   829,   830,   831,   832,   833,   834,
     835,   836,   837,   838,   839,   840,   841,   842,   843,   844,
     845,   846,   847,   848,   849,   850,   851,   852,   853,   854,
     855,   856,   857,   858,   859,   860,   861,   862,   863,   864,
     865,   866,   867,   868,   869,   870,   871,   872,   873,   874,
     875,   876,   877,   878,   879,   880,   881,   882,   883,   884,
     885,   886,   887,   888,   889,   890,   891,   892,   893,   894,
     895,   896,    61,    62,    60,   124,    38,    45,    43,    42,
      47,    37,    94,   126,    40,    41,    44,    33,   123,   125,
      59,    64,    46,    58
};
# endif

#define YYPACT_NINF -4104

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-4104)))

#define YYTABLE_NINF -2773

#define yytable_value_is_error(Yytable_value) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    6117,  2462,   763, -4104,  -155,   910, 57520,   110,  1296, -4104,
     585,  3795, -4104, -4104, -4104, -4104, -4104,  3487, -4104, 57520,
     763,  1151, -4104, 25808, -4104, -4104,   -37, -4104,    72,  1296,
     763,   790, -4104, 57520, -4104,  1144,  1454,   763, -4104, -4104,
   50557, -4104,   585, 57520, -4104, -4104, -4104, -4104, 50557,   194,
     192,  1114,  1214, -4104, -4104, 57520,  2107, -4104,  -158,  1696,
    1193, -4104, -4104,  1335, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104,  1491, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, 26447,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104,  1071, 57520,  1149, 57520,  1632, 57520, 48658, 57520,
   -4104,  1629, -4104, -4104,  1721, -4104, -4104,  1296,   585, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  1207, -4104, -4104,  -155,
   -4104, -4104, -4104,  -181, -4104,  1856,  1644, -4104,  1684,  1448,
   -4104, 48658, -4104, 57520, -4104, -4104, -4104,  1665,  1678,  1730,
     121, 12164,  1741,  1741,  1741,  1741,  1785,  1741, -4104,  1741,
   57520, -4104,  1741, -4104,  1741,  1296, -4104, -4104, -4104,  1844,
   37264, 57520,  1621,   240,   -96, 48658,   183, 57520,  -155,    60,
   -4104,  1756, -4104, -4104, -4104,  1296, -4104,  1973,  1836,   242,
   57520, -4104, -4104, -4104,   987,    -2,  1427, -4104, -4104,  1556,
   -4104, 37897,   154, -4104, -4104, -4104,  2407, 28364,  6774,  1556,
    1575,  -155,  -127,  1584,  -155, -4104, -4104, 57520,  -155,  1296,
    1806, -4104, -4104,   209,   209,   209, -4104,   209, -4104,   209,
   -4104,  -158,  1446, -4104, -4104,  1443, 57520, -4104,   338,  1553,
   -4104,  1554,   949,  1404, -4104, -4104,  1457,   866, -4104,  1534,
   41062, -4104, 57520, -4104, -4104, -4104, -4104,  1744, -4104, -4104,
   -4104,  2790, -4104,  1583,   104, 57520,  1627, -4104, -4104, -4104,
   25808,  1500, 57520,  1569, -4104, -4104, 25808, -4104, -4104, 25808,
     230,  1294,  1269, 57520, 57520, -4104, 45493,  1964, -4104,  2162,
   41062,  1644,  1644,  1644, -4104, -4104, -4104, 51190,   121,  1533,
    1535,  1544, 17428, -4104,  1549,  1567,  1594, 12164,  1603,  1609,
    1612,  1614,  1623,  1637,  1639,  1643,  1645,  1650,  1656,  1673,
    1694,  1707,  1707,  1707,  1719,  1746,  1750,  1752,  -184,  1755,
   -4104,  1761,  1763,  1774, -4104, -4104,  1797,  1808,  1810, -4104,
   -4104,  1812,  1814,  1819, 12822,  1828,  1832,  1837, -4104, 22601,
    1840,  1843,  1865,  1869,  1871,  1874,  1878,  1892,  1894, -4104,
   -4104, 12164,  1719, -4104, -4104,  1897, -4104,  1903,  1913,  1928,
    1936,  1940,  1957,  1967,  1969,  1971,  1979,  1989,  1991,  1994,
    1996,  2006,  2017,  2019,  1719, -4104,   875,  2029,  2041,   995,
    2043, -4104,  2046, -4104,   285,  2048,  1707,  1719,  1719,  2057,
    2068,  2076,  2082,  2092,  2095, 17428, 17428, 17428, 12164, -4104,
   57520, -4104, 57520,  1183,  2732, -4104,  3267, 17428,   916, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  1538,  1649, -4104, -4104,
   -4104, -4104, -4104, -4104,  2105,  1590,  2052, 57520, 57520, 57520,
   57520, 57520, 57520, 45493, 48658,  1687, 57520, 46126, -4104,  1741,
    1666,  3683, 31554,  1835,  1815,  1611,  1707, -4104, -4104,   -93,
     756,   779,  1921, -4104, -4104,  1787,   804,  2072, -4104,   871,
     422, -4104,    79,   883,   886, -4104, -4104, -4104, -4104, -4104,
   -4104,  1771,  2096,  1740, -4104, -4104,   169, -4104, -4104, 57520,
   -4104, -4104, -4104, -4104,  2144,  1993, -4104, -4104, -4104,   940,
    2425,   215, 25808, -4104,  1946, 12164,  1850, -4104,  -202, -4104,
   -4104,  2332, -4104, -4104, 46126, 25808,  -179, -4104, -4104, 23242,
   -4104, -4104,  2611, -4104,  2013, -4104, -4104,  1649,  3867, -4104,
    2393,  1835,  2402, -4104,  2581, -4104,  2412,  2311,  1294,  2202,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    2149,  2407, -4104, -4104,   590,  2318,  2142,   669,  1040, 36628,
     501, 48658,  1366,    50, 29002, 41695,  2154, -4104, -4104, -4104,
     704,  2320, -4104,  2658, -4104, -4104,   735, -4104,  2181,  1529,
     735, 46759,  2566,   180, -4104,   167, -4104,  2652, -4104, -4104,
   -4104, -4104, -4104,  2322,  2300,  2347, -4104,   324,  2431, -4104,
    -155, -4104,  1027, -4104, -4104,  2342, -4104,  2566,   735,   180,
   -4104,  2572,  2731,   628,  2701,  -165, -4104, -4104, -4104,   -91,
    2809, -4104,  2265, -4104, -4104, -4104, 25808, -4104, -4104, -4104,
    2144, -4104, -4104, -4104, -4104,  2274, -4104, -4104,  2548,  2386,
   -4104, -4104,    63, -4104,  2284,   -13,  2779, -4104, -4104,   268,
    -109,  1721,  1644, -4104,  2031, 42328, -4104, -4104, -4104,  2811,
    2828,  1707,  2303, -4104, -4104, -4104, -4104, -4104,  2955, -4104,
   -4104,  2312,  2859,  2859,  2859,  2966, -4104, -4104, -4104, 25808,
   -4104, -4104, -4104,   104, -4104, -4104,  2502,  2391, -4104,  1627,
   25808,  2777,  2349, -4104, -4104,  2639, 12164, -4104, -4104, -4104,
     226, -4104, -4104, 25808,   118, -4104,  2982,  2602, -4104, -4104,
   -4104, -4104,  2871, -4104, -4104,  2955,   893, -4104,  2935,  2859,
    2825, -4104,  2836,  2413, -4104, 57520, 57520, 57520, 25808, -4104,
    2419, -4104,  2415, -4104, 12164, 12164,   317,  3020,  3082,  3082,
    3082,  1183,  2478, 12164, 12164, 12164, 12164, 12164, 12164, 12164,
   12164, 12164, 12164, 12164, 12164,   323,  2450, -4104, -4104, -4104,
     326, -4104,  2459, 12164, 12164, -4104, 12164, 12164, 27086, -4104,
    3718, 12164,   825,  2974, 12164, 12164, 12164, 12164,  2986, 12164,
   12164, 12164, 27086,  3116,  2472, -4104,  2468,  1537, 12164, 12164,
    1551, 12164, 12164, 12164, 12164, 12164, -4104, -4104, 12164, 12164,
   12164, 12164, 17428, 12164, 12164, 12164, 12164, 12164, 12164,  2488,
   12164,  3082,  3082, 12164, 12164,  1597, -4104, -4104, 12164,  2853,
    2853, -4104, 12164,  8874, 12164, -4104, -4104,  2490, -4104, -4104,
   -4104, 27086,  3082,  3082, 12164, 12164, 12164,  3020,  3020,  3020,
     206,  2494,   927, 12164, 29640,  2493, -4104, -4104, -4104, -4104,
   12164, 12164, 12164, 17428, -4104,  1845, -4104, -4104, -4104, -4104,
   -4104, 13480, 17428, 17428,  2504, 17428, 17428, 17428, 17428, 17428,
    2888, 17428, 17428, 18086, 18744, 17428, 17428, 17428, 17428,  1054,
    3020, 48658, 17428, 12164, -4104, -4104, 57520, -4104, -4104, -4104,
    2503,  2796,  1687, -4104,  2522, -4104,   685,  3021, -4104, -4104,
   -4104,  2530, 25808, -4104,  2527, -4104,  2909, -4104, -4104,  2912,
    2915,  2917, -4104, -4104, -4104, -4104, -4104,  3153,  2922, -4104,
    -155,  2930, -4104, -4104, -4104, -4104,  2561, -4104, -4104, 19402,
   48658, -4104,  2565, -4104,  2580, -4104, -4104, -4104, -4104, -4104,
   -4104,  2673, -4104, -4104, -4104, -4104,  2575, -4104, 46126,  2575,
   -4104, -4104,  2575, -4104, -4104,  2575, 41062,   802,  3618, -4104,
   -4104, 57520, -4104, 58153, -4104, -4104, 23242,  -155, -4104,  3002,
   14138, -4104, -4104, -4104,  2957,   200,  2583, -4104, 25808, -4104,
    1183, -4104,   108,   108,  2837,   178, 48658, -4104, -4104,   187,
    2585,  2671,  2590, -4104,  2678, -4104, -4104, 25808, 25808, -4104,
   -4104, -4104,  2855, -4104,  -155,    -2, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  2599,
    2614,  3063,  2610, 46126, 41062,   878, -4104, 57520, -4104,  1599,
   -4104, -4104, -4104,  2616, -4104, 12164, -4104, -4104, 57520, -4104,
   -4104, -4104, -4104, -4104,  3194, 12164, -4104, 46126,   -46, -4104,
      73,  1018,   704, -4104, -4104, -4104, -4104, -4104, 57520, 51823,
    2618,  9532,  2738,  3026,  -155, 12164, -4104,  2632,  1644, 57520,
   57520, 57520, 25808, 57520, 25808, -4104,   806,   806, -4104, 42961,
   -4104, -4104, -4104, -4104,   735, 57520, 57520,   735, 41062, -4104,
     180,   701, 57520,   735, -4104,  3031,  2736, -4104, -4104, -4104,
    3100, -4104, -4104,  3093,  2634, -4104,  3121, -4104, -4104,  2761,
     180, -4104, -4104, 25808, -4104, -4104,   180, -4104,   180,   180,
   12164,   735,   735, -4104,   -81, -4104, -4104, -4104,  2793,  -127,
   -4104, -4104, -4104,  1141,   209,  2893, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,    81, -4104, -4104, -4104,
   -4104, -4104, -4104,   229, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104,  1309, -4104, -4104, -4104, -4104, -4104,  1627, 25808, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,    74,
   -4104, -4104, -4104,  2008,  3158, -4104, 48658,  2734,  -105,  1488,
    2734,  2278,  -155,   171, -4104,   171, -4104, -4104, -4104,  2929,
     212, 25808, -4104,  2654, -4104,  2919, 52456, 25808, -4104, -4104,
   -4104,  1032,  2662,  2666,  1183,  4192, -4104, -4104, 25808, -4104,
     207, -4104, -4104, -4104,  2725, -4104, -4104, -4104, -4104,  2696,
   -4104, -4104, -4104,    76,  1447,  3321, 45493, -4104,  2699,  2728,
     216, 41062, -4104, -4104, -4104,  2679, -4104,  2855, -4104,  1618,
   57520,  3141, 34096, -4104,   276,   748, -4104,  3082,  2688, -4104,
    2692,  2693,  2694, 12164,    92,  1254,   934,  1230,  1302,   980,
     369,  1168,   401, -4104,  1336,   434,   467,   521,   204, -4104,
    2695,  2702, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    2700, -4104, -4104, -4104,   553,   587,  1212,  1291,  2713,  2715,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    3169, -4104,  1438, -4104, -4104, -4104, -4104,  2723, -4104, -4104,
    1298,   759,   851,   228,  2735,  1455,   853,  1477,  1524,  2726,
   27086, 57520,  3082,  2737,  1325,  1351,  3082,  2739,   861,  1356,
    1526,  1686,  1712,  1361,  1380,   863,  1715,  2712,  1428,   897,
     904,  1462,   909,   924, -4104,  1476,  2740,  2741,   970,   252,
    3082,  2743,   256,  2745,  2748,  1540, 10190, 10848, 11506,   217,
    1019, -4104,  2751, -4104,  2468,  2752,  2757,   269,   181,  1596,
   -4104, 12164, -4104, -4104,   979,   976,  2797,   136,  1018, -4104,
    2899, 57520,  2370,   175, -4104, -4104, -4104, -4104, -4104, -4104,
     929, -4104,  2759, -4104,  2762,  2118,  2766, 12164,  1083,  2766,
    3001,  1589,  1589, 17428,  2307,  2256, 12822,  1126, 12822,  1126,
    2766,  2766,  2766, -4104, 17428,  2768, 17428, 17428, -4104,  3020,
    1183,  2765,  1078, 57520, 25808,   685, -4104, -4104, -4104, -4104,
     704, 46126,   184, 25808, 48658,  2767, -4104, -4104, -4104, -4104,
   -4104, -4104,  -155, -4104, -4104,  3864, 25808,  2832,  2863,  2865,
   -4104, 32192, -4104, -4104, -4104, -4104, 32192,   -18, -4104, 57520,
   -4104,  2857, -4104, -4104, -4104,  1035, 23881, 23881, -4104, 23881,
   -4104, -4104, -4104, -4104, -4104,   422, -4104, -4104, -4104, -4104,
     259,   294,  2589,  2814, -4104, -4104, -4104, -4104, 33463,  1183,
   -4104, 25808, -4104,  3204,   832, 25808,  2789, -4104,  2792, -4104,
   -4104, -4104, -4104, -4104,   718,  2904, -4104,  3438, -4104, 12164,
    -155, -4104, 46126, 46126, 25808, 25808, 25808,   783, -4104,  1773,
    2794, -4104, -4104,  3439, -4104,  3867, 19402, 45493,  3244,  3259,
   -4104,  2802, 23881, 23881, 23881, -4104, -4104, -4104, -4104, -4104,
     151,  1183, -4104,  2799, -4104, 47392, -4104,  1183,   704,  2817,
    2819, -4104, -4104,  3196,   -80, -4104,  2813,  2818, -4104,  2816,
    2820,  2824, 53089, 12164, -4104,    73, -4104, -4104,   704, -4104,
   -4104, -4104, 17428,  1761, -4104,  1183, -4104, -4104,  -155,  3277,
   -4104,  1183,  2834, 57520, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104,  3315, -4104,  3027,
     -77, -4104, -4104, -4104, -4104, -4104, -4104, -4104,   735, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  3069,  2566,  2431,  3026,
   -4104,   735,   180, 25808,   735,   735,  1183, -4104, -4104, -4104,
   -4104, -4104,  2845, -4104,  2908, -4104, -4104, -4104, -4104, 57520,
    3037,  3011, -4104,  2847, -4104, -4104, 25808, -4104,  2856, -4104,
    3317,  3462,  2566, -4104, -4104,  3314, 57520, 57520,  1644, 57520,
   57520, -4104, -4104, -4104,   704,   704,  3167, -4104,  -155,  2994,
    2997,  2998,  3005,  3008,  3044, -4104, -4104,  -155,  -155, -4104,
   -4104,   704, -4104,  1136, -4104, -4104, -4104, -4104,  -155,  -155,
    -155,  -155,  1530,  -155,  -155,  1767, -4104, -4104,   704,   704,
   -4104,  1286, -4104, -4104, -4104, -4104, -4104, -4104, -4104,   238,
   -4104,  5011,   163, -4104,  3085, -4104, -4104, -4104, 25808,  3337,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    2880, -4104, -4104, 12164,  2896,  2900,  2902,  2903,  2907,  2910,
    2911,  2924,  2925,  2931,  2940,  2942,  2943,  2944,  2945,  2948,
    2950,  2953,  2956,  2961,  2962,  2890, -4104, -4104, -4104,  2951,
   -4104, -4104, -4104, -4104,   101,   704,   704,   704,   704, -4104,
    2709, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, 41062,
   -4104, 48658,  3263,  2113,   641, -4104, -4104, 48658, -4104,   962,
    3176,  3187,  3190, 57520,  2991, -4104, 34096, -4104, -4104,  1141,
   -4104,  2918, 14796, -4104,  2958, -4104, 12164, -4104, -4104, -4104,
     787, 12164, 12164,  3412,  2192, -4104, 48025, -4104, -4104, -4104,
   12164, -4104, 12164, -4104, 12164, 12164, 12164, 12164, 48025,  2192,
   12164, -4104,  2960, -4104,  3358,  3359, -4104, -4104, -4104, -4104,
   12164, -4104, 12164, 12164, -4104, 12164, 12164, 12164, 12164, -4104,
   12164, -4104, -4104, 17428, -4104,  2946,  2971, -4104, -4104, -4104,
    2972, -4104, 12164, -4104, -4104, -4104, -4104, -4104, -4104, 12164,
   -4104, 12164, -4104, 12164, 12164, -4104, 12164, 12164, -4104, -4104,
   -4104, 15454, 12164, 12164,  2975, -4104, -4104, 12164, 12164, 12164,
   -4104, 12164,  1306, 12164,  1588, 12164,  2003, 12164, -4104, 12164,
   -4104, -4104, -4104, -4104, 12164,   364,   718,  1530,  2976, -4104,
    1770, -4104, -4104,  2063, -4104,   979,  2978, -4104, -4104,  1599,
   -4104, -4104, 48658, 12164, -4104, -4104, -4104, -4104, -4104, -4104,
   17428,   363,  2979, 17428, -4104,  3001,  2986,  2986,  2267, 12164,
    1083,  3001, 12164,  2980,  2954, -4104, 12164, 57520, -4104, -4104,
   -4104, -4104, 48658, -4104, -4104, -4104, -4104,   184, -4104,  2527,
   -4104, -4104,  2789,    47,  2969,  2981, -4104, -4104, -4104, -4104,
   -4104, -4104,  1824, -4104, 41062,  3605, -4104,  2983, -4104,  2995,
    3066,  3070,  3071, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104,  2566,  1773, -4104, -4104,  2985,
   -4104, -4104,  2639,  3055,  3025,  3379,  3572, -4104, -4104, 57520,
   17428, -4104,  3613,  3009,  3010,  3024,  3015,  1183, -4104,  3098,
   -4104, -4104, -4104,    32, -4104, -4104, -4104, -4104, -4104,    75,
   -4104, -4104,  3017,  3017, 21321, -4104, -4104, -4104, 57520, -4104,
   -4104,  3030, -4104, -4104,  3293, 46126, 41062,  3477,  3478,  3479,
    1096, -4104,   479, -4104,   177,  3430,  2566, -4104,  3481, 49291,
   -4104, 34729, -4104, -4104, -4104, -4104,   -46,  3123,  3124,  1484,
   -4104, -4104,  3427,  3257, -4104, -4104, -4104,   704,  1183, -4104,
    2618,  9532,  3033, 30278, -4104,  1134, -4104,    64, -4104, 43594,
    3512, 43594, 43594, -4104,  3322, -4104, -4104,  3277, -4104,  2814,
     180, -4104, -4104,   -81,  2821, -4104, -4104,  1110,  3433,  3434,
   -4104,  3307,  1559,  3307, -4104, -4104,  1110, 27086,  1141,  2855,
   -4104,  1530,  3367, -4104, -4104, -4104, 57520, -4104,   393, 57520,
    3045,  -148,  5390, 47392, 44227, -4104, -4104, -4104, -4104,  3582,
   -4104,  3583,  1512, -4104, -4104,  3113,  1488, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104,  2278,  3113,  3113,   171, -4104,   158, -4104, -4104,
   -4104, -4104,  2538,   704,  3622,  3306,   704,   704,  3622,   704,
    3309,  3310,   704,   704,  3137,  3568,   704,  3452,  3161,  1905,
    3456,   704,  3318, -4104,  3165,  3586,   704,   704,   704,   704,
     704,  3622,  3331,  3682,   704,   704, -4104,   704,  3334,  3333,
     141,  3336,  3339,   704,   704,   704,   704,   161, 57520,   704,
     704,  3342,   704, -4104, -4104,  7169, -4104, -4104, -4104, -4104,
   -4104, -4104,  1049, 24526, -4104, -4104, -4104, -4104,   704,    33,
     309,  3171,  1222,  3090, -4104,   362,  3091, 53722,  1183,  3094,
    1530,  -155,  -155,  1134,  -155,  1530,  -155,  -155,  -155,  -155,
    -155,  -155,  -155,  1530,  1530,  -155,   988,  1723,  -155,  1530,
    4192, -4104,  -155,   718,  3113,  3113,  1447, -4104, -4104,  3370,
    3535,   704, -4104,  2475, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104,  3195, -4104,   197,  1060,  1060, -4104, 25808,
   25808, 25808, -4104,  3089,  1141,  2814,  1638,  2814,  3106, -4104,
   12822,  1598, -4104,  1183, 12164,  1183,  1317, -4104,  3103,  3103,
    3103, -4104,  3109, -4104, -4104,  3103,  3515,  3103,  3516,  3111,
    3112,  1852,  2024, -4104,  1861,  2035,  1624,  3114,  3115,  1538,
   -4104, 12164, 12164,  1668,  1676,   721,  1023,  1034,   365, -4104,
    1692,  2785, -4104, -4104,  1702,  1709,  1735,  1737,  1043,  1742,
    1888, 12822,  1779,   335,   367, -4104,  1792,  1051,  1137,  1816,
   12164,  1822, 12164,  1848, 12164,  1872,  1876,  1904,  3119,  3119,
     152, -4104,  3120, -4104, -4104, -4104,  3122, -4104, -4104,  2149,
    2063, -4104, -4104,  3125, -4104, -4104,  3117,  1183,  3126, -4104,
   -4104, 12164, -4104,   916, -4104, -4104, 17428,   371,  3127, -4104,
    1183, -4104, -4104,  3128,  1538, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104,  3346, -4104, -4104,  2905, 32192, -4104, 57520,  1128,
    3403,  3138, 35362, 41062, 41062, 41062,  3132, 12164, -4104, -4104,
    3415, 25808, -4104,  3558, -4104, -4104, -4104, -4104, -4104,  3144,
    3136, -4104, -4104, -4104,  3001,  3517,  3402, -4104, -4104,   718,
   57520, 46126,  3457, -4104, -4104,  2407, 27086, -4104,  3146, -4104,
    3146,  1171,  3149,  1900, -4104, -4104, -4104,  3143,  2202,  1909,
   -4104, 19402,  3609,  2530, -4104, 41062, 41062, 41062, -4104,  2814,
    2814,   159,  3212,  3561, -4104, -4104, -4104, -4104, 54355, -4104,
   -4104, -4104, -4104,  1107, -4104,  3159,  3160,   234,  3384, -4104,
   -4104, -4104, -4104,  9532, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  2566, -4104, -4104, -4104,
   -4104, 43594, -4104, -4104, -4104, -4104, -4104,   735, -4104,  3174,
   -4104,  3163,  -214,   976, -4104,  2141, -4104, -4104, -4104,  3559,
    3307,  3307,  1110,  3560,  1044,  3164, -4104,   704, -4104,  2609,
   -4104,  2407, -4104, -4104, 12164,  3361,  3179, -4104, -4104,    78,
   -4104, -4104,  1264, 25808, 20043, -4104, -4104,  3423, -4104,  3436,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,   238,
   -4104, -4104, 27725,  1644, -4104,   300, -4104,  1644, -4104,  1032,
    1032,  1644, 54988, 27725,   763,  1134,  1530,  1741,  1530, 55621,
     763,  -155,  -155,  2511,   704,  1530, -4104, -4104,  3569,  1741,
    3574,  1741,  1741, -4104, 48658, 57520, -4104,   704,   955,  1530,
   56254,  1134,  1134,  1741,   763, 27086,  1689,  2754, -4104,  -155,
     763, -4104, -4104, -4104, -4104, 25808,   763,   763,  2558,  2938,
    3035,  3096, -4104, -4104, -4104,  1530,  2754, 55621, -4104, -4104,
    7491, -4104, -4104, -4104, 20682, 57520,  1429,   227, -4104,  3177,
   39163,  3428, -4104, 12164, 12164,  3474, 57520,  3480, -4104,  3769,
   57520,  3839, -4104,   139, -4104, 55621, -4104,  3206, -4104,  3207,
   -4104,  1530, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    3210, 57520,  3113,  2113, -4104, -4104, -4104, -4104,  -155, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, 34096,  2814,  3482,
   -4104, -4104,  2986, -4104,  1183, 12164,   857, -4104, -4104,   190,
   -4104,   887, -4104, -4104, -4104,  3211, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104,  2444, -4104, -4104,  2192, -4104, -4104, -4104,
    3213,  2986,  2986, -4104, -4104,  3820,  3386, 12164, 12164, -4104,
   12164, -4104,   245,  3218,  3246, -4104, -4104, -4104, -4104, 12164,
   -4104, -4104,  2986, -4104, 12164, -4104, -4104, 12164, -4104, 12164,
   12164, -4104,  1915, -4104,  1923, -4104,  1934, -4104, -4104, -4104,
     718,  3221,  3607, -4104, -4104, -4104,   718,  3418, -4104, -4104,
     718,  1530,  2616, -4104, -4104,   927, 57520, -4104, -4104,  1931,
   -4104, -4104, 12164, -4104, 49291, -4104, -4104,  3697,  3600, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104,  3675, -4104, -4104, -4104, -4104,
    -130,  -130,  -130, 16112,  1183,  3734, -4104, -4104, -4104,  3558,
    3620, -4104,    68, -4104, 57520,  3234,   911, -4104,  1943, -4104,
   -4104,  3236, -4104, -4104,  2149,  3237, -4104,   704, 16112,  3017,
    3411, -4104, -4104,  1171, 27086, 34729, -4104, -4104, 57520, -4104,
   41062,  2802,  2802,  2802,  2566,  3684,  3055,  3055, -4104, 30916,
   -4104, -4104,  3404, -4104, -4104, 35995, -4104, -4104, -4104, -4104,
   -4104, -4104, 30278, 53089, -4104, -4104,  2566, -4104,  -155,  2730,
    1599,  2240, -4104,  1141, -4104,  1110,  3637,  3641, -4104,  1110,
   -4104, -4104, 27086,  2814, 16112, -4104,  2149,  1183,  3245,   327,
    1264, -4104, -4104, -4104, -4104,  3530,  3531, 57520, -4104, -4104,
   -4104, -4104,  3399, -4104, 25808,  3256,  3271,  3272, -4104, -4104,
   -4104,   179, -4104,  4219, -4104, -4104, -4104, -4104,   763,  3273,
    3668,  3671,  1032, -4104,  1644, 27725, -4104, -4104,  1644,  1644,
   -4104, -4104, -4104,   800, 55621, -4104, -4104, 27725, -4104, -4104,
   -4104,  3281, -4104, -4104,   718, -4104, -4104, 44227,  -155, -4104,
    1741, 57520, -4104, 27725, 27725, -4104,  3312,  -155, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, 27725, 55621,  3282,
   -4104,   327, -4104, -4104, -4104, -4104, -4104,  1973, -4104, 55621,
   -4104, -4104, 55621, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    3292,  2615,  1511, -4104,  3295, -4104, 57520, -4104, -4104, 25808,
   -4104, -4104, -4104,  7125, 57520, -4104, -4104, -4104, -4104, -4104,
    1183,  2986,  3860, -4104, -4104,  3447,  -155,  3803, -4104,  1949,
   -4104, -4104, -4104,  3717,  3299, -4104, 53722,  1999, -4104, -4104,
    2278, -4104, -4104, -4104, -4104,  3302,  3303,  3304,  2918, -4104,
    3685,   459,  1183,  3313,  3316,  3319,  3320,  3928,   258, -4104,
    3937, 48025, -4104, -4104, -4104,  2010,  3610, -4104, -4104, -4104,
    3103, -4104,  3109, -4104, -4104, -4104,  3915, -4104, -4104,  3103,
    3730,   190, -4104, -4104,  3326, -4104,  3327,  3329, -4104,   209,
    3330,  1938,  1142,  2026,  3650,  3726, -4104,  3566, -4104,  1942,
    1125,  1947,  1951,  1972,  1983, -4104, -4104, -4104, -4104, -4104,
    3344, -4104, -4104,   473, -4104,  3335,   922,   976, -4104, -4104,
    2085, -4104, -4104,  3976,  3616,   350,  3372,  3372,  3372,  1761,
    1183,  2117, -4104, -4104, -4104, -4104, -4104, -4104,  3754, -4104,
   -4104,  3350,  3438, 57520, -4104,  3402, -4104,  2616, 27086, 16112,
    3351,  3349, -4104,   -13, -4104, -4104,  3345, -4104, -4104,  2802,
   -4104,  3961,  3796, -4104, -4104, 48658,  3356, -4104, -4104,  3677,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  2847,  2815,
    3409,  1110,  1110,  3003,  3410, 12164,  3363, -4104,  3482, -4104,
   -4104,   424,  2616, 12164, -4104, -4104, -4104,  3509,   941, -4104,
    3542,  3366,  3368, -4104, -4104,  -155,  3371, -4104, -4104, 20682,
   -4104,  4002, -4104, -4104, 12164,  1644, -4104, -4104, -4104, -4104,
    3369, -4104, -4104,  3893,  3895, -4104, -4104,  2696, 57520, -4104,
    3194, -4104, 27725,  3281, -4104,   512,  3475, -4104, -4104, -4104,
   27086, -4104, -4104, -4104, 57520, -4104, 25808, -4104, -4104,  3382,
   -4104,  3103,  3103,  3103, -4104, -4104,  3103, -4104,  3109,  3623,
   -4104,  3109,  3109, -4104, -4104, -4104, -4104, -4104,   190,  1561,
   -4104, -4104,   190, -4104, -4104, -4104,   134,  1248,  3109, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  3103,  3103,  3103, -4104,
   -4104,   190,  3103, -4104,  3103, -4104,  3464, -4104,   222,   155,
    3103,  3103,  3103,  3211,  3375, -4104, -4104, -4104, -4104, -4104,
   -4104, 57520, -4104,  1116, 57520,   147, -4104, -4104, -4104,  1530,
    2128, 57520, 57520, 57520, 44860, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, 48025, -4104,  4005,  3676,  3387, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, 12164, -4104,
   -4104, -4104, 12164, -4104, -4104,  3710,  3874, -4104, -4104, -4104,
   -4104, -4104, -4104,  3401, -4104,  1530,   177,   177, -4104, -4104,
   -4104,  3911, -4104, -4104,  3499,  3500, -4104, -4104,  3501, -4104,
   -4104,   115,  2140, -4104, -4104, -4104, -4104, 16112,  3805,  3513,
   -4104, -4104,  3419,  3465, -4104, -4104,   922, -4104, -4104, -4104,
   -4104, 12164, -4104,  3482,  2511, -4104, 30916, -4104,   927, -4104,
    3466, -4104, -4104, -4104,  3468,  1183, 57520,  3685, -4104,   736,
     922,   327,  -155, -4104, -4104, -4104,  3421,  3426, -4104, -4104,
   -4104,   309, -4104, 57520,  7125, -4104, -4104,   -13,  7169, -4104,
   -4104,  1117,   695,  2015,  3429,  3431, 57520,  3432,  3437, -4104,
    3288, 27725, -4104, -4104, -4104, -4104, -4104, 25808,  7125,   763,
   -4104, -4104,  3281,    75,  3422, 57520,  3770, -4104, -4104, -4104,
   -4104,  1648, -4104,  3441,  1648,  1648, -4104,  2318, -4104,  3472,
     190, -4104, -4104,  3483, -4104, -4104, -4104,  1648,  3446,   190,
   -4104, -4104, -4104, -4104,  1648, -4104, 48658,  -155,  3162,  4075,
   -4104,  3504, -4104,  3972,  3844,  4089, -4104,  3809, -4104,  3849,
    3744,   704, -4104,   190, -4104, -4104,  4005, -4104,   190,  4005,
    1648,  1648, 57520,  3585, -4104, 63850, -4104, -4104,  -158,  3485,
    2152, -4104, -4104, -4104, -4104, -4104, -4104,  2156,   327,  3463,
    2158,  2169,  3941,  3646,  3657, -4104, -4104,  3469,  3470,   327,
    2022, -4104, -4104, -4104,  3473, -4104, -4104,  4057, -4104, -4104,
   -4104, -4104,   392,  3740,  1530,  1530,  1530,   781,  2140, -4104,
   -4104,  3526, 25808, 17428,  3587, 57520,  1480,  3222, -4104,  -221,
     327, 12164,  2566, 44227, -4104, -4104, -4104, 12164,  3476, 12164,
    3484,  2172, -4104, -4104, -4104,  1032,  1032, -4104,   736, -4104,
   -4104, -4104, -4104,  1419, 57520, 25808,  3474,  3664, -4104,  3194,
   -4104, -4104,  3423,  3411, -4104,   718,  3402, -4104, -4104, 57520,
   57520,  2188, 57520, 57520,  2832,  2863,  2865,  1723,  1723, -4104,
   -4104,  1429, -4104, -4104, -4104,  3883, -4104, -4104,  2205, -4104,
     892,  3758, -4104, -4104, -4104, -4104,  1648, -4104,   209, -4104,
   -4104, -4104, -4104, -4104,   209, -4104, -4104, -4104, -4104,  3488,
   -4104, -4104, -4104,  3771,  3522, -4104, -4104, -4104, -4104, -4104,
   39796, -4104, -4104, -4104, -4104, -4104, -4104, -4104, 12164,  3974,
    3511, 57520,  1025, -4104, 65116, 65116, 57520, -4104, -4104, -4104,
   -4104,  6583, -4104, -4104,   744, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  4104, -4104,  3486, -4104,
   -4104,  3490,  1431, -4104, -4104, 57520, 56887,  2131, 57520, -4104,
    3775,   132,  1646, -4104,  3964,  2149, -4104, -4104, 12164, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,    80,
   -4104, -4104, 27086,  2855, -4104,   718, -4104,  2207, -4104, -4104,
   -4104,  3584,   704,   704,  4004,  4009,   704,   704,   704,   704,
    3505,  3222, -4104,  3989, -4104, -4104, 12164, -4104, -4104,  1183,
    3738, -4104,  4083,   976,  1183, 57520,  1183, 57520, -4104,  3965,
    3965, -4104, -4104, -4104,  7125,  3966,  1222, -4104, -4104, -4104,
     179,  3508,  2202, -4104,  2216,  2255,  2313, -4104,  2319,  2326,
   -4104, -4104, -4104, -4104,  1429,  3518, -4104, 57520, -4104, -4104,
   -4104,   105, -4104, -4104,  2333, -4104,  2336,  1284, -4104,  3488,
   -4104,  3519, -4104, -4104, -4104, -4104,  1183, 12164, -4104, 12164,
    3540, -4104, -4104,  3968, 57520, -4104, -4104, -4104, -4104, 12164,
   -4104, 63850, 63850, -4104, -4104, -4104, -4104,  4134,   -13,  4110,
    3788,  4112, -4104, -4104,  2340, -4104, -4104,  -155,   704, -4104,
    2131, -4104, -4104, -4104,   704,   327,  3524,  3785, -4104,   132,
   -4104, -4104, -4104,  1646, -4104, -4104, -4104,  2616,   327, -4104,
   -4104,  3529, -4104,   704, -4104,  3527, -4104, -4104, 57520,  3532,
   -4104,  -155,  -155,   704,   704,  2718,  2718,   718, 48658,  3645,
   -4104, -4104,   704,   327, 57520, -4104,  1095,  3914, -4104,  2353,
    2364,  1163, -4104, -4104,  3496, -4104, -4104,  3769,  7125, -4104,
   -4104, -4104, -4104,  3756, -4104,  2131, -4104, -4104, -4104,  3402,
   -4104,  1173,  1173,   190,   209,   190, -4104,  3545, -4104, -4104,
    1183,  1183, -4104,    97, -4104, -4104,  3949,  4041, 12164,  1183,
   60685,  3543, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, 64483, 12164, -4104,   744,  4104,
   -4104,  3821, -4104,  3823, -4104, 56887, -4104,  1530,  1156, -4104,
   40429, -4104, -4104,  1355,  1156, -4104,  1156, -4104, -4104, 27086,
   16112,  2511, -4104,  3587, -4104,  3551, -4104, -4104,   -68, -4104,
   -4104,  -155,  -155, -4104, -4104, -4104, -4104, -4104,  2375, -4104,
   48658, -4104, -4104,  4157,  4159,  4050,  4161,  1095, -4104,  -133,
   -4104, -4104, -4104,  4163, -4104,  4164,  3564,  3567, -4104, -4104,
   -4104,  4080, 63850, -4104,  4073, -4104,   -13, -4104,  2131, -4104,
     132,  1646,  2377, -4104,  4221, -4104,   165,  3850,  3853, -4104,
   -4104, -4104, -4104,  3573,  3604, 12164, 63850, -4104,  4070, -4104,
    3999,  2153,  3942,  3575, -4104,  3576,  1382,  4101, 65116, 65116,
   -4104, -4104, -4104, -4104, -4104,  3952,  4228, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  2379,
   -4104, 16770, -4104, -4104, -4104, -4104, -4104, 48658, -4104,  3645,
   -4104,  3588,   209,   209,  4194,   209, -4104,  4195,  4196,  -133,
   -4104, -4104, -4104, 53722, 53722, -4104, -4104,  4086, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  3651,  4116,
    -104, -4104,    99, -4104,  1183, 61318,  4198, 57520, -4104, -4104,
   -4104, -4104, 12164, -4104, 49924, 61951,  3594, -4104, -4104, -4104,
   -4104, -4104,  3790, -4104,  3551, -4104,  3608, -4104,  3001,  3222,
   -4104, -4104,  3611, -4104, -4104,   209, -4104,   209,   209, -4104,
    3614,  2405,  3786, -4104,  3496,  1173,  1173, -4104, -4104,   148,
   12164, -4104,  4105,  3704, -4104,  3615, -4104, 63850,  2062, 63850,
   -4104, -4104,  4056,  3617,   320, -4104,  3612, -4104,  4044,  4083,
   -4104, 16770,  3621, -4104, 12164,  3625,  3629, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, 63850, -4104, -4104,  -155,  4016, -4104,
     148, -4104,  1183,  4223, 63850, 57520, 58786,  3836, 62584,  4093,
   57520,  7125,  4094,  4095, -4104,  4243,  3914, -4104, -4104,  1183,
   -4104, -4104, 63850, -4104, -4104, -4104, -4104,  3729, -4104, 59419,
   -4104,  2906, -4104,  3667, -4104, -4104,  4165,  3286, -4104,   209,
    4062, -4104, -4104, -4104, 63850, 63850, -4104, -4104, -4104, 38530,
   12164, -4104, -4104, -4104, -4104, -4104,  1096, -4104,  3930,  3647,
   60052, 63217, -4104, -4104, -4104, 32830, -4104, -4104, -4104,  4102,
   -4104,  1183, -4104,   812, 21960,  3813, 38530, -4104, -4104, -4104,
   -4104, -4104, -4104, 48658,  2409, -4104, -4104, 27086, -4104, -4104,
   -4104, -4104, 25167,  3644, -4104,   704, -4104, 27086, -4104, -4104,
   16112, -4104, -4104
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
       0,   930,  1143,  2698,     0,     0,     0,     0,     0,  1127,
    2700,   585,    66,  1800,  1928,  1929,  1711,  1739,     2,     0,
    1143,   276,   179,     0,    78,  1741,     0,  1986,     0,     0,
    1143,     0,   487,     0,  1981,     0,     0,  1143,  1744,  1971,
     253,   179,  2700,     0,  1189,  2488,  1841,  1997,     0,     0,
       0,  1824,     0,  2564,  1789,     0,     0,  2831,     0,     0,
       3,     8,    19,     0,    41,    24,    29,    14,    18,    13,
      54,    48,    26,    39,   128,    38,    10,    57,    58,    16,
      45,    11,    12,    15,    37,    44,    33,    40,    52,  1180,
      22,    23,    30,    46,    62,    20,    59,    55,    21,  1930,
      25,    47,    42,    34,    56,    63,    35,    53,    36,    61,
      28,    49,    27,     9,    17,    50,    51,    43,    64,    31,
      60,    32,     0,   959,     0,     0,     0,     0,     0,     0,
    1037,   942,  2765,  2766,  2767,  1145,  1144,     0,  2700,  2101,
    1123,  1154,  2177,  2179,  2178,  2180,  2181,  2182,  2183,  2184,
    2185,  2118,  2186,  2187,  2189,  2188,  2190,  2191,  2192,  2119,
    2120,  2193,  2194,  2195,  2197,  2196,  2198,  2121,  2122,  2199,
    2200,  2201,  2202,  2123,  2125,  2124,  2203,  2206,  2205,  2204,
    2126,  2207,  2208,  2209,  2211,  2127,  2128,  2129,  2130,  2131,
    2210,  2132,  2212,  2133,  2213,  2214,  2215,  2216,  2217,  2218,
    2219,  2221,  2220,  2134,  2222,  2223,  2225,  2226,  2227,  2224,
    2228,  2230,  2229,  2231,  2232,  2233,  2135,  2234,  2235,  2236,
    2237,  2238,  2239,  2240,  2241,  2136,  2242,  2243,  2244,  2263,
    2137,  2245,  2248,  2247,  2246,  2249,  2250,  2251,  2253,  2252,
    2254,  2255,  2138,  2139,  2256,  2257,  2258,  2259,  2261,  2260,
    2265,  2266,  2267,  2140,  2262,  2264,  2465,  2268,  2269,  2271,
    2270,  2272,  2141,  2274,  2273,  2142,  2276,  2275,  2143,  2144,
    2277,  2278,  2279,  2099,  2280,  2100,  2281,  2284,  2285,  2282,
    2286,  2291,  2145,  2283,  2287,  2288,  2289,  2290,  2292,  2146,
    2294,  2293,  2295,  2296,  2297,  2298,  2299,  2300,  2301,  2302,
    2303,  2316,  2307,  2308,  2310,  2311,  2314,  2309,  2315,  2319,
    2318,  2320,  2321,  2322,  2323,  2324,  2317,  2305,  2312,  2313,
    2306,  2325,  2326,  2304,  2327,  2328,  2329,  2330,  2331,  2332,
    2333,  2334,  2335,  2336,  2337,  2339,  2338,  2340,  2341,  2342,
    2343,  2344,  2345,  2346,  2348,  2347,  2349,  2350,  2351,  2353,
    2352,  2355,  2356,  2147,  2354,  2357,  2358,  2359,  2360,  2361,
    2363,  2362,  2148,  2150,  2149,  2151,  2364,  2365,  2152,  2366,
    2368,  2367,  2369,  2370,  2371,  2373,  2372,  2374,  2375,  2153,
    2154,  2376,  2377,  2378,  2379,  2380,  2381,  2382,  2383,  2384,
    2385,  2386,  2387,  2388,  2389,  2391,  2390,  2392,  2393,  2394,
    2395,  2396,  2397,  2398,  2155,  2399,  2156,  2400,  2401,  2157,
    2402,  2158,  2403,  2404,  2405,  2406,  2407,  2159,  2408,  2409,
    2410,  2412,  2413,  2411,  2414,  2160,  2415,  2416,  2417,  2161,
    2419,  2418,  2420,  2162,  2422,  2163,  2164,  2421,  2166,  2167,
    2423,  2424,  2425,  2165,  2426,  2168,  2427,  2428,  2430,  2429,
    2431,  2432,  2433,  2169,  2434,  2170,  2435,  2436,  2437,  2438,
    2439,  2441,  2440,  2442,  2443,  2444,  2445,  2448,  2450,  2447,
    2449,  2446,  2451,  2452,  2453,  2454,  2458,  2459,  2460,  2461,
    2455,  2456,  2457,  2171,  2462,  2463,  2464,  2466,  2467,  2469,
    2468,  2172,  2173,  2470,  2471,  2176,  2472,  2473,  2474,  2478,
    2475,  2487,  2476,  2477,  2480,  2479,  2481,  2482,  2483,  2174,
    2484,  2175,  2485,  2486,   198,  2104,   181,  2105,  2117,   112,
    2555,  2554,  1081,     0,  2701,  2702,   583,   886,     0,     0,
     179,     0,   887,     0,   885,   179,   134,     0,     0,     0,
    1817,     0,  1737,  1737,  1737,  1737,     0,  1737,   179,  1737,
       0,  1740,  1737,   179,  1737,     0,    71,  1936,   277,     0,
       0,     0,     0,     0,  2098,     0,  1747,     0,     0,  1988,
    2004,     0,  2005,  1999,  2552,     0,  1214,     0,     0,     0,
       0,   179,  1146,  1089,  1798,     0,   243,   252,   254,   255,
     251,     0,  2702,  2713,  1181,  1187,  1199,     0,  1908,   255,
       0,   112,  1062,     0,   112,  1825,  1822,     0,     0,     0,
    1798,  1998,  2815,     0,     0,     0,  2811,     0,  2816,     0,
    1189,     0,     0,     1,     5,     0,     0,   582,  2767,     0,
     579,   580,  2258,  2368,  1921,  1919,  2093,     0,   933,   960,
       0,   938,     0,   936,  2110,  2109,  2108,     0,   949,   948,
     946,     0,   448,     0,  1039,     0,  2772,   940,  1100,  2699,
       0,   200,     0,     0,   113,   114,     0,  1125,  1128,     0,
       0,  2705,     0,     0,     0,   586,     0,     0,   133,     0,
       0,   583,   583,   583,  1821,  1820,  1819,     0,  1817,  2178,
    2118,  2192,     0,  2067,     0,     0,     0,  1498,     0,  2123,
       0,  2207,  2209,  2127,  2128,  2129,  2130,  2131,  2134,     0,
       0,  1227,  1227,  1227,  1224,     0,     0,     0,  2232,  2233,
    2072,     0,     0,     0,  2063,  2073,  2271,  2272,     0,  2065,
    2066,  2278,     0,     0,     0,  2293,     0,  2298,  2070,     0,
       0,  2334,  2336,     0,     0,  2340,  2341,  2342,  2343,  2047,
    1282,     0,  1224,  2062,  2069,  2360,  2055,  2369,  2374,  2375,
       0,  2384,     0,     0,  2406,     0,  2413,  2411,  2417,     0,
       0,  2438,     0,     0,  1224,  2046,  2458,  2459,  2460,  2461,
       0,  2064,  2171,  2071,     0,  2472,  1227,  1224,  1224,     0,
       0,     0,  2481,  2482,  2486,     0,     0,     0,  2737,  1281,
       0,  1460,     0,  1492,  1239,  1245,  1259,     0,  1274,  1308,
    1309,  1311,  1415,  1310,  1316,  1315,  1712,  2059,  1314,  1313,
    2060,  2061,  1307,  2083,  2104,  2082,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1904,     0,     0,  1723,  1737,
      73,     0,     0,  2613,  2628,  2629,  1227,  2625,  2630,  2252,
    2139,  2265,     0,  2627,  2619,     0,  2379,  2383,  2623,  2398,
    2401,  2617,     0,  2163,  2442,  2649,  2621,  2626,  2607,  2594,
    2608,     0,     0,  2611,  2615,  2095,  1606,  2567,  2568,     0,
      79,  1749,  1750,  1748,  1035,     0,  2828,  1989,  1990,  1991,
       0,  2008,     0,  1141,     0,     0,   497,   488,     0,  1903,
    1902,     0,  1982,  2714,     0,     0,     0,  1752,  1799,     0,
    1751,  1977,     0,  1975,  1972,  1974,   244,     0,     0,   274,
    2179,  2613,  2383,  2585,     0,  2593,     0,  2708,  2705,  2715,
    2750,  2745,  2744,  2747,  2748,  1205,  2749,  1204,  2746,  2743,
    1214,  1200,  1202,  1203,   802,     0,     0,  2508,  2509,  2348,
    2369,  2407,  2510,  2455,     0,     0,  2529,  2489,  2494,  2490,
       0,     0,  1863,     0,   802,  1886,  1916,  1864,     0,     0,
    1916,     0,  1641,  1906,  1909,     0,  2512,  1877,   883,   882,
    1889,   881,  2513,  1902,     0,  1849,  1865,     0,  1826,  1870,
     112,  2514,     0,  1905,  1888,     0,  1887,  1641,  1916,     0,
    1842,     0,     0,     0,     0,     0,   250,  1069,  1069,     0,
       0,  1061,  1063,  1064,  1069,  1069,     0,  2829,  2830,  2565,
    1035,  2054,  2052,  2053,  2102,  2812,  2051,  2050,  2820,  2822,
    2808,  2810,  2817,  1183,     0,  2719,     6,    65,   129,  1214,
    1214,  2767,   583,   581,     0,  1933,  2770,  2771,  2769,   818,
       0,  1227,  2111,  2114,  2768,  2115,   182,   947,     0,   449,
     182,     0,     0,     0,     0,     0,   450,   451,   387,     0,
    1043,  1044,  1038,  1040,  1042,   944,     0,     0,   943,  2772,
       0,     0,  1156,  1158,  1157,  1174,   202,   199,   180,    80,
    1083,  1730,  1732,     0,  1129,  2704,     0,     0,  2706,  2710,
    1280,  1279,     0,   126,   132,     0,  2600,  2604,     0,     0,
    2114,  2676,     0,   130,  2664,     0,     0,     0,     0,  1801,
    1805,  1811,  1815,  1818,     0,     0,  1611,  1329,  1611,  1611,
    1611,  1499,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1611,     0,  1367,  1339,  1340,
       0,  1368,     0,     0,     0,  2074,     0,     0,     0,  2737,
       0,     0,     0,  1465,     0,     0,     0,  2737,     0,     0,
       0,     0,     0,     0,  1494,  1496,  2082,  1611,     0,     0,
    1611,     0,     0,     0,     0,     0,  1232,  1373,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1611,  1611,     0,     0,  1611,  1381,  2076,     0,     0,
       0,  2075,     0,     0,     0,  2048,  2068,     0,  1384,  1386,
    1385,     0,  1611,  1611,     0,     0,     0,  1319,  1318,  1320,
       0,     0,     0,     0,     0,     0,  1278,  1277,  1276,  1275,
       0,     0,     0,     0,  1284,     0,  1286,  1288,  1283,  1285,
    1287,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1321,     0,     0,     0,  2049,  1424,     0,  1738,  1717,  1725,
    1719,     0,  1904,  1720,  1722,  1729,   462,     0,  1726,  2116,
    2662,  1721,     0,  1713,     0,    72,     0,  1960,  1965,     0,
       0,     0,  1955,  1963,  1957,  1964,  1956,     0,     0,  1966,
     112,     0,  1958,  1962,  1961,  1937,  1940,  1947,  1938,     0,
       0,   275,   278,   280,     0,   283,  2614,  2612,  2646,  2645,
    2650,     0,  2647,  2643,  2606,  2636,  2677,  2640,     0,  2677,
    2642,  2641,  2677,  2637,  2644,  2677,     0,  2609,     0,  1607,
    1608,     0,  2566,     0,  2094,  1036,     0,     0,  1992,  1993,
       0,  1164,  2009,  2010,  2006,  1606,  2553,  2556,     0,   691,
    1215,   498,     0,     0,   509,     0,     0,    68,    69,     0,
    1148,     0,  1147,  1151,     0,  1087,  1090,     0,     0,  1755,
    1745,  1754,  1532,  1978,   112,     0,   242,   267,   262,   270,
     264,   266,   265,   271,   272,   273,   268,   263,   269,   256,
       0,     0,  2612,     0,     0,  2609,  2709,     0,  2711,  2728,
    1188,  2716,  1211,  1190,  1210,     0,  1201,   801,     0,   804,
     806,  1775,  1774,   805,   814,     0,   803,     0,     0,  2526,
       0,  2515,     0,   810,   812,   811,  2523,   809,     0,     0,
    2499,     0,     0,  1912,     0,     0,  1876,     0,   583,     0,
       0,     0,     0,     0,     0,  1843,     0,     0,   634,     0,
    1869,  1642,  1910,  1911,  1916,     0,     0,  1916,     0,  1882,
    1906,  1916,     0,  1916,  1838,     0,     0,  1830,  1835,  1831,
       0,  1837,  1836,  1839,  1827,  1828,     0,  1856,  1884,     0,
    1906,  1868,  1875,     0,  1855,  1862,     0,  1873,  1906,  1906,
       0,  1916,  1916,  1057,  1073,  1055,  1067,  1068,     0,     0,
    1060,  1059,  1823,  1535,     0,     0,  2809,  2823,  2807,  2818,
    2819,  2806,  1184,  2720,  1182,  2721,     0,     7,     4,  1214,
    1214,  1214,  2764,     0,  2752,  2759,  2760,  2763,  2762,  2761,
    2758,     0,  2751,  2754,  2755,  2757,  2756,  2772,     0,  1923,
    1924,  1925,  1926,  1927,  1922,  1920,  1934,  1935,   819,   818,
     574,   577,   576,     0,     0,  2113,     0,   939,     0,  1904,
     937,     0,     0,  1904,   398,  1904,   452,   931,  1041,   951,
       0,     0,   941,  1101,  1102,  1105,     0,     0,   486,  1174,
    1160,  1176,     0,   203,   205,     0,  1085,  1084,     0,  1082,
    1139,  1137,  1136,  1134,     0,  1135,  1133,  1124,  1130,  1131,
    2703,  2707,   584,   818,  1904,     0,     0,   131,     0,   390,
       0,     0,   888,   888,   888,  1807,  1734,  1532,  1736,  2093,
       0,     0,     0,  1813,     0,     0,  1612,  1611,     0,  1474,
       0,     0,     0,     0,  1500,     0,     0,     0,     0,     0,
       0,     0,     0,  1305,     0,     0,     0,     0,     0,  1445,
       0,  1474,  1228,  1686,  1687,  1671,  1672,  1670,  1673,  1225,
       0,  1674,  1685,  1396,     0,     0,     0,     0,     0,     0,
    1582,  1583,  1584,  1585,  1593,  1586,  1587,  1588,  1595,  1600,
    1589,  1590,  1596,  1597,  1598,  1591,  1599,  1594,  1592,  1601,
       0,  1581,     0,  1604,  1602,  1605,  1603,     0,  1466,  1458,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1611,     0,     0,     0,  1611,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1407,     0,     0,     0,     0,     0,
    1611,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1363,     0,  2085,  2084,     0,     0,     0,   851,     0,
    1323,     0,  1322,  1544,     0,  2722,  2738,     0,  2515,  1461,
    1463,     0,  1230,  1229,  1231,  1242,  1235,  1240,  1233,  1237,
       0,  1289,  2185,  1243,     0,     0,  1271,  2737,  1620,  1272,
    1257,  1262,  1263,     0,  1260,  1261,     0,  1265,     0,  1264,
    1268,  1269,  1270,  1273,     0,     0,     0,     0,  1312,  1317,
    1493,  1214,  2086,     0,     0,   462,   465,   464,  1727,   463,
    1776,     0,  1045,     0,     0,    74,    76,  1952,  1949,  1948,
    1950,  1954,   112,  1959,  1951,     0,  1967,  2232,  2458,  2461,
     287,     0,   260,   259,   261,   284,     0,     0,  2639,     0,
    2620,     0,  2624,  2618,  2622,  2602,     0,     0,  2610,     0,
    2648,  2631,  2635,  2634,  2632,     0,  2633,  2638,  2616,  1610,
    2266,  2352,     0,  1613,  2570,  1742,  2827,  1994,  2472,  1995,
    1987,     0,  2007,     0,     0,     0,  1142,   692,     0,  1214,
     496,   495,   494,   493,     0,   511,   491,   499,    70,     0,
       0,  1983,     0,     0,     0,     0,     0,  1091,  1753,     0,
       0,  1733,  1533,  1979,  1973,     0,     0,     0,     0,     0,
    2666,  2591,     0,     0,     0,  2712,  2730,  2729,  2717,  1214,
    1632,  1215,  1215,  2082,  2531,     0,  2525,  2524,     0,     0,
       0,  2544,  2527,     0,     0,  2493,  2532,  2533,  2536,     0,
       0,     0,     0,     0,  2530,  2455,  2495,  2496,     0,  2501,
    2491,  2550,  2551,  2548,  2549,  2547,  2520,  1883,     0,  1914,
    1917,  1918,     0,     0,  1897,  1891,  1890,  1880,  1892,  1881,
    1901,  1900,  1899,  1853,  1852,  1654,  1655,  2410,  1653,  1645,
    1648,  1652,  1651,  1846,  1907,  1896,  1894,  1878,  1916,  1851,
    1850,  1895,  1893,  1832,  1833,  1834,     0,  1641,     0,  1912,
    1885,  1916,  1906,     0,  1916,  1916,  1898,  1872,  1874,  1058,
    1075,  1074,  1070,  1071,  1076,  1066,  1065,  1553,  1552,     0,
    1507,     0,  1509,  1506,  1505,  1504,     0,  1552,  2813,  2821,
    2825,     0,  1641,  2727,  2725,     0,     0,     0,   583,     0,
       0,  2753,   115,   575,  1776,  1776,     0,  2112,     0,     0,
       0,     0,     0,     0,     0,   183,   192,     0,     0,   396,
     397,  1776,   395,   438,   439,   442,   443,   444,     0,     0,
       0,     0,     0,     0,     0,     0,   136,   445,  1776,  1776,
     392,   418,   419,   422,   423,   424,   425,   426,   388,     0,
     393,   818,     0,   953,   955,  2773,  2774,  2775,     0,     0,
    1104,  1163,  1155,  1162,  1159,  1174,  1172,  1161,   878,   877,
       0,  1175,   201,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    81,    82,   100,  1731,     0,
    1126,  1138,  1132,   127,   818,  1776,  1776,  1776,  1776,   394,
     427,   428,   431,   432,   433,   434,   437,   435,   436,     0,
    2605,     0,     0,  1904,     0,  2668,  2669,     0,  2665,   889,
       0,     0,     0,     0,     0,  1802,     0,  2096,  1812,  1535,
    1816,  1815,     0,  1392,     0,  1438,     0,  1440,  1441,  1442,
       0,     0,     0,     0,     0,  1393,     0,  1337,  1394,  1395,
       0,  1389,     0,  1390,     0,     0,     0,     0,     0,     0,
       0,  1444,     0,  1226,     0,     0,  1341,  1342,  1334,  1326,
       0,  1417,     0,     0,  1343,     0,     0,     0,     0,  1398,
       0,  1418,  1495,     0,  1497,  2086,     0,  1450,  1399,  1348,
       0,  1448,     0,  1349,  1419,  1420,  1421,  1401,  1402,     0,
    1423,     0,  1403,     0,     0,  1406,     0,     0,  1351,  1454,
    1452,     0,     0,     0,     0,  1456,  1353,     0,     0,     0,
    1352,     0,     0,     0,     0,     0,     0,     0,  1355,     0,
    1335,  1453,  1455,  1409,     0,     0,     0,     0,     0,  1364,
       0,  2731,  1543,  2739,  1544,     0,     0,  2733,  2723,  2728,
    2736,  1327,     0,     0,  2087,  1236,  1241,  1234,  1238,  2737,
       0,     0,     0,     0,  1255,  1254,     0,     0,     0,  2737,
    1620,  1258,     0,     0,  1434,  1435,  1490,     0,  1718,  1715,
    1728,  1777,     0,  2663,  1047,  1046,  1724,  1045,    77,     0,
    1953,  1946,  1968,  1941,     0,   279,   288,   281,   285,   286,
     282,  2681,     0,  2680,     0,     0,  2599,  2658,  2661,  2093,
       0,     0,     0,  2574,  2581,  2577,  2582,  2575,  2576,  2580,
    2583,  2584,  2571,  2578,  1614,  1643,     0,  1996,  1165,  1167,
    1168,  1166,  1174,     0,     0,  2559,  2560,  2558,  2557,   501,
       0,   510,     0,   522,     0,     0,     0,  1985,  1984,     0,
    1149,  1152,  1153,  1098,  1096,  1095,  1097,  1086,  1092,  1093,
     567,  1759,     0,     0,     0,  1765,  1746,  1756,     0,  1980,
    1976,     0,   257,  2592,     0,     0,     0,     0,     0,     0,
       0,  1209,  1535,  1704,  1206,  1194,  1643,  1633,  1193,  1216,
    1212,     0,   817,   816,   815,   813,     0,     0,     0,     0,
    2538,  2539,     0,     0,  2516,  2517,  2518,     0,  2521,  2498,
    2499,     0,  2500,     0,  1913,     0,  1857,     0,  1879,     0,
       0,     0,     0,  1848,     0,  1871,  1829,  1914,  1847,  1613,
    1906,  1844,  1845,  1073,     0,  1056,  1552,  1535,     0,     0,
    1527,  1554,     0,  1554,  1529,  1530,  1535,     0,  1535,  1532,
    1549,     0,     0,  2824,  1634,  2726,     0,  2801,     0,     0,
       0,   181,   587,     0,     0,   935,   186,   189,   187,     0,
     188,     0,     0,   447,   446,     0,  1904,   440,   140,   139,
     141,   142,  1668,  1669,  1665,  1666,  1664,  1667,   144,   143,
     138,   950,     0,     0,     0,  1904,   420,   399,   400,   403,
     404,   405,  1033,  1776,  1033,     0,  1776,  1776,  1033,  1776,
       0,     0,  1776,  1776,     0,     0,  1776,     0,     0,  1033,
       0,  1776,     0,  1020,     0,     0,  1776,  1776,  1776,  1776,
    1776,  1033,     0,     0,  1776,  1776,   486,  1776,     0,     0,
    1051,     0,     0,  1776,  1776,  1776,  1776,     0,     0,  1776,
    1776,     0,  1776,   967,  1019,   589,   616,   617,   932,   966,
     968,   980,   482,     0,   998,  1022,  1023,  1021,     0,     0,
       0,     0,   150,  2777,  1103,     0,     0,  1573,   204,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1140,     0,     0,     0,     0,  1904,   429,  2601,     0,
       0,  1776,   389,   406,   407,   410,   411,   412,   413,   414,
     417,   415,   416,     0,  2672,  2674,     0,     0,   890,     0,
       0,     0,  1735,  1815,  1535,  1613,  2094,  1613,     0,  1814,
       0,     0,  1439,  1475,     0,  1501,     0,  1331,   775,   775,
     775,  1484,   760,  1488,  1479,   775,  1480,   775,  1482,     0,
       0,     0,  1291,  1306,     0,     0,     0,     0,     0,  1446,
    1443,     0,     0,     0,     0,  1469,     0,     0,     0,  1336,
       0,  1429,  1451,  1449,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1457,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     840,   846,   849,   850,   852,   844,     0,  1411,  1324,  1214,
    2740,  2742,  1185,     0,  2732,  2734,   926,  1462,     0,  1252,
    1248,     0,  1246,  1619,  1267,  1266,     0,     0,     0,  1256,
    1215,  1425,  1214,     0,  1491,  2088,  1716,   461,   633,  1714,
      75,  1944,     0,  1939,  1942,     0,     0,  2678,     0,  2689,
       0,     0,     0,     0,     0,     0,     0,     0,  2569,  1644,
    1786,     0,  1174,  1178,  2103,  2000,  2562,  2563,  2561,     0,
     502,   503,   505,  1215,   519,   497,     0,   489,   492,     0,
     501,     0,     0,  1088,  1094,  1199,     0,  1778,  1763,  1770,
    1764,     0,     0,     0,  1762,  2078,  2077,  2084,  2715,     0,
    1579,     0,     0,  2590,  2667,     0,     0,     0,  2718,  1613,
    1613,  1698,     0,     0,  1191,  1196,  1192,  1195,     0,  1213,
    1220,  1219,  2079,  2086,  2528,     0,     0,     0,     0,  2543,
    2537,  2534,  2535,     0,  2497,  2519,  2503,  2502,  2505,  2507,
    1678,  1679,  1677,  1675,  1676,  1915,  1641,  1867,  1866,  1656,
    1647,     0,  1650,  1649,  1840,  1859,  1861,  1916,  1072,     0,
    1079,  1077,     0,  2722,  1547,     0,  1531,  1528,  1555,     0,
    1554,  1554,  1535,     0,  1511,  1790,  1793,     0,  1510,  1606,
    1537,  1199,  2814,  2826,     0,     0,     0,   383,   382,     0,
     145,  2795,     0,     0,   671,   116,   473,   482,   588,   591,
     632,   631,   191,   190,   196,   197,  1682,  1683,  1680,  1681,
     453,   466,  1684,   467,   441,   137,   454,   455,   421,     0,
     401,  1034,   923,   583,  1002,     0,   672,   583,   874,   879,
     879,   583,     0,     0,  1143,     0,     0,  1737,     0,     0,
    1143,     0,     0,     0,  1776,     0,  1013,   962,     0,  1737,
       0,  1737,  1737,  1014,     0,     0,   963,  1776,     0,     0,
       0,     0,     0,  1737,  1143,     0,     0,     0,   484,     0,
    1143,   982,  1054,  1052,  1053,     0,  1143,  1143,     0,     0,
       0,     0,   622,   623,   621,     0,     0,     0,   614,   590,
     818,   964,   483,   965,   671,     0,  1048,   668,   674,  2089,
       0,     0,   160,     0,     0,   952,     0,   153,   151,   162,
       0,     0,  1107,     0,  1106,     0,  1576,     0,  1577,  1574,
    1575,   101,    88,    84,   105,   106,    86,    87,    91,    90,
      92,    93,    96,    97,    94,    89,    95,    85,   109,   111,
     110,    98,   107,   108,    83,   460,   459,   458,   457,   430,
       0,     0,     0,  1904,   408,  2673,  2671,  2670,     0,   916,
     918,   917,   904,   903,   117,   120,   123,     0,  1613,  1632,
    2097,  1806,     0,  1365,  1502,     0,     0,   776,  1476,   826,
    1486,     0,  1487,   762,   761,   777,  1478,  1481,  1485,  1483,
    1330,  1338,  1387,     0,  1304,  1388,     0,  1416,  1333,  1332,
       0,     0,     0,  1371,  1372,     0,  1467,     0,     0,  1345,
       0,  1347,     0,     0,  1431,  1400,  1422,  1374,  1404,     0,
    1350,  1325,     0,  1375,     0,  1380,  1378,     0,  1354,     0,
       0,  1361,     0,  1359,     0,  1360,     0,  1362,  1408,  1410,
       0,     0,   851,   837,   838,   839,     0,   841,   843,   845,
       0,     0,  1545,  2741,  1186,     0,     0,  1464,  1244,     0,
    1253,  1250,     0,  1247,  1216,  1436,  1426,     0,     0,   296,
     291,   299,   293,   295,   294,   300,   301,   302,   303,   297,
     292,   298,   290,   289,  2679,     0,  2598,  2603,  2660,  2659,
    2682,  2682,  2682,     0,  1615,     0,  1743,  1169,  1174,  1178,
       0,  1170,  2011,   506,     0,     0,     0,   526,     0,   524,
     500,     0,  1150,  1099,  1214,  1760,  1772,     0,  1780,     0,
       0,  1757,  1767,     0,     0,     0,  1766,   486,     0,   258,
       0,  2587,  2588,  2586,  1643,  1621,     0,     0,  1710,     0,
    1705,  1207,     0,  1218,  1217,     0,  2546,  2545,  2541,  2540,
    2542,  2522,     0,     0,  1858,  1646,  1641,  1854,     0,     0,
    2728,  1606,  1539,  1535,  1508,  1535,     0,     0,  1516,  1535,
    1512,  1514,     0,  1613,     0,  1571,  1214,  2081,  1635,  1638,
       0,  2802,   386,   384,   385,     0,     0,   206,   649,   650,
     648,   647,     0,   474,     0,     0,     0,   651,   652,   654,
     655,  2011,   481,   818,   592,   402,   673,   924,  1143,     0,
       0,     0,   879,   667,   583,   923,   888,   880,   583,   583,
    1000,  1029,  1030,     0,     0,   600,   597,     0,   609,   983,
     974,   984,   995,   997,     0,   599,   624,     0,     0,   612,
    1737,     0,  1011,     0,     0,   594,     0,     0,   643,   644,
     642,   618,   625,  1031,  1032,   595,   596,     0,     0,  1628,
    1630,  1638,   602,   601,  1689,  1688,   611,     0,   598,     0,
    1017,   990,     0,   640,   638,   635,   637,   636,   641,   639,
     613,   604,   603,   606,   605,   608,   607,   610,   626,   979,
       0,  1033,  1033,   999,     0,  2092,     0,  1050,  1001,     0,
     656,   669,   657,     0,     0,   630,   629,   627,   628,   161,
     149,     0,     0,   954,   956,     0,     0,   957,  2779,     0,
    2781,  1109,  1110,     0,     0,  1177,     0,     0,   102,   104,
       0,   391,   456,   409,  2675,     0,     0,     0,  1815,  1808,
    1657,     0,  1503,     0,     0,     0,     0,   820,   831,   829,
     823,     0,   827,   828,  1477,     0,     0,   778,  1489,   742,
     775,  1301,   760,  1295,  1297,  1293,     0,   743,  1296,   775,
       0,   826,  1300,  1292,     0,  1447,     0,     0,  1470,     0,
       0,     0,     0,     0,     0,     0,  1328,     0,  1427,     0,
       0,     0,     0,     0,     0,  1358,  1356,  1357,   835,  1413,
       0,   848,   842,   840,   847,     0,  1643,  2722,   927,  1249,
       0,  1437,  1945,  1969,     0,     0,  2687,  2687,  2687,  1785,
    1784,     0,  1783,  1787,  1171,  1179,  2013,  2012,     0,   504,
     507,     0,   499,     0,   523,     0,   490,   568,     0,     0,
       0,  1781,  1769,  2719,  1758,  1761,  2086,  1534,  1580,  2589,
    1198,     0,  1616,  1709,  1706,     0,  1699,  1701,  1703,     0,
    2080,  2504,  2506,  1860,  1078,  1080,  1540,  1538,  1548,     0,
    1504,  1535,  1535,     0,  1504,     0,     0,  1792,  1632,  1794,
    1536,  1568,  1550,     0,  1639,  1640,  1637,     0,   217,  1214,
       0,     0,   207,   209,   210,     0,     0,   471,   468,   671,
     470,   570,   593,   985,     0,   583,   875,   876,   888,   925,
       0,   888,   888,     0,     0,   973,  1004,  1129,     0,   978,
     814,   619,     0,   969,  1012,  1045,     0,   620,  1006,   971,
       0,  1631,   485,   970,   992,   976,  1967,  1003,  1049,   856,
     756,   705,   696,   775,   699,   698,   775,   710,   760,   758,
     728,   760,   760,   735,   734,   752,   738,   718,   826,   826,
     717,   755,   826,   739,   737,   741,     0,   743,   760,   748,
     736,   740,   757,   733,   730,   754,   775,   775,   775,   714,
     753,   826,     0,   746,   775,   675,   779,   716,   826,   833,
       0,     0,   775,   777,  2091,   147,   152,   163,   164,   945,
    2778,     0,  2776,     0,  1115,     0,  1173,  1578,    99,     0,
       0,     0,     0,     0,     0,  1803,  1366,   773,   771,   774,
     772,   822,   821,   825,     0,   824,   833,     0,     0,  1303,
    1298,   744,  1302,  1294,  1299,  1391,  1369,  1370,     0,  1468,
    1459,  1397,     0,  1346,  1428,     0,     0,  1405,  1376,  1379,
    1377,  1382,  1383,     0,  1412,     0,  1206,  1206,   645,  2735,
    1251,     0,  1943,  2690,     0,     0,  2686,  2684,     0,  2685,
    2683,  2651,     0,  2596,  2597,  2595,  2579,     0,     0,     0,
    1214,   512,     0,   529,   528,   525,  1643,  1771,  1773,  1779,
    1768,     0,  1617,  1632,   807,  1702,     0,  1208,     0,  1517,
       0,  1521,  1526,  1522,     0,  1513,     0,  1657,  1572,     0,
    1643,  1638,     0,   220,   218,   219,     0,   213,   215,   210,
    2789,     0,  2796,     0,     0,  2794,   475,  2719,   587,   653,
     571,     0,   987,     0,     0,     0,     0,     0,     0,  1016,
       0,     0,   975,   996,  1018,  1010,  1009,     0,     0,  1143,
    1629,   991,   993,  1091,     0,     0,   860,   704,   697,   715,
     713,   764,   759,     0,   764,   764,   724,   742,   719,     0,
     826,   732,   723,   744,   747,   749,   751,   764,     0,   826,
     712,   711,   721,   708,   764,   787,     0,     0,     0,     0,
     783,     0,   854,     0,   790,     0,   676,   780,   782,     0,
       0,     0,   745,   826,   701,   834,   833,   703,   826,   833,
     764,   764,     0,   154,   958,   323,  2780,  1189,     0,  2785,
       0,  1116,  1112,  1113,  1108,   103,   135,     0,  1638,   921,
       0,     0,  2410,  1658,  1809,   832,   830,     0,  1471,  1638,
       0,  1430,  1432,   836,     0,  1546,   646,     0,  2657,  2656,
    2655,  2652,     0,     0,     0,     0,     0,     0,  2688,  2692,
    1782,     0,     0,     0,   520,     0,     0,   554,   569,  1625,
    1638,     0,  1643,     0,  1707,  1700,  1541,     0,     0,     0,
       0,     0,  1791,  1560,  1561,     0,     0,  1566,  1570,  1551,
    1636,  2793,  2803,   217,     0,     0,   158,     0,   208,   814,
     211,   472,   482,     0,   477,     0,     0,   986,   670,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1015,
    2056,  1048,   486,  1007,   972,     0,   977,   615,     0,   859,
       0,   864,   768,   769,   770,   725,   765,   767,     0,   727,
     695,   720,   750,   726,     0,   722,   709,   793,   792,  1221,
     785,   800,   680,     0,     0,   791,   677,   781,   789,   784,
       0,   700,   702,   706,   707,   693,   694,  2090,     0,   156,
     349,     0,   335,   321,     0,     0,     0,   325,   165,   168,
     166,     0,   167,   173,     0,   174,   175,   176,   177,   178,
     169,   347,   348,   172,   170,   171,     0,  2106,     0,  2107,
    2783,     0,     0,  2782,  1111,     0,  1118,   891,     0,   920,
       0,   893,   895,  1659,     0,  1214,  1804,   763,     0,  1473,
    1344,  1414,  1970,  2653,  2693,  2696,  2694,  2695,  1661,     0,
    2697,  2691,     0,  1532,  1215,     0,   513,     0,   516,   518,
     532,     0,  1776,  1776,     0,     0,  1776,  1776,  1776,  1776,
     547,   555,   557,     0,  1626,  1627,     0,  1622,  1624,  1618,
    1690,   808,  2014,  2722,  1518,     0,  1523,     0,  1515,  1556,
    1556,  1567,   184,   214,     0,     0,   150,   159,  2797,   798,
    2011,     0,  2715,   989,     0,     0,     0,   658,     0,     0,
    2058,  2057,  1005,   981,  1048,     0,   857,     0,   861,   862,
     863,     0,   855,   766,     0,   928,     0,     0,   799,  1221,
     788,     0,   797,   796,   794,   795,   155,     0,   148,     0,
       0,   334,   337,     0,     0,   340,   330,   329,   331,     0,
     324,   323,   323,   377,   328,   374,   373,   366,  2719,     0,
       0,     0,  1117,  1122,     0,  1119,  1121,     0,  1776,   118,
     892,   912,   911,   897,     0,  1638,     0,     0,   121,   894,
     914,   901,   124,   896,   913,   899,  1660,  1810,  1638,  1663,
    1662,  1788,  1796,     0,  2001,     0,   521,   514,     0,     0,
     530,     0,     0,  1776,  1776,     0,     0,     0,     0,     0,
     527,   556,  1776,  1638,     0,  1197,     0,  2022,  1542,     0,
       0,     0,  1564,  1562,  2804,   216,  1214,   162,     0,   469,
     479,   478,   988,     0,   664,   891,   660,   662,  1008,     0,
     858,     0,     0,   826,     0,   826,  1222,     0,   786,  1214,
     157,   350,   361,   364,   356,   336,     0,     0,     0,   326,
     323,     0,   310,   308,   309,   315,   316,   317,   318,   319,
     320,   311,   314,   312,   313,   323,     0,   225,     0,     0,
    2784,     0,  2786,     0,  1114,     0,   906,     0,  1024,   898,
       0,   919,   922,     0,  1024,   902,  1024,   900,  1472,     0,
       0,   807,   508,   520,   517,   540,   533,   536,     0,   566,
     560,     0,     0,   562,   563,   561,   558,   551,     0,   549,
       0,  1623,  1691,     0,     0,     0,     0,  2015,  2017,     0,
    1708,  1520,  1525,     0,  1557,     0,     0,     0,   194,   193,
     185,     0,   323,  2790,     0,  2798,  2719,   666,   891,   659,
     893,   895,     0,   870,     0,   869,     0,   866,   865,   729,
     929,   731,  1223,     0,     0,     0,   323,   357,     0,   332,
       0,     0,     0,     0,   223,   380,     0,   221,   368,   368,
    2787,  2788,  1120,   905,   119,  1026,  1025,   910,   909,   907,
     908,   915,   122,   125,  1795,  1797,  2002,   515,   540,     0,
     538,     0,   534,   531,   535,   564,   565,     0,   548,     0,
     559,     0,     0,     0,     0,     0,  2016,     0,     0,  2023,
    2025,  1559,  1558,  1573,     0,   195,  2805,     0,   164,   184,
     480,   665,   661,   663,   994,   872,   873,   871,     0,     0,
     681,   358,   364,   354,   362,   323,     0,     0,   322,   341,
     376,   224,     0,   378,     0,   323,     0,   367,   369,   371,
    1028,  1027,  2028,   537,     0,   545,   541,   543,   546,   554,
     553,   550,  1214,  2020,  2021,     0,  2018,     0,     0,  2024,
       0,     0,     0,   146,  2799,     0,     0,   683,   682,   684,
       0,   355,     0,     0,   353,   333,   338,   323,     0,   323,
     236,   235,     0,   227,   304,   375,     0,   226,     0,  2014,
     539,     0,     0,   552,     0,     0,  1694,  1696,  2019,  2027,
    2026,  1565,  1563,  2791,   323,   868,   867,     0,   688,   678,
     685,   687,   359,     0,   323,     0,   323,     0,   323,     0,
       0,     0,     0,     0,   222,     0,  2022,   544,   542,  1215,
    1692,  1214,   323,  2800,   690,   689,   686,     0,   351,   323,
     339,   344,   381,     0,   230,   305,   306,     0,   233,     0,
    2030,  1697,  1695,  2792,   323,   323,   340,   343,   379,     0,
       0,   228,   229,   241,   240,   232,     0,  2029,     0,  2034,
     323,   323,   345,   249,   247,   323,   237,   245,   239,     0,
     246,   307,   234,     0,     0,  2041,     0,   231,   248,  2032,
    2033,  2031,  2036,     0,     0,  2038,  2039,     0,  2003,   238,
    2040,  2035,     0,  2042,  2044,     0,  2037,     0,  1214,  2043,
       0,  1215,  2045
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -4104, -4104, -4104, -4104, -4104,   135, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104,  1948, -4104, -4104, -4104, -4104, -4104,
    1625, -4104,   510, -2403,  -504,  3323, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104,   792,  1739,  3276,
   -4104,   408, -4104,    54, -4104, -4104, -4104, -3006,   -75,  -275,
   -4104, -4104,   791,    23,  3265,  -273, -4103, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,   418,   415, -4104, -4104,
     246, -4104, -4104, -1565, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104,  -445,  -407,  1776, -4104, -4104, -4104,  4284, -4104,
    3735, -4104, -1824,  2398, -4104, -4104, -4104, -4104, -4104,  2469,
   -1771, -4104, -4104, -4104,  1502, -4104, -4104, -4104,  -447,   331,
   -4104,   334, -4104,   337, -4104,   339, -4104,   340,   343,   344,
     345, -4104,   347, -4104, -4104,  -406, -4104, -4104, -4104, -4104,
     348, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  -269, -4104,
   -4104,   -65, -4104, -4104,  -253,   355, -4104,  -188,   358, -4104,
     359, -4104,   -83, -4104,   -79, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104,  3262, -4104, -4104,
   -4104, -2143, -4104, -4104, -2247,  2786, -4104, -1835, -4104, -4104,
   -1923, -4104, -4104, -1827,  -673, -4104, -4104,   525,   444, -4104,
   -1408, -2027, -2017, -4104, -4104, -4104, -2095, -2084,  -789,  2535,
   -1219, -2345, -4104, -4104, -4104, -4104,   103, -4104, -4104,   282,
    1733,  2258, -4104, -2550, -4104, -4104,   919, -4104, -4104,  1515,
     755,  1514, -4104,  1087,  3012, -1285, -4104, -4104, -4104, -4104,
   -4104, -4104,    14,   333,   -86, -4104, -3837,   765, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -2802, -4104, -4104, -4104,
    -293, -4104, -4104,  -187, -4104, -4104,  -248, -4104,   157, -2376,
   -4104, -4104, -4104, -4104,  2770, -1405, -4104,  3764, -4104,  -501,
   -4104,   481,  1765, -2722, -2016, -4104,  -943,  -941, -2972, -4104,
   -4104, -4104, -2178,  1031,  1318, -4104,   715,  1762, -2468, -4104,
   -4104, -4104, -4104, -4104,  1320, -4104, -4104,   477, -4104,   471,
   -4104, -4104, -4104, -4104, -4104,  -290, -4104,    -8, -3020, -4104,
   -4104, -4104, -3008,  1229,   664, -4104, -4104, -4104, -1406, -2981,
    -431, -4104,   288, -2567, -2526,   632, -4104, -4104,   429, -3752,
   -4104,  -590, -2157, -2469,   -52, -4104, -4104,   441, -3442,  1877,
   -4104, -4104, -4104, -3436, -3478,  1633, -4104, -4104,  1184, -4104,
   -1352,  1185, -4104, -4104, -4104,  1191, -4104,    24, -4104, -4104,
   -4104, -4104, -3297, -4104, -4104, -1571, -2749, -4104, -4104,  4419,
    4420, -1586, -2395, -4071,   -88,   -87, -4104, -4104, -4104,  2234,
   -1633,    95,    84,    89,  1732,  -364,   243,  1037, -1621, -4104,
     306, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  1801,  -761,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -2436, -2919, -4104,
   -4104,  1364, -4104, -4104, -4104, -2651, -2089, -2086, -2437,  3425,
   -4104, -4104, -4104, -4104,  3373, -2285, -3096, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104,  2928,  -591, -4104, -4104,  1939, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,   508,  2014,
   -4104, -4104, -4104, -4104, -4104,  2327, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104,     2, -4104, -4104, -4104, -4104, -4104,
     751,  2840, -4104, -4104, -4104, -4104,    -9, -4104, -4104, -4104,
   -4104,  2536, -4104, -4104, -4104, -4104,  2864, -4104, -4104, -4104,
   -4104, -4104, -4104,  1615, -4104,  2050, -4104, -1555, -4104, -4104,
    1176, -1035,  2009,  -611,  2143,   463, -4104,  3851, -4104, -4104,
   -4104, -1740, -2529, -4104,  3533,  -764, -2716,  2523,  -573, -1932,
    1219,   176,  1607,  1503,  4173, -4104, -1178, -1122, -4104, -4104,
    -668, -4104, -4104, -4104, -4104, -4104,  2242,  2247,  -628, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
    1658, -4104, -4104, -4104, -4104, -1263, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104,  1487, -4104, -2132, -4104, -4104,  -446, -4104,
    3311, -4104, -4104, -4104, -2399, -1982,  1950,  1129, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104,  1959, -4104, -1613, -4104, -2846,
   -4104, -4104, -4104, -4104, -4104,  2168, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -1624, -4104, -2032,   247, -4104,   428, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  -107,   986,   -85, -3256,
   -1125,  1882, -4104, -4104, -1326,  3365, -2351, -4104, -4104, -4104,
    2161, -4104, -4104, -4104, -4104, -4104,   788, -3035,  2977, -4104,
   -4104, -3302,  -961, -2346,  -934, -4104, -1424,  1571,   617, -4104,
   -1973, -1128, -1443, -2987, -2497, -4104,  1439, -4104, -4104, -4104,
   -4104,  -205, -4104, -4104, -4104,   633,  2053, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104,  -510,  -925, -4104,
   -4104,  2317,  -492, -4104,  3489, -4104, -4104,  3491, -4104, -4104,
   -4104, -4104,  3166,  3133,  2119, -4104, -4104, -2378, -4104, -4104,
    2081, -4104,   898,  -944,   567,  1218, -4104, -4104,  1220, -3286,
   -4104, -4104,  3493, -4104, -4104, -4104,  1167, -4104,    61,  3921,
    3497, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  2892,
   -1089,  3846, -4104, -4104, -4104, -4104, -4104, -4104,  2512, -4104,
   -4104, -4104, -4104, -4104, -4104,  3075,  3945,  -597, -1323, -4104,
    -750,  2515,  2038,  -899, -4104, -4104, -4104, -4104,  3950, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,  2697,
     821, -4104, -4104, -4104, -4104,  3154, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104,  1258,  -128, -4104,
      56,  -161, -4104,   -33, -4104, -4104, -4104, -4104, -4104,  -235,
   -4104, -4104,  -239, -4104, -1027,  3776, -1429,   581, -1304, -2592,
   -4104,  1247,  3139, -3341,  -698, -1198, -1209, -2810,    71, -4104,
   -4104,  3460,    57,   289,  -203,    -6, -2883,   -54,  -626,  -614,
    -741, -4104, -2518, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104,  2073, -4104, -4104, -4104,  1223, -4104,  3969, -4104,  2774,
    1224,  3971, -1399,  2594,  2087,  2090, -4104, -4104,  2097, -1983,
   -4104, -4104,   189, -4104,  2669, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104,  3742,  -476,  -459,  3168,  3985,  3656, -4104,  3230,
   -4104, -4104, -4104, -4104, -4104,   537, -4104,   876,  2125, -1267,
   -2367, -4104, -4104,  2959,   973, -4104,  1743,  -144,  -467, -4104,
   -4104,   534, -4104, -4104,   316,  3994,  3661, -4104, -4104, -4104,
   -4104, -4104, -2808,  -927, -4104, -3520, -2867, -1754, -4104, -4104,
   -2225, -3117, -4104, -4104, -1072, -4104, -4104, -4104, -4104, -2081,
   -4104, -4104, -4104,   -24,  3963,  3977,  3978, -4104,  -779, -4104,
   -4104, -4104, -4104, -4104, -4104, -4104,  3552, -4104, -4104, -4104,
   -4104,  3579, -4104, -4104, -4104, -4104, -4104,  3592, -4104, -4104,
   -4104, -4104, -4104,  1818, -4104, -4104, -4104, -4104, -4104, -4104,
   -4104, -4104, -4104
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    59,   625,  1538,    60,    61,    62,    63,    64,  1377,
      65,   840,  1295,  1845,  1846,    66,   565,    67,  1605,  2165,
    2166,  3517,  3518,  2167,   663,   664,    68,  2542,  3525,  4458,
    3526,  4464,  3527,  4466,  1623,   628,   536,  2105,  2106,  1542,
    3376,  3095,  4003,  3099,  4159,  4308,  4266,  2123,  3507,  4004,
    4005,  4168,   560,  2540,  1577,  4394,  2085,  4510,  2086,    69,
     661,  1087,  1602,  1603,  3681,  3682,  3914,  3683,  3906,  3907,
    3908,  3909,  4625,  4430,  4547,  4626,  4711,  4749,  4755,  4756,
    4672,  4765,  4766,  4767,  4753,   917,  4768,    70,   588,   589,
     919,  1409,  1860,  1410,    71,    72,   559,  1321,  1322,  1323,
    1324,  2380,  1861,  2375,  2376,  3272,  4673,  4751,  4431,  4432,
    4315,  4433,  4171,  4434,  4319,  4435,  4174,  4436,  4437,  4438,
    4439,  4617,  4440,  4314,  4665,  4427,  4428,  4667,  4731,  4747,
    4441,  4181,  4309,  4534,  4182,  4310,  4612,  4423,  4613,  4660,
    4727,  4424,  4535,  4663,  4538,  4442,  4448,  4627,  4443,  4449,
    4444,  4186,  4326,  4447,  4324,  4446,  4669,  4622,  2979,  3375,
     648,   649,   678,  2193,   650,  1104,  1057,  1579,  2118,  2119,
    2577,  2578,  2692,  2693,  2694,  2110,  2111,  2112,  2179,  2180,
    2181,  2092,  2093,  2094,  1583,  2089,  2090,   651,  1058,  1068,
    2113,  2114,  2115,  2698,  2183,  2184,  2185,  2186,  2116,  1838,
    2117,  3000,  2985,  3918,  3917,  2986,  3690,  4272,  4516,  3391,
    3392,  3082,  3457,  2136,    73,   577,   897,  1374,  2424,  1375,
    2426,  2859,  2860,  2861,  1910,  1911,  3871,  1915,  2423,  4054,
    4473,  4227,  4228,  2863,  4226,  2867,  3298,  3299,  3623,  3873,
    4057,  4478,  4369,  4573,  4476,  4569,  4477,  4571,  4682,  4636,
    4637,  4380,  4488,  4489,  4577,  4639,  4240,  4241,  4242,  2445,
    2875,  3876,  3921,  2173,  1569,  1570,   629,   630,   631,  3405,
      74,  2987,  2634,  2988,  2989,  3480,  2636,  2637,  2827,  1467,
    3470,  3441,  3846,  3382,  3386,  3387,  3388,  3389,  3390,  4405,
    4520,  4521,  4518,  3490,  3403,  3015,  3016,  3087,  3493,  3775,
    4301,  3985,  4659,  4699,  4700,  4701,    75,   894,  4089,  3953,
    3968,  3777,  3778,  3779,  3780,  3781,  3782,  3783,  3172,  3173,
    4125,  4126,  4127,  3167,  3168,  3548,  3986,  3987,  3988,  4090,
    4140,  3541,  1433,  1434,  4064,  1445,  1446,  2473,  1956,  2474,
    1573,  3542,  3543,  3544,  3997,  3231,  3843,  3237,  3238,  3239,
    2790,  2791,  2792,  2793,  2794,  2318,  3989,  3492,  3946,  4118,
    4121,  4292,  4527,  3017,  3404,  3018,  3408,   999,   537,  3019,
    3020,  2199,  2200,  4339,  4348,  4352,  4340,  4353,  4349,  4341,
    4342,  4343,  4355,  4351,  3152,  4017,  4018,  3396,  3406,  3247,
    4294,    76,   130,  2121,  1049,  1060,  1056,  1079,   656,  1589,
    2124,  2652,  3789,   638,  2638,  3939,  3707,  3943,  2639,  3420,
    2640,  3922,  4097,  2641,  3724,  3941,  4115,  3421,  3422,  2642,
    2643,  2644,  3931,  3938,  4284,  4554,  4555,  4556,  3021,  1356,
     653,   654,  1072,  1073,  1074,  2366,  3488,  3065,    77,  2044,
    2039,    78,  1011,  1012,  1013,  1513,  1514,  2042,  2043,  2515,
    2951,    79,   666,  1609,  1386,  1926,    80,   906,  2437,  2438,
    2439,  2873,    81,  1080,  1593,  1594,  2130,  3104,  3513,  3794,
    4014,  4196,  4010,  4334,  4335,    82,   668,  1093,    83,   523,
    1617,  1618,  1619,  2170,    84,  1368,   137,    85,   905,  1380,
    1382,  1383,    86,   660,  1081,  1082,  1083,  1084,  2132,    87,
    1901,  2408,  2409,  2410,  2411,  1599,  2656,  1600,  1601,  2141,
    3291,    88,    89,   622,  2326,   594,   929,   595,   596,  1950,
    2464,  3847,   940,   941,   942,  2904,  1423,  1424,  1425,  1907,
    2909,  4298,  1151,  1147,   803,   804,   805,   806,  1241,  1242,
    3990,   807,  1251,  1804,  3184,  3563,  1663,  1664,   808,   809,
     810,   811,   812,   813,  1831,  3203,  3204,  3578,  2353,  2354,
    2355,   814,  2240,  3190,  2253,   815,  1234,  1789,  1719,  3570,
    3196,  3828,  4028,  1648,  2216,  2739,  3175,  2823,  2320,  1173,
    1174,  1132,  2223,  1654,  2050,  2051,  2052,  2053,  2054,  3665,
    3666,  4067,  3890,  4069,  3894,  2525,  2526,  1931,  1932,  2055,
    2056,  2952,  3888,  4253,  2321,  2322,  2323,  3596,  2953,  3353,
    2970,  2971,  3900,  2516,  2057,  2959,  4392,  4076,  4077,  4507,
    4506,  4078,  3898,  3899,  3670,  3671,  3107,  3108,  3109,  2889,
    1710,  1711,  1717,  1351,  1352,  1649,  2405,  2847,  3883,  4061,
    2344,  3642,  4059,  4247,  2647,  3449,  3450,  2466,  2467,  2974,
    3368,  3676,  1470,  3848,  2849,  2009,  2939,  2940,  3805,  4220,
    4754,  2795,  2935,  3001,  1681,  1682,  3456,  4385,  4581,  4685,
    4686,  4687,  3328,  3329,  3646,  3647,  2468,  2901,  3330,  3884,
    4252,    90,   541,    91,  1843,  2826,  1292,  2372,  1091,  1389,
    1635,  1636,   827,   555,    92,   566,  2406,    93,   584,  1929,
     884,   909,  1390,  1391,  2446,  2876,  2883,  2447,  2888,  3633,
    2878,  3305,  3306,  2361,  2362,  2879,  3308,  3630,  3611,  3612,
    3286,  3868,    94,   610,  3363,  2965,  2966,  4361,  4362,   910,
      95,   540,  1119,  2715,  4024,  1641,  2204,  4206,  1120,  1121,
    2207,   687,   688,    96,  1016,   606,  1493,  1494,  1495,  2027,
      97,   598,  1000,  2936,  3346,  2003,   901,  1287,  1474,  1003,
    1475,  1989,  2496,  1456,    98,  1045,  1044,  1564,    99,   634,
    1565,   100,   841,  1315,  1856,  2833,  2834,  3257,  1316,  1317,
    2373,  3852,   101,   585,   914,   915,  1394,  2450,   102,   579,
     902,  1921,   103,   569,   889,  1360,  1900,   104,   105,   106,
     891,  3292,  4471,  4632,   573,  1903,  1364,  3691,  4387,  4497,
    4498,  4500,  4589,  4590,  4679,  4759,  4781,  4775,  4784,  4785,
    4788,  4793,  4794,   817,  1025,  1026,   818,  4109,   819,   820,
     821,  2884,  2885,  3369,   822,  2886,   823,  3088,  1092,  1638,
     563,   515,   645,  1027,  2855,   825,  4188,  1052,  1289,  1111,
    1112,   517,   518,   107,   597,   957,  1450,  1440,  1449,  1976,
    2490,  1980,  2492,  2493,  3342,  2927,  3343,  2928,  1005,  1972,
    1977,  2929,   960,  1965,  1966,  1967,  1968,  2920,  1962,  1986,
     108,   892,   522,  1366,  1367,  2417,   109,   609,   110,  1353,
    1893,  1894,  2402,  2846,  2403,   111,   923,   924,   112,   869,
    1627,  2386,  1106,  1055,  1107,  1879,   872,  1327,   873,   874,
    1342,  1336,  1345,  1339,  4042,  3860,  3861,  2390,  1291,  1113,
    1941,  2197,  3148,  1114,  1870,  2382,  2383,  3606,  3863,  3276,
    4048,  4049,   113,   138,   525,   671,  1099,  1417,   114,   115,
     116,   117,  1420,  1533,  2460,  1534,  2327,  1535,  1536,  2064,
    1948,  1785,  1786,  3245,  1231,  1232,  2330,  2799,  2800,   943,
    1038,  1552,  1544,   131,   132,   133,   134,  1077,  1078,  2653,
    3101,  3509,  3792,  3793,  4009,  4193,  1546,  4085,  4597,  4722,
    1547,  1548,  3377,  4087,  4398,  4599,  4694,  1549,  2976,  3678,
    4262,  4512,   118,  1028,   619,  1531,  1526,  1528,  2060,  2533,
     119,   120,   121
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     516,  1002,  1421,   895,  1102,  1435,  1438,   955,   998,  1559,
    1034,   557,  1773,   556,  1053,  1863,  1451,   564,  1566,  2469,
    2470,   575,  1680,  1772,  2205,   673,  1054,   578,   583,   514,
    2140,  2328,  2645,  1643,   590,  2646,  1501,   593,  1471,  1904,
    2011,  1175,   590,  1724,  2137,  2010,  1286,  2201,  2202,   611,
    1978,   828,   829,   830,  1110,   832,  1862,   834,  3002,  2848,
     836,   140,   838,  1471,  1127,  1795,  3058,  1839,  2882,  2740,
    1747,  1465,  3435,  1803,   647,  2991,  3002,  3002,  3669,  1875,
    3316,  2747,  2829,  3242,   870,  3131,  3352,  1689,  1913,  3503,
    2374,  1522,  2580,   636,   562,   816,  1290,  1008,  2699,  1502,
    1015,   871,  2581,  3496,  2805,  2635,  1571,  2748,  1572,  2700,
     657,  2950,  2452,  3880,  3014,   870,  3358,   639,  2955,   516,
    2906,   516,   646,   652,  3530,  3824,  3436,  2964,  3597,  2568,
    1805,  1806,   925,  4041,  1809,  1810,  1811,  1812,  1269,  1814,
    1815,  1817,  1819,  1820,  1821,  1822,  1823,  3023,   641,  3721,
     643,  3027,  3511,  1236,  1237,  1595,  1090,  2018,  2946,  1094,
    4012,  3062,  3042,  1381,  2073,  3174,  2696,  1227,  1228,  1229,
     635,  2095,   670,  3233,  3053,  3561,  2697,  2031,  1611,  1270,
    1115,  1116,  1117,  1908,  2108,  2034,  2035,  3002,  3002,  1349,
     570,  3995,  1236,  1237,  3547,  1343,  3963,  2108,  1236,  1237,
     870,  2315,  3397,  3169,  3170,   603,  1568,   600,  1568,  3176,
    2465,  3178,  3537,  3413,  3372,  4337,  2182,  3146,   574,  1919,
    1349,  1236,  1237,  1236,  1237,   582,  3538,  2717,  3006,  3007,
    2872,  4697,  2937,  1568,  1236,  1237,  -934,  2364,  -572,  1476,
    3539,  4411,  2801,  2831,  3537,  1236,  1237,  1021,  2221,  1503,
    2649,   964,   945,  4536,  4572,  4536,  2434,  2687,  3538,  4274,
    1545,  1553, -2724,  -573,  2108,  2194,  2557,  3394,  3934,  1236,
    1237,  3409,  3539,  1236,  1237,   887,  2576, -2654,   899,  1539,
    3812, -2648, -2093,   964,   945,  1516,  1236,  1237,  1095,  3234,
    3574,  4509,  3399,  1236,  1237,  2501,  2480,  4606,  4657,  1612,
    1592,  3616,  1009,  1613,  1362, -2492,  3072,  1540,   911,   571,
     877,  3326,  3956,  3961,  1614,  2982,  3962,   881,  3338,   964,
     945,  1529,  3373,  1021,  3605,   620,   658,  1959,  1963,  2087,
    1646, -1609,  3901,  3093,  4519,  3972,  1646,  1070,  4026,  3137,
    3138,  -476,  3994,  3878,  2796,  2125,  3304,  1293,  3674,  2462,
     122,  2378,  1236,  1237,   684,  1960,  1469,   870,   592,   139,
    2097,   273,  2040,   275,  3159,  3399,  3161,  1511,   567,  4359,
     520, -2724,   520,  2902,   521,  3102,   521,  1155,  1472,  3350,
    1236,  1237,  1236,  1237,  1236,  1237,  1236,  1237,  1236,  1237,
    1584,  1585,  4338,  4587,  1916,  3091,  1482,  4091,  2091,  2463,
    2788,  2068,  2977,  2169,   882,  2188,   139,  1606,  4244,  4245,
    4712,  2091,  3616,   685,  1076,  2307,  3854,  1515,  1236,  1237,
     519, -2572,   912,  1520,  1521,  2978,  2789,  4588,  1022,  1023,
    2069,  1473,  4713,  2530,  3010,  4246,  1629,  3103,   667,  1917,
    1385,  3351,  3366,  2041,  1615,  3092,  3144,  4601,  4360,  1512,
    2292,  1236,  1237,  2316,   659,  1673, -2573,  2379,  3854,  1376,
    1688,  2903,  2126,  1647,  3675,  2061,  1543,  1551,  1541,  1669,
    1156,   124,   568,  3776,  1175,   883,  2109,   677,  2091, -2492,
    2900,  1071,  3094,  2088,  1236,  1237,  1496,  4029,  3073,  2109,
    1340,  2963, -1609,  1835,  3233,  3400,   621,  2058,  1973,   913,
    2435,  1010,  1964,  3311,  1022,  1023,   868,  1363,  2925,  3660,
   -2772,   880,  4395,  3664,   662,  1961,  4658,  1674,  4152,  1238,
    3617,  4154,  1239,  1530,  4131,   646,  1631,   652,  3321,  3322,
    3323,  3214,  4607,  4135, -2572,  2061,  1836,   868,  1236,  1237,
    4060,  1558,  1517,  1616,   652,  1675,   686,  3327,  3324,  3325,
    2580,  4509,   900,  2481,   646,   875,  2109,  4151,  2972,   646,
    2581,   885,  4153, -2648,  1238,  2364,   879,  1239,   888, -2573,
    1236,  1237,  4522,  2487,   903,  2013,   665,  1800,  2016,  2502,
    1419,  4050,  2019,  1610,  2022,   646,  4568,  1238,  3627,  1238,
    1239,   956,  1239,  3002,  1096,  3397,  3575,  1871,  2699,  4080,
    1238,  1017,  2063,  1239,  1236,  1237,  3855,  3706,  3385,  2700,
    3234,  1238,  2037,  2038,  1239,  1676,  1839,  3235, -1569,  2635,
    1037,  1864,   868,  3714,  3715,   886,  1571,  1808,  1572, -1609,
    2899,  3617,  1863,  3897,   646,  1238,  1059,  3718,  1239,  1238,
    4071,  2650,  1239,  2365,  1829,  3002,  4515,  4269,  3855,   516,
    3672,  1607,  1238,  3697,   636,  1239,  1088, -1569,   665,  1238,
     636,   665,  1239,   636,  3489,  1018,  2696,  1103,  1059,   878,
     646,  3692,  1939,  1862,   646,  2832,  2697,  3374,  1075,  2436,
    1571,  1122,  1572,  2168,  1540,  2095,  2938,  3112,  1608,  1657,
    1658,  2345,  3117,   604,  1677,   601,  1958,  1437,  1344,  1477,
    3125,  3126,  2348,  1506,  4412,  2351,  3133,   993,   572,  2509,
    3856,  2579,   669,  3063,  3401,  1712,  4199,  2222,  1238,  3243,
    1110,  1239,  4422,  1725,  4611,  1727,   927,  4209,  2907,  3004,
    3849,  1085,  3158,  1176,  -934,  2342,  -572,  1740,  1741,  1742,
    3008,  3959,  4698, -2654,   839,  1746,  1238,  3964,  1238,  1239,
    1238,  1239,  1238,  1239,  1238,  1239,  2033,  1239,  4248,  1920,
    4347,  -573,  1909,  3139,   893,  1236,  1237,  3637,   602,  2073,
    1024,  4066,  2182,  1240,  1608, -2654,  1236,  1237,  2071,   868,
    1285,  3540,  1842,  3064,  1238,  2695,  2421,  1239,  1053,  3933,
    2096,  1076,  1837,  3512,  1233,  2331,  1235,  3522,  1019,  3236,
    1940,  4013,  3547,  3147,  1236,  1237,  1853,  3529,  4450,  3166,
    2238,  1350,  1240,  3540,  3009,  3891,  3892,  1238,  1240,  3339,
    1239,  1278,   516,  1280,  1281,  1059,   516,   646,   646, -1609,
     516,   646,   591, -1609,  2195,  2187,  1325,  2317,  3992,  -476,
    1608,  1240,  1350,  1240,  2196,  1541,  1215,  1673,  4062,  3813,
    1238,  1279,  1053,  1239,  1240,  1283,  1483,  2853,  1906,  1288,
    2239,  1780,  1781,  1608,  2017,  1240,  3395,  4358,  1236,  1237,
    1236,  1237,  2308,  1354,  2097,  3857,  3166,  1927,  1236,  1237,
    1236,  1237,  1608,  1780,  2257, -2572,   636, -2772,  3254,  1240,
    1933,  3858,  2954,  1240,  3402,  1436,  3523,  1439,   646,   636,
    1442,  1447,  3935,   636,  1238,  4383,  1240,  1239,  2293,  1674,
    1678,  2296,  2297,  1240,  1236,  1237,  2969,  1468,  3776, -2572,
   -2573,  1236,  1237,  1341,  2313,  2314,  1236,  1237,  3356,  3357,
    4073,  3295,  2212,  3858,  2882,  3634,  1238,  1675,  3235,  1239,
    3341,  1236,  1237,   646,  1713,   646,  3655,  1714,   646,   646,
    3703,  1236,  1237,  3639, -2573,  1378,  3659,  1993,  3710,  4736,
    3663,  2188,  2047,  1365,  2434,   646,  2065,  2066,  2067,  4074,
    1238,  2365,  1240,  1239,  2702,  1454,  1384,  4529,  3640,  4531,
    1392,  1679,  2580,  2075,  3859,  3174,  3533,  1236,  1237,  1271,
    3215,  2645,  2581,  1431,  2646,  3713,  4600,  1236,  1237,  4389,
    1240,  4390,  1240,  1876,  1240,  1110,  1240,  1676,  1240,  1454,
     636,  3700,  3668,  3014,  2476,  4282,  3533,  1557,  2810,  2811,
    3199,  3200,  3216,  3217,  3819,  2230,  3251,  3252,  3041, -1569,
    1318,  1358,  2264,  3822,  2491,  4321,  1236,  1237,  1240,  1567,
    1236,  1237,  2703,  4461,   135,  3042,  1507,   665,  2699,   665,
    1836,  1236,  1237,  3416,  3564,  3418,  4468,  2232,   679,  2700,
    1236,  1237,  3429,   636,  2635,  2374,  2505,  3319,  1236,  1237,
    2011,  1240,  2011,  2011,   636,   835,  3442,  2942,  2943,  1942,
    4267,  4491, -2123,  3453,  3455, -1931,  1677,   636,  1824,  4779,
    2235,  4288,  2000,  1471,  4095,  1387,  3472,  3474,  3476,  3128,
    2363,  2535,  3477,  3455,  1240,  3195,  1274,  2258,  3149,  1632,
    1633,  1634,  1639,  2335,  3806,  4528,  2696,  2839,  1105,  2503,
    2462,   907,  2719,  2236,  2414,  3656,  2697,  3621,  1471,   136,
   -2631,  1238,  2508,  2048,  1239,  2511,  2512,  2049,  3519,  2868,
    1587,  2761,  1238,  1432,  3438,  1239,  3534,   141,  2095,  4218,
     870,  2001,  1176, -2635,  1236,  1237,  1271,  2407,  1240,  1236,
    1237, -2274,  2809,  4303,  3947,  3948,  1176,  2190,  2583,  2579,
    1238,  3174,  3622,  1239,  3174,  3174,  3534,  2237, -2634,  1508,
    1790,  2429,  2430,  3903,  4565,  1236,  1237,  2947,  4408,  1637,
    1240,  3174,  3904, -1931,  1046,  4322,  1431,  1469,  2350,  2328,
    1236,  1237,  2704,  1595,  1509,  3973,  1396,  3949,  2435,  2244,
    3950,  3993,  3996,  3998,  3999,  1774,   524,  1828,  1877,  3439,
    3115,  2814,  2815,  4312,  1240,  3535,  4523,  1969,   646,  1236,
    1237,  1571, -2123,  1572,  1238,  1773,  1238,  1239,  1864,  1239,
    3969,  3970,  3971,  2245,  1238, -2632,  1238,  1239,  3974,  1239,
    1497, -2724, -2123,  2343,  4493,  3545,  4000, -2633,  2352,   558,
   -2638,  2415,   139,  2930,  4494,   646,  1865,  2808,  3595,  2138,
    1832,  1236,  1237,  1253,  2224,  1282,  3150,  2818,  2182,   908,
    1238,  4316,  4317,  1239,  4780,  2695,   636,  1238,  3942,  4289,
    1239,  3704,  1238,  2139,  1943,  1239,  2336,  3289,  2864,  1970,
   -1904,  1272,  1678,  3925,  2096,  1825,  1837,  1238,  1236,  1237,
    1239, -2274,  2108,  1176,   646,  1236,  1237,  1238,  1773,  3440,
    1239,   676,  1918,  1236,  1237,  2931,   680,  1455,  1826,  2967,
    3905, -2274,   646,  2367,  1236,  1237,  2420,  2097,  2002,   833,
     646,  4075,  1236,  1237,   837,  1889,  1432,  1892,  2370,  4096,
     636,  2724,  3129,  1238,  1127,   624,  1239,  1878,  4695,  4696,
   -2724,  1455,   636,  1238,  1359,  3097,  1239,   665,  1236,  1237,
     646,  4323,   904,  1236,  1237,  4503,  2091,  1273,  1236,  1237,
    3098,   636,   636,  4313,  3816,  1240,  4388,  2436,  4483,  4484,
    1715,  2187,  4290,  1716,  3378,  2522,  1240,  1236,  1237,  1236,
    1237, -1931,  1238,  2213,  2701,  1239,  1238,   646,   646,  1239,
    1783,  1945, -2631,  1673,  1896,  2255,  2433,  1238,  3360,  1953,
    1239,  4504,  1954,  2932,  1240,  1047,  1238,  1392,  4219,  1239,
    3936,   646, -1931,  1878,  1238, -2635,  1207,  1239,  3486,  1608,
    2608,  3536,  1974,   956,   576,  1236,  1237,  2616,  3407,  3407,
   -1904,   665,  1048,   516,   516,   516,   636,   516,   636,  1392,
   -2634,   870,  2324,  2012,  4401,  2416,  1256,  2188,  1272,  2014,
     516,  3536,   646,  4558,  2702,  1674,   516,  4495,  2453,  1236,
    1237,  2068,  1994,  1995,  1996,  4329,  1998,  4189,  1240,  4357,
    1240,  3130,  1827,  1236,  1237,  2619,  4330,   636,  1240,  2015,
    1240,  1836,  2933,  1675,  2780,  2021,  1971,  2256,  2337,  2260,
    2070,  1990,  2011,  3379,  4801,  4280,  4281,  2272,  4580,  2279,
    1238,  1625,  2077,  1239,  2338,  1238,  2091, -2632,  1239,  1208,
    2175,  4623, -2300,  1997,  1240,  1999,  3151,  4524,  2020, -2633,
   -1932,  1240, -2638,  2923,  2706,  4094,  1240,  4505, -1931,  1626,
    1646,  1238,   636,  2283,  1239,  3136,  1211,  1236,  1237,  1498,
    2284,  1240,  4283,  1053,  1646,  2286,  1238,  2539,  2707,  1239,
     646,  1240,   868,  1676,  2032,  2688,  3280,  3281,  3282,    44,
    2287,  1784,  3415,  3537,   273,   636,   275,  1863,   139,  2225,
    2133,   636,  3011,  2047,  4251,  1238,  -212,  3538,  1239,  4007,
    2440,  2579,   636, -1931,  2109,  1236,  1237,  1240,  3445,  3446,
    1646,  3539,  1946,  1236,  1237,  1236,  1237,  1240,  3487,   607,
     646,   580,   964,  3957,  2047,   646,  2291,  3160,  1862,  2072,
    1100,  1101,  4525,  2325,  1122,  2229,  2211,  1238,  3250,  2107,
    1239,  1236,  1237,  3365,  1458,  2994,  4189,  4189, -1932,  1212,
    3361,  1836,  1677,  3002,  2440,  4496,  1240,  4025,  1097,  2562,
    1240,  3903,  2127,  2385,  4526,  4628,  4628,  1773,  2135,   605,
    3904,  1240,   993,  4570,  1238,  2309,  4574,  1239,  3307,  3197,
    1240,  1238, -2300,  1732,  1239,  1236,  1237,  2091,  1240,  1238,
    3198,  1631,  1239,  1236,  1237,  3380,   623,  1736,  4058,  3209,
    1238,  1459, -2300,  1239,  3090,  3080,  3038,  3219,  1238,  1236,
    1237,  1239,  4331,   637,  1290,  2813,  4250,  4271,  2934,  1236,
    1237,  2563,  4079,   608,  1176,  2265,  1236,  1237,  2091,  4337,
    1460,  4230,  2356,  2853,  1238,  2695,  1253,  1239,  1098,  1238,
    2357,  3300,  1239,  1760,  1238,  1947,   626,  1239,  2138,  2564,
      58,  4231,  1236,  1237,  1236,  1237,  3275,  1837,  1110,  1236,
    1237,  2356,  2995,  1238,  2048,  1238,  1239,  2096,  1239,  3335,
    4008,  4093,  2139,  2258,  1240,  1265,  1266,  1267,  1268,  1240,
    3838,  2442,  2443,  3698,  1631,  2334,  2782,  3701,  3702,  2744,
    2368,   640,  2556,  3220,  2749,  2048,  1236,  1237,  3832,  2049,
    2519,   655,  3381,  4189,  4189,  1240,  2176,  2755,  3905,  1236,
    1237,  1238,  1836,  4562,  1239,  4563,   587,  2520,  2562,  2565,
    1240,  3452,   993,  2231,   587,  3310,  3519,  2358,   636,  2960,
    1053,  3407,  4680,  1236,  1237,   646,  2226,   636,   646,  1236,
    1237,  2770,  2894,  2328,   642,  1238,  1773,   520,  1239,  1240,
     636,   521,   720,  1836,   124,  1325, -1932,  3451, -2420,  1238,
    1325,  3965,  1239,  2381,  3966,  1236,  1237,  2246,  1678,   662,
    2389,  2389,  4034,  2389,   670,   273,   672,   275,  3002,  3002,
    2563,  3165,  2177,   868,  3591,  2227,  1273, -1932,  3593,  1236,
    1237,  1240,   646,  1236,  1237,   636,   674,  2187,  2566,   636,
     675,  2475,   681,   955,  2701,  2359,  4338,  1837,  2564,   665,
    2824,  3041,  4189,  2917,   725,   682,   646,   646,   636,   636,
     636,  1236,  1237,  1238,  2702,  3040,  1239,  4189,  1240,  1256,
    1176,   646,  1236,  1237,  2918,  1240,  2389,  2389,  2389,  4416,
    1236,  1237,  2575,  1240,  1978,  1461,  2247,  2388,  2388,   646,
    2388,  1236,  1237,  2254,  1240,  1236,  1237,  2228,  1273,  1236,
    1237,  1421,  1240,  3002,  1236,  1237,   956,   683,  1236,  1237,
    2919,  1238,  2412,   826,  1239,  3344,  1365,  2428,  2565,  1238,
    2268,  1238,  1239,   993,  1239,   842,  3011,  2498,  1240,  1236,
    1237,  2233,  2234,  1240,  4189,  1384,  2432,   831,  1240,   876,
    1236,  1237,  1471, -1932,   890,   520,  2269,  1238, -2420,   521,
    1239,  2273,   738,  2388,  2388,  2388,  2277,  1240,  4189,  1240,
    1236,  1237,   896,  3364,   993,  3657,  2961,   636, -2420,  1796,
    4189,  4189,  1236,  1237,   898,  2278,  2178,  3531,   916,  1236,
    1237,  1236,  1237,  2517,  3183,  2494,  -578,   918,  3347,   627,
     636,  1238,  1236,  1237,  1239,  3186,   581,  2566, -1932,  1238,
     516,   516,  1239,  2541,   516,  1240,  3566,  3567,  1837,   964,
     945,  4215,  4216,  4217,  3924,  1238,   930,  1007,  1239,  1236,
    1237,  2074,  1329,  2282,  1462,  1238,  1014,  3580,  1239,  2537,
    2538,   754,  1238,  2251,  1273,  1239,  2524,  4189,   908,  1240,
    3038,  1035,  3588,  1036,  2510,  1773,  1463,  4189,  1042,  1837,
    2259,  1273,   627,  1240,  2567,  3927,  3928,  2285,  1238,   879,
    1238,  1239,   636,  1239,  1061,  1238,  1371,  2529,  1239,  1372,
    3302,  2288,  2261,  1273,  1050,  2546,  2340,  2689,  1069,  2108,
     612,  1089,  2138,  2705,  2553,  2554,  3820,  4122,  1464,  4189,
    1076,  4189,  3540,  1773,  1086,  2558,  2559,  2560,  2561,  1108,
    2569,  2570,  1238,  1330,  2967,  1239,  2139,    13,  1109,  1331,
    1236,  1237,  1436,  3958,  3773,  1238,  4189,  1240,  1239,  2262,
    1730,  2274,  1273,   646,  1436,   646,  4189,  1124,  4189,  1125,
    4189,   646,   613,  1864,  1273,  2300,  2175,  2713,  1126,  1238,
    2716,  2784,  1239,  1128,  4189,  1238,  1100,  1101,  1239,   931,
    1024,  4189,  1797,  1332,  4337,  1148,  1149,  1110,  1110,  1110,
     646,  1129,  4707,   993, -1815,  1240,  4189,  4189,  2728,  1277,
    1333,  1238,   646,  1240,  1239,  1240,  1263,  1264,  1265,  1266,
    1267,  1268,  4189,  4189, -1815,  4123,  2518,  4189,  1130,  2352,
    1326,  2319,  1276,  3163,  2729,  1238,  2440,  1133,  1239,  1238,
    1349,  1240,  1239,  1134,  2441,  1253,  1135,   614,  1136,  1053,
    1053,  1053,  1294,  2567, -1815,    25,  1373,  1137,  2806,  3187,
    2206,  1940,  1940,  1940,   932,  2816,  1328,  1238,  4124,  1218,
    1239,  1138,  4365,  1139, -1815,  2691,  3709,  1140,  1238,  1141,
    2718,  1239,  1335,  3039,  1142,  1240,  1238,   783,  2828,  1239,
    1143,  2730,  1872,  1240,  2731,  1873,  3479,  1238,  1874,  3040,
    1239,  1238,  2732,  3193,  1239,  1238,   646,  1144,  1239,  1240,
    1238,  3194,  3951,  1239,  1238,  3954,  3955,  1239,  1337,  1240,
    2733,  2275,  1273,  1346,  3514, -1609,  1240,  3201,  1145,  1334,
    4043,  2825,  3967,  2091,  2701,  1238,   646,  3205,  1239,  1187,
     273,  1146,   275,  3629,  3206,  3249,  1238,  2276,  1273,  1239,
    2280,  1273,  1240,  1150,  1240,  2011,  3785,  1355,   646,  1240,
    4023,  1206,  2519,  2442,  2443,  3653,  1238,  1236,  1237,  1239,
    3207,  4338,  3208,  2098,  1219,  1220,  1348,  3210,  1238,  2520,
    1152,  1239, -1609,  1253,  1153,  1238,  1154,  1238,  1239,  1157,
    1239,  2521,  1471,  2862,  1253,  1158,  1240,  1159,  1238,  1773,
     930,  1239,  2571,  2572,  1798,  2798,  1273,  2444,  1160,  1240,
    3307,  2109,  1029,  1030,  3213,  1031, -1609,  1032,  2887,  3160,
    1799,  2734,  2890,  3427,  1484,  1238,  1338,  3218,  1239,   646,
     646,  1161, -1609,  1240,  1253,  4044,  4045, -1609,  1256,  1240,
    4046,  4047,  1162,  2911,  1163,  2913,  1164,  4631,  1165,  4630,
    1347,  3221,  2176,  1166,   122,  1485,  1361,  3223,  1836,  2837,
    2838, -1609,  1169,    38,  4553,  1240,  1170,   956, -1609,  2475,
    1436,  1171,  2522,  2012,  1177,  2012,  2012,  1178, -1609,  2328,
    2099,  2108,  1357,  3225,  4259,  4260,  3549,  3182,  2234,  1240,
   -1609,  1773,  3398,  1240,    44, -1609,  3185,  1273,   615,  1179,
    3410,  1774,  3451,  1180, -1609,  1181,  2910,  3227,  1182,  1486,
    2975,  3228,  1183,   516,  1487,  3417,  1238,   646,   646,  1239,
     616,  1240,  3829,  3211,  1273,  2735,  1184,  3431,  1185,  3433,
    3434,  1188,  1240,   931,  1575,  3313,  3314,  1189,  2175,  3229,
    1240,  3447,  2980,  3550,  3317,  3318,  3551,  1190,  4350,  4354,
    3585,  1240,   964,   945,  3552,  1240,   617,   123,  3586,  1240,
     933,   934,  1191,   936,  1240,   938,  3599,  1273,  1240,  3587,
    1192, -1609,  3553,  3831,  1193,   124,  1256,  3837,  3624,  3625,
     939,  1369,  3839,  -671,  3790,  3791,  3840,  1256,  2523,  1240,
    4364,  1194,  1258,  1259, -1609,  1650,  1651,  1652,  1379,  3011,
    1240,  1195,  3074,  1196, -1609,  1197,  4110,  3841,   932,  1349,
      54,  3012,  1670,  1198, -2767,   618,  3554,  3089,  3842, -1904,
    1240,  2543,  2544,  1199,  3463,  1200,  3464,  1256,  1201,   993,
    1202,  3110,  1240,  3705,  3798,  3799, -1609,  2691,  2555,  1240,
    1203,  1240,  1393,   125,  1733,  3809,  3817,  1737,  2100,  1395,
    4098,  1204,  1240,  1205,  4110,  2573,  2574,  4210,  2524,  2101,
    -671,  3833,  1273,  1209,  1488,    58,  2102,  3719,  1756,  1757,
    3465,  2736,  1761,  3555,  1053,  1210,  3011,  1213,  3723,  1240,
    1214,  3725,  1217,   636,   636,   636,  1940, -1609,  3012,  1775,
    1776,  1221,  3466,  2706, -1609,  2091,  4350,  4619,  3113,  3114,
    4354,  3116,  1222,  3118,  3119,  3120,  3121,  3122,  3123,  3124,
    1223, -1609,  3127,  -671,  1837,  3132,  1224,  2707,   527,  3135,
    3850,  1273,  2682,  2683,  2684,  2685,  1225,   126,  3467,  1226,
    1258,  1259,   955,  2391,  3573,  2392,  1611,  4445,  1489,  1275,
    2737,  1258,  1259,  1261,  1262,  1263,  1264,  1265,  1266,  1267,
    1268, -1609,  3866,  3867,  1411,  2138,  1413, -1609,  2393,  1414,
    3154,  3155,  3156,  4016,  2572,  2103,  1415,  4741,  1416,  2738,
    1240,  2394,  2175,  2109,  3556,  1419,  1062,  3557,  1422,  2139,
    3354,  1258,  1259, -1609,  1428, -1609,  3600,  4194,  4195,  1427,
    -671,  4197,  4198,  4201,  4198,   527,  1448,  2078,  2457,  2458,
    2459, -1609,  1452,  1490,  4202,  4198, -1609,  4258,  3318,  1453,
    1325,  2079,  2381, -1609,  2176,  1457,  1354,   646,   646,   646,
    1836,  1469, -1609,  4277,  4198,   636, -1609,  1673,  1478,  1063,
   -1609,  1480,  2138,  2395,  1479,  2396,  1481, -1609,  1504,  1253,
    4286,  4287,  4367,  4368,  2862,   646, -1609, -1609, -1609,  4802,
    1774,  4402,  3625, -1904,  1500,  3558,  2139,  1612,   127, -1609,
    2104,  1613,  1350,  2562, -1609,  1176,  3454,  4350,  4354,   646,
     646,   646,  1614, -1609,  1505, -1609, -1609,  1510,  1243, -1609,
   -1609,  1518,  3334,  1263,  1264,  1265,  1266,  1267,  1268,  1674,
    4403,  4198,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,
    2518,  1519,  3288,  1525,   933,   934,   935,   936,   937,   938,
    1524,  2864,  1253,  1527,  1244,  2012,  3013,  2996,  3712,  1532,
    1064,  1537,  1491,  1568,   939,  2563,  1574,  2397,  3814,  2091,
    3468,   128,  -671,  1262,  1263,  1264,  1265,  1266,  1267,  1268,
   -1609,  1578,  3259,  2281,  1576,  3333,  1581,  4273,  4404,  4198,
    1586,  4615,  3260,  2564,  4406,  4198,  1582,   636,  3089,  1492,
    1694,  4407,  4198, -1609,  1590, -2767,  1245,  3261,  4413,  4414,
    2828,  4415,  4414, -1609,  3469,  4454,  4455,  2080,  1246,  3262,
    3263,  3264,  2398,  1236,  1237,  1597,  3089,  2997,  4501,  3318,
    1591,   993,  3559,  1773,   129,  3414,  3412,  3089,  3265,  4502,
    3318,  3424,  1615,  3423,  4363, -1609,  2147,  2148,  1596,  -671,
    4578,  4579,  4604,  3625,  4633,  4634,  3202,  1598,   646,  3423,
    1620,  3560,  2161,  2565,  3444,  3448,  1621,  4150,  1622,  1774,
     532,  3459,  1256,  1628,  3383, -2116,  2519,  3461,  3462,   636,
    4692,  3516,  4745,  4746,  4791,  4792,  1630,  2562,  2176,  1631,
    3471,  3423,  2081,  2520,  1836,  1640, -1609,  1642,  3089,  3485,
    1698, -2767,  4035,  4036,  3498,  2521,  2998,  1247,  3425,  3426,
     516,  1763,  1764,  1271,  3508,  1646,  1837,  4366,  2082,  3423,
   -1609,  4295,  4706,  1653,  4708,  1672,  3910,  4295,  2518,  1690,
    1691,  1692,  1693,  1694,  1683,  2949,  3458,  2147,  2148,  3504,
    1718,  1616,  2566,  3643,  3644,  1256,  1729,   532,  1730,  2563,
    1731,  3143,  -671,  2161,  2214,  3521,  3460,  3607,  3608,  4729,
    3864,  3865,  2518,  1754,  2177,  1771, -1609,  3497,  1253,  1782,
    3022,  3528,  1065,  3025,  3026,  1791,  3028,  2564,  1807,  3031,
    3032,  2083,  1813,  3035,  2562,  1833,  2522,  3473,  3044,  4417,
    1834,  2163,  2164,  3048,  3049,  3050,  3051,  3052,  1626,  4760,
    4761,  3056,  3057,  1699,  3059,  1840,  1841,  1702,  1844,  3889,
    3068,  3069,  3070,  3071,  1703,  1847,  3075,  3076,  1848,  3078,
     693,  1849, -1609,  1850,  1851,  3524,  1258,  1259,  1852,  -671,
    1695,  1696,  1697,  1698, -1609, -1609,  1854,  1855,  1066,  2266,
    1067,  1866,  1867,  2270,  1868,  2562,  2563,  2565,  3475,  1869,
    1897,  2399,  2400,  2401,  3266, -1609,  1914, -1609,  1902,  1905,
    3598,  1922,  1673,  1923,  2519,   993,  1924,  2294,  2911,  4485,
    1925,  1350,  3267,  1930,  2564,  1935,  1936,  2084,  3142,  1937,
    1773,  2520,  2163,  2164, -1609, -1609,  1938,  1955, -1609, -1609,
    1987,  4363,  1949,  2521,  1979,  3648,  1704,  1988,  2519,  1258,
    1259,  1992,  2523,  2023,  4104,  2024,  2025,  2563,  2862,  2026,
    2028,   720,  2029,  2030,  4063,  2520,  2059,  4053,  2178,  2045,
    2076,  1252,  2999,  2122,  1674,  4232,  2566,  2521,  2887,  3636,
    2128,  2910,  3638,  4233,   646,  2564,  1699,  2142,  1700,  1701,
    1702,  2129,  2143,   646,  2565,  2171,   693,  1703,  2189,  2825,
    1837,  2191,  2996,  2192,  1706,  2203,   956,   956,  2567,  2209,
    4234,  1256,   273,  2215,   275,  1421,   724,  2217,  2218,  2219,
    2241,  2242,  2524,   725,  2522,  2243,  1774,  1261,  1262,  1263,
    1264,  1265,  1266,  1267,  1268,  2686,  3268,  2250,  2248,  1238,
    2249,  3684,  1239,  1436,  1248,  1249,  1250,  3893,   636,  2252,
    2263,   729,   730,  2258,  3269,  2565, -1904,  4530,  2522,  3693,
    2329,  2333,  2267,  1155,  2271,  2289,  2290,  4191,  2295,  3089,
    4460,  2298,  2997,  2566,  2299,  3654,  2310,  2311,  3423,  1704,
    4104,  3089,  2312, -1290,  1253,  2562,  2339,   720,  1268,  4470,
   -1433,   646,  2349,  2369,  1207,  3423,  1211,  3089,  3089,  2384,
    1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  4020,  4021,
    2404,  3089,  3423,  2413,  3270,  1608,  2419,  2422,  2448,  4638,
    2425,   738,  2449,  3423,  2454,  3686,  3423,  2455,  2456,  4235,
    4243,  2471,  3271,  2586,  2566,  2587,  1705,  1706,  2479,  2482,
    2523,  2477,   724,  2478,  2483,  2495,  1707,  2563,  2484,   725,
    3728,  2998,  2485,   636,  -679,  3711,  2486,  1436,  3784,  2497,
    2499,  3975,  1709,  2504,  3717,  1258,  1259,  -818,  -818,  2500,
    2589,  2513,  2527,  2528,  2523,  2564,  2514,   729,   730,  -818,
    3110,  2534,  2531,  2532,   749,  2536,  2545,  2547,  1254,  2592,
    2548,  2549,  2567,  4129,  4130,  4139,  2552,  2593,  2550,   753,
     754,  2551,  2651,  2655,  2657,   646,  4133,  3976,  2659,  4236,
    2524,  1255,  2660,  4136,  2661,  2662,  2680,  3977,  2690,  2663,
    2709,  2681,  2664,  2665,  2595,  4643,  4644,  4237,  4646,  4638,
    3729,  2710,  4101,  3787,  2711,  1773,  2666,  2667,  1568,  4155,
    4156,  2596,  2727,  2668,  2524,  2565,  4786,   738,  1773,  2078,
    2718,  4238,  2669,  1773,  2670,  2671,  2672,  2673,  1773,  4795,
    2674,  3885,  2675,  2079,  4786,  2676,  3978,  2714,  2677,  4795,
    2601,  3428,   542,  2678,  2679,  2751,  2752,  1256,  2357,  1707,
    2822,  2835,  2840,  2722,  3437,  2750,  2854,  3874,  4688,  2567,
    4689,  4690,  1774,  1240,  1708,  1709,  2762,  2763,  1100,  1101,
    2775,  2797,   844,  2804,  2812,  2821,  4508,  2836,  2843,   646,
     749,  2851,  2844,  2845,  4243,  2841,  1261,  1262,  1263,  1264,
    1265,  1266,  1267,  1268,  2566,   753,   754,  2842,  2856,   543,
    2857,  2858,  2865,  2866,  1909,   273,  2869,   275,  3979,  2870,
    2871,  2877,  2891,  2605,  2892,  2895,  2896,  2897,  2463,  2462,
    2567,  2606,  1963,  3089,  2915,  2916,  1964,  2941,   544,  2926,
    2944,  2956,  2957,   273,  2958,   275,  2607,  2999,  2973,  2981,
    2992,  2993,  3423,  3011,  3024,  1257,  3089,  3029,  3030,  3033,
    3034,  3036,  4757,  3037,  1774,  3043,  3045,  3046,  3423,  1296,
     636,  4772,   845,   775,   545,  -853,  4511,  4105,  3047,  3054,
    4106,  3055,  3060,  3061,  3066,  4275,  4276,  3067,  4278,  4279,
    3077,   781,  3915,  3096,  3100,  3105,   783,  3141,  3111,   784,
    3140,  3157,  1297,  2609,   847,  2210,  3145,  3166,   993,  2080,
    1436,  1258,  1259,  3171,  3177,  3179,  3180,  3181,   848,  3188,
    3189,  2610,   546,  3230,  4239,  3258,  3240,  1260,  3241,  3246,
    3244,  3248,  3253,  3256,  3277,  4006,  3283,  3278,  4011,  3285,
    1880,  3290,  3294,  1371,  1881,  4019,  4019,  4019,  2012,  3293,
    3297,   586,  3309,  3303,  3312,  3315,  1882,  3320,   646,  4107,
    4108,  3331,  3332,  3340,  3336,  3337,  3348,  3355,  3359,  3349,
    3362,  2616,  1298,  4513,  3370,  1100,  1101,  2614,   852,  2615,
    3430,  3980,  3648,  3371,  2081,  3432,  3975,  2617,  3981,  3494,
    3499,  1690,  1691,  1692,  1693,  1694,   895,  1299,  3502,   775,
    1300,  4798,  3506,  4105,  3505,   853,  4106,  1100,  1101,  3510,
    2082,  3515,   854,  3516,  3520,  3546,  2061,   781,  3565,  3568,
    2567,  3569,   783,  3576,  3577,   784,  3589,  3602,  3982,  2316,
     646,  4063,  3976,  3235,  3603,  3604,  1301,  3613,  3615,  3620,
    2890,  3626,  3977,  3628,  2440,  3661,  3641,  3649,   -67,  3662,
    1296,  3673,   855,   547,  3679,  3680,  1302,  3684,  3685,  2623,
     526,  3687,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,
    4019,  1303,  2475,  2083,  1397,  3089,  3688,  3694,  3689,  3695,
    4114,   636,  3696,  1297,  1398,  4107,  4108,  3708,  3720,  4119,
    3716,  3978,  1695,  1696,  1697,  1698,  3726,  2649,  3786,  1399,
    3727,  3983,  3788,  3795,  3796,   548,  3801,  3802,  3803,  4081,
    3804,  1400,  1401,  1402,  3811,  2624,  2625,  2626,  3807,  1304,
     646,  3808,  2627,  3815,  3809,  3810,   549,  3821,  3818,  3823,
    1403,  3825,  3826,  4543,  3827,  3830,  4511,  3834,  2628,  3835,
    3836,  3845,  2629,  1305,  3851,   527,  4157,  3853,  4543,  3844,
    3862,   824,  3869,  1298,  3870,  3867,  3879,  3335,  4112,  1436,
    3881,  2630,  3886,  3882,  3887, -1519, -1524,  3896,  3902,  2084,
    3911,  3912,  3920,  3926,  3913,  3929,  3916,  3930,  1299,  2632,
    3937,  1300,  -884,  3952,  4138,  1883,  3945,  4002,   273,   550,
     275,  3995,  4243,  3817,  4027,   551,   636,  4031,  1699,  4229,
    1700,  1701,  1702,  4032,  4037,   858,  4033,   646,  3984,  1703,
    4038,  4039,  4040,  1884,   552,  4596,  4051,  1301,  4052,  4684,
    -853,  1885,  4068,  4055,  4070,  4056,  4082,  4117,  4264,   636,
     528,  4769,  4083,  4099,  4120,  4100,  4102,  1302,  3992,   553,
    4142,  4103,  3393,  4019,  4019,  4128,  4019,  4019,  1306,  4132,
    4134,   861,  1303,  4143,  4144,  4145,   554,  1307,  4769,  4146,
    4148,  4149,  4158,  4192,   862,  1886,  4203,  4200,  4204,  4205,
    4212,  4214,  1308,  4223,  4207,  4222,  4208,  4268,  4211,  4225,
    4255,  4285,  4291,  4300,  4299,  4307,  -352,  4325,  4257,  4356,
    1309,  1704,  4297,  4346,  4305,  4328,  4373,  4370,  4684,  4327,
    1304,  4374,   824,  4382,  4384,  4311,  4265,   824,  4386,  4379,
    4318,  4391,  4396,  4400,  1887,  4422,  4425,  -370,  4543,  4452,
    1100,  1101,  4409,  4419,  1305,  4451,  3980,  4453,  4676,  4462,
    4463,   529,  4472,  3981,  1310,  4469,  4475,  1311,  4487,  4332,
    4336,  4499,  4019,  3489,   824,   865,  1404,  4539,  1705,  1706,
    4532,  4540,  4550,  4544,  4551,  4568,  4582,  4304,  4583,  4584,
    4585,   824,  4591,  4592,  1405,  1312,  1774,   866,  4593,   867,
    4595,  4594,  4598,  3982,  4608,  4800,  4605,  4609,  4610,  4611,
    4616,  4618,  4624,  4620,   520,  4621,  2608,  1313,   521, -2471,
    2583,  4652,  4642,  4645,  4647,  4648,  2586,  4723,  2587,  2890,
    4655,  2890,  4656,  4664,  4677,   824,   824,   824,   824,  4543,
    4693,  4543,  4678,   530,  4681,  4703, -1693,   824,  4704,  4691,
    4709,  4705,  4714,  4710,  4715,  4743,  4718,  4725,  4728,  1306,
    4720,  4410,  4543,  2589,   531,  4721,  1314,  4732,  1307,  4734,
    4737,  4738,  4739,  4744,  4748,  4758,  3983,  4750,  4773,  4778,
    4797,  4774,  2592,  1308,  4787,  3134,  4320,   532,  4426,  4015,
    2593,  3005,  3800,  4543,  4543,  1499,  1550,  2830,  4777,  4086,
    4397,  1309,  4514,  4653,  4486,  1580,  4654,  4084,  4088,  4263,
    4752,  4789,   599,  2451,  1006,  2377,  4169,  2595,  3273,  4170,
    4762,  1707,  4172,  4661,  4173,  4175,  1406,   533,  4176,  4177,
    4178,  1568,  4179,  4180,  2596,   824,  1708,  1709,  4537,  4662,
    4183,  4629,  4229,  4184,  4185,  1310,  4549,  1624,  1311,  4548,
    2360,  2120,   646,  4399,  4270,  3081,  3722,  3872,  4492,  2633,
    3296,  3619,  4474,  2601,  3301,  1912,  4224,  4567,  4717,   534,
    3875,  4683,  4641,  2174,  4456,  1043,  1312,   535,  4381,  4092,
    3079,  3677,  3484,  3984,  3919,  3086,  1407,  3491,  4111,  4113,
    4726,  4533,  3562,  3960,  4293,  4001,  4147,  4137,  1313,  4566,
    2990,  3592,  3232,  3590,  1408,  3594,  2144,  4517,  4479,  4480,
     538,   539,  4602,  2708,  4603,  4459,  2828,  4467,  4465,  3153,
    4296,  4345,  3699,  3083,  3483,  1523,  1588,  2046,   273,  4336,
     275,  4116,  2948,  2874,  4560,  2654,  2605,  4552,  3932,  2172,
    2431,  2134,  2852,  1774,  2606,  3614,  3287,  1314,  2803,  2898,
    4190,  1033,  2461,  3601,  1426,  4418,  2743,  2741,  2968,  2607,
    3255,  2962,  3658,  1728,   646,  2145,  4650,  2146,  2147,  2148,
    2149,  2150,  2802,  2151,  2152,  2153,  2154,  2155,  2156,  2157,
    2158,  2159,  3797,  2160,  2161,  2162,  4261,  4393,  3940,  4651,
    1671,  2819,  3345,  2062,  4072,  3478,  4742,  4559,  2905,  4065,
    2712,  1928,  1895,  4640,  2880,  2850,  3877,  3632,  3631,  3667,
    4564,  1020,  2208,  1560,  1123,  1561,  2609,  1562,  4575,  4576,
    2506,  1563,  2004,  1001,  2507,  2945,   824,  3944,  1004,  1934,
    3618,  4716,  2371,  4586,  2610,  4740,  4649,  4796,  4799,  4141,
    1216,  3635,  2332,  2924,  1952,  3651,   958,  3652,   959,  2489,
    2922,   646,  2921,  2914,  2418,  1284,   926,  1412,  1888,  4213,
    2893,  3274,  4221,  1944,   824,   824,   928,  3110,  3110,  1418,
    2198,  1039,  1554,   824,   824,   824,   824,   824,   824,   824,
     824,   824,   824,   824,   824,  1040,  1041,     0,     0,     0,
    2614,  4666,  2615,   824,   824,     0,   824,   824,  4674,  1555,
    2617,   824,     0,     0,   824,   824,   824,   824,     0,   824,
     824,   824,  1556,  2163,  2164,     0,     0,     0,   824,   824,
       0,   824,   824,   824,   824,   824,     0,     0,   824,   824,
     824,   824,   824,   824,   824,   824,   824,   824,   824,     0,
     824,     0,     0,   824,   824,     0,     0,     0,   824,     0,
       0,     0,   824,   824,   824,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,   824,   824,     0,     0,     0,
       0,     0,  2623,   824,     0,     0,     0,     0,     0,  4730,
     824,   824,   824,   824,  4735,     0,     0,     0,     0,     0,
       0,   824,   824,   824,     0,   824,   824,   824,   824,   824,
       0,   824,   824,   824,   824,   824,   824,   824,   824,  4790,
       0,     0,   824,   824,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4770,     0,     0,     0,     0,  2624,  2625,
    2626,     0,     0,     0,  4724,  2627,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1774,     0,
    4770,  2628,     0,     0,     0,  2629,     0,   646,     0,     0,
       0,  1774,     0,     0,     0,     0,  1774,     0,     0,     0,
       0,  1774,     0,     0,  2630,     0,     0,     0,     0,  4371,
    4372,     0,     0,  4375,  4376,  4377,  4378,     0,     0,     0,
       0,     0,  2632,     0,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1131,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4457,     0,  1168,     0,     0,
       0,   824,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,  1186,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4481,  4482,     0,     0,     0,     0,     0,     0,     0,  4490,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,  1230,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2582,     0,     0,
       0,     0,     0,  2583,     0,  2584,     0,  2585,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2586,     0,
    2587,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1370,     0,
    2588,     0,     0,     0,     0,  2589,  2590,     0,     0,     0,
       0,     0,  2591,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2592,     0,     0,     0,     0,     0,
       0,     0,  2593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2594,   824,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2595,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1568,     0,     0,  2596,     0,     0,     0,
       0,     0,     0,     0,  2597,  2598,     0,     0,     0,     0,
       0,  2599,     0,     0,     0,     0,     0,     0,     0,  2600,
       0,     0,     0,  -961,     0,  2601,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2602,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2603,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   824,   824,   824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     273,   824,   275,     0,     0,     0,  2604,     0,  2605,     0,
       0,     0,     0,     0,     0,     0,  2606,     0,     0,  1604,
       0,     0,     0,     0,     0,     0,     0,   824,     0,     0,
       0,  2607,     0,   824,     0,     0,   824,     0,   824,     0,
       0,     0,     0,     0,   824,     0,   824,   824,     0,     0,
       0,     0,     0,     0,     0,  2608,     0,  1644,  1645,     0,
       0,     0,     0,     0,     0,     0,  1655,  1656,     0,     0,
    1659,  1660,  1661,  1662,  1665,  1666,  1667,  1668,     0,     0,
       0,     0,     0,     0,     0,     0,  1684,  1685,  2609,  1686,
    1687,     0,     0,     0,     0,     0,     0,  1720,  1721,  1722,
    1723,     0,     0,  1726,     0,     0,  2610,     0,     0,     0,
    2611,  1734,  1735,     0,  1738,  1739,     0,     0,     0,     0,
       0,  1743,  1744,  1745,     0,     0,  1748,  1749,  1750,  1751,
    1752,  1753,     0,  1755,     0,     0,  1758,  1759,     0,   824,
       0,  1762,     0,     0,     0,  1765,  1769,  1770,     0,     0,
    2612,     0,     0,     0,     0,  2613,     0,  1777,  1778,  1779,
       0,     0,  2614,     0,  2615,     0,  1787,     0,     0,  2616,
       0,     0,  2617,  1792,  1793,  1794,     0,  2586,     0,  2587,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,     0,     0,
       0,     0,   824,  2618,     0,     0,  1830,     0,     0,     0,
       0,  -818,  -818,     0,  2589,     0,     0,  2619,  2620,  2621,
    2622,     0,     0,  -818,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2592,     0,     0,     0,     0,     0,     0,
       0,  2593,     0,     0,  2623,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2595,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1568,     0,     0,  2596,     0,     0,     0,     0,
       0,     0,     0,  1899,     0,     0,     0,     0,     0,     0,
    2624,  2625,  2626,     0,     0,     0,     0,  2627,     0,     0,
       0,     0,     0,     0,  2601,     0,     0,     0,     0,     0,
       0,     0,     0,  2628,     0,     0,     0,  2629,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  2648,     0,     0,     0,     0,  2630,     0,     0,     0,
       0,  2631,     0,     0,     0,     0,     0,     0,  1951,     0,
       0,     0,     0,   824,  2632,     0,     0,     0,  1957,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   273,
       0,   275,     0,     0,  1985,     0,     0,  2605,  1991,     0,
       0,     0,     0,     0,     0,  2606,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2607,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2983,     0,     0,     0,     0,     0,
       0,  -961,   824,     0,     0,     0,   824,     0,     0,     0,
       0,   824,   824,  2036,     0,     0,     0,     0,     0,     0,
     824,     0,   824,     0,   824,   824,   824,   824,     0,     0,
     824,     0,     0,     0,     0,     0,     0,  2609,     0,     0,
     824,     0,   824,   824,     0,   824,   824,   824,   824,     0,
     824,     0,     0,   824,     0,  2610,     0,     0,     0,     0,
       0,     0,   824,     0,     0,     0,     0,     0,     0,   824,
       0,   824,     0,   824,   824,     0,   824,   824,     0,     0,
       0,   824,   824,   824,     0,     0,     0,   824,   824,   824,
       0,   824,     0,   824,     0,   824,     0,   824,     0,   824,
       0,     0,     0,     0,   824,     0,     0,     0,     0,     0,
       0,  2614,     0,  2615,     0,     0,     0,     0,     0,     0,
       0,  2617,     0,   824,     0,     0,     0,     0,     0,     0,
     824,     0,     0,   824,     0,     0,     0,     0,     0,   824,
       0,     0,   824,     0,     0,     0,   824,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2220,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2623,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2624,
    2625,  2626,     0,     0,     0,     0,  2627,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2302,
    2304,  2306,  2628,     0,     0,     0,  2629,     0,     0,     0,
       0,   824,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2630,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2341,     0,     0,  2632,     0,     0,     0,     0,     0,  2346,
       0,  2347,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2648,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  3003,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3003,  3003,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2984,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2427,     0,     0,  2648,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     1,     0,     2,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3003,  3003,  2488,     0,     0,     0,
       3,     0,     0,     0,     4,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     5,     6,
       0,     0,     0,     0,     0,     0,     7,     0,     0,     0,
     824,     8,     9,     0,   824,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    10,     0,     0,     0,     0,     0,     0,     0,
       0,   824,   824,     0,     0,     0,     0,     0,     0,     0,
       0,    11,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   824,     0,     0,     0,     0,     0,     0,     0,     0,
     824,     0,   824,     0,   824,    12,     0,     0,     0,     0,
       0,     0,     0,    13,    14,    15,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    16,    17,     0,     0,
       0,   824,     0,     0,     0,     0,   824,     0,     0,    18,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    19,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   824,     0,     0,
      20,     0,     0,     0,     0,     0,  2658,     0,     0,     0,
       0,     0,     0,     0,     0,    21,     0,    22,     0,     0,
       0,    23,     0,     0,     0,    24,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    25,     0,    26,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    27,
       0,     0,     0,   824,     0,  2721,     0,     0,     0,  2723,
       0,     0,     0,     0,  2725,  2726,     0,    28,     0,     0,
       0,    29,     0,  1662,     0,  2742,     0,  1662,     0,  2745,
    2746,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  2753,     0,  2754,     0,     0,  2756,  2757,
    2758,  2759,     0,  2760,   824,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2764,     0,     0,     0,  2648,
       0,     0,  2765,     0,  2766,     0,  2767,  2768,     0,  2769,
       0,     0,     0,     0,  2772,  2773,  2774,     0,     0,     0,
    2776,  2777,  2778,     0,  2779,     0,  2781,     0,  2783,     0,
    2785,     0,  2786,     0,     0,     0,     0,  2787,     0,     0,
       0,     0,     0,     0,     0,     0,    30,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2807,     0,     0,     0,
       0,     0,     0,    31,     0,    32,     0,     0,     0,     0,
       0,     0,  2817,     0,     0,  2820,     0,     0,    33,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    34,
    2648,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,   824,     0,     0,     0,     0,     0,
       0,    35,     0,     0,    36,     0,    37,     0,     0,    38,
       0,     0,    39,    40,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    41,     0,     0,    42,     0,     0,     0,
       0,     0,     0,     0,    43,     0,     0,     1,     0,     2,
      44,     0,  3003,     0,     0,     0,     0,     0,    45,     0,
       0,     0,     0,    46,    47,    48,     0,     0,     0,     0,
       4,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,     0,     5,     6,     0,     0,     0,     0,
       0,     0,     7,     0,     0,    49,     0,     8,     9,     0,
       0,     0,    50,     0,     0,     0,     0,   824,   824,     0,
     824,     0,     0,     0,  1985,     0,     0,     0,    10,   824,
       0,     0,     0,     0,   824,     0,     0,   824,     0,   824,
     824,     0,     0,     0,     0,     0,     0,    11,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    51,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    52,
       0,    12,   824,    53,     0,     0,    54,     0,     0,    13,
      14,    15,    55,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    16,    17,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,     0,     0,
       0,     0,    56,     0,     0,     0,     0,     0,    57,    19,
       0,     0,     0,     0,     0,     0,     0,     0,   824,     0,
       0,    58,     0,     0,     0,     0,    20,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   961,     0,     0,
       0,    21,     0,    22,     0,     0,     0,    23,     0,   962,
       0,    24,     0,     0,     0,     0,     0,     0,     0,     0,
     899,   963,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   824,     0,     0,    25,     0,    26,
       0,     0,     0,     0,     0,   964,   945,     0,     0,     0,
       0,     0,     0,   965,     0,    27,     0,     0,   966,     0,
       0,     0,     0,  2648,     0,     0,     0,     0,     0,     0,
       0,     0,     0,    28,     0,     0,     0,    29,     0,     0,
       0,     0,     0,     0,   967,     0,   968,     0,   969,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     970,     0,     0,  3162,     0,     0,     0,  3164,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    14,    15,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  3191,  3192,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0, -1904,   971,     0,
       0,     0,   972,     0,  3212,   973,     0,     0,     0,     0,
       0,     0,     0,  3222,     0,  3224,     0,  3226,     0,     0,
       0,     0,    30,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   974,     0,   975,     0,     0,     0,    31,
       0,    32,     0,   976,     0,   977,     0,     0,     0,     0,
       0,     0,     0,     0,    33,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    34,     0,     0,     0,     0,
     978,   979,   980,     0,     0,     0,     0,     0,     0,     0,
    3284,     0,     0,     0,     0,     0,     0,    35,     0,     0,
      36,     0,    37,   981,     0,    38,     0,     0,    39,    40,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    41,
       0,     0,    42,     0,     0,   982,     0,     0,     0,     0,
      43,     0,     0,     0,     0,     0,    44,     0,     0,     0,
       0,     0,     0,     0,    45,     0,     0,     0,     0,    46,
      47,    48,     0,     0,   983,     0,     0,     0,     0,   824,
       0,     0,     0,     0,     0,     0,  1985,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    49,     0,     0,     0,     0,     0,     0,    50,     0,
       0,     0,     0,     0,     0,   824,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3367,     0,     0,
       0,     0,   984,     0,   824,     0,     0,     0,     0,     0,
    3730,  3731,     0,    51,     0,     0,  3732,     0,  3733,     0,
    3734,  3735,     0,     0,     0,    52,     0,     0,   985,    53,
       0,     0,    54,     0,     0,     0,     0,  3549,    55,   986,
     987,     0,     0,   988,   989,     0,  2586,     0,  2587,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   990,     0,     0,     0,    56,     0,
       0,     0,     0,     0,    57,     0,     0,     0,     0,     0,
    -818,  -818,     0,  2589,     0,     0,  3991,    58,     0,     0,
       0,     0,  -818,     0,  3736,     0,     0,  3737,     0,     0,
       0,     0,  2592,     0,     0,  3738,     0,     0,     0,     0,
    2593,     0,   991,     0,     0,     0,  3500,  3501,     0,     0,
       0,     0,     0,  3739,     0,   992,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2595,   824,     0,
    3740,     0,   824,     0,     0,     0,     0,     0,     0,     0,
       0,  1568,     0,     0,  2596,     0, -2511,     0,     0,     0,
     993,     0,     0,     0,     0,  3741,     0,  3742,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   824,   994,   995,
    3743,  3744,     0,  2601,     0,     0,     0,     0,  3532,     0,
       0,   824,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    3571,  3572,     0,     0,  3745,     0,     0,   996,  2648,     0,
       0,     0,  3579,     0,     0,     0,     0,  3581, -2511,     0,
    3582,     0,  3583,  3584,     0,     0,   997,     0,   273,     0,
     275,     0,     0,  3746,     0,     0,  2605,     0,     0,     0,
       0,     0,  3747,  3748,  2606,  3749,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2607,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  3991,  3750,  3751,
    3752,     0,     0,     0,     0,     0,  3610,     0,     0,     0,
       0,     0,     0,     0,     0,  4187,     0,  3753,  3754,  3755,
       0,     0,     0,     0,     0,  3756,     0,     0,  3757,     0,
       0,  3610,     0,     0,     0,     0,  2609,     0,     0,     0,
       0,     0,     0,     0,     0,  3758,  3759,  3481,     0,     0,
       0,     0,     0,  2583,  2610,  2584,     0,     0,     0,     0,
       0,     0,     0,   824,     0,     0,     0,     0,  2586,     0,
    2587,   824,     0,     0,     0,     0,     0,   824,     0,   824,
       0,  3760,  3761,     0,     0,     0,     0,  3610,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2588,     0,     0,     0,     0,  2589,  3762,     0,     0,     0,
    2614,     0,  2615,     0,     0,     0,     0,     0,     0,     0,
    2617,     0,     0,     0,  2592,     0,     0,     0,     0,     0,
       0,     0,  2593,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2594,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2595,
       0,     0,  3763,     0,     0,     0,  3764,     0,   824,     0,
       0,     0,     0,  1568,  4187,  4187,  2596,     0,     0,     0,
    3765,     0,     0,     0,  2597,     0,     0,     0,     0,     0,
       0,  3482,  2623,     0,     0,     0,     0,     0,     0,  2600,
       0,     0,     0,     0,     0,  2601,     0,  4344,     0,     0,
       0,  4344,  4344,     0,     0,     0,     0,     0,   824,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2603,     0,  3766,     0,     0,
    3767,     0,     0,  3768,  3769,  3770,  3771,     0,  2624,  2625,
    2626,     0,     0,     0,     0,  2627,   824,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     273,  2628,   275,     0,     0,  2629,     0,     0,  2605,     0,
       0,     0,     0,     0,     0,     0,  2606,  3772,  3773,     0,
       0,     0,     0,     0,  2630,     0,     0,     0,     0,     0,
       0,  2607,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  2632,     0,  3774,     0,     0,   824,     0,   824,
       0,     0,     0,     0,     0,  2608,     0,     0,     0,   824,
       0,  4187,  4187,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4344,     0,  3610,     0,     0,     0,     0,     0,  2609,  4344,
       0,     0,     0,  4344,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2610,     0,     0,     0,
    2611,     0,     0,     0,     0,     0,     0,     0,  3895,     0,
       0,     0,     0,     0,     0,     0,  3367,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4344,     0,  3923,     0,     0,
       0,     0,     0,     0,     0,  2613,     0,     0,     0,     0,
       0,     0,  2614,     0,  2615,     0,     0,     0,   824,     0,
    4187,     0,  2617,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4187,   824,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4561,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,  2620,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2623,     0,     0,     0,     0,     0,
       0,     0,  4187,     0,     0,     0,     0,     0,  4344,     0,
    4344,  4344,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   824,  4187,     0,     0,     0,
       0,  3367,     0,     0,     0,  4030,     0,     0,  4187,  4187,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2624,  2625,  2626,     0,     0,     0,     0,  2627,     0,     0,
       0,   824,     0,     0,     0,     0,     0,     0,     0,     0,
    3610,     0,     0,  2628,     0,     0,     0,  2629,     0,     0,
       0,     0,     0,     0,  3367,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2630,     0,     0,     0,
       0,     0,     0,     0,     0,  4187,     0,     0,     0,     0,
       0,     0,   824,     0,  2632,  4187,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,  4187,     0,  4187,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   824,     0,     0,   824,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4187,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4187,     0,  4187,     0,  4187,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4187,     0,     0,     0,     0,     0,     0,  4187,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  4187,  4187,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4187,  4187,     0,     0,     0,  4187,     0,     0,     0,     0,
       0,     0,     0,     0,  4249,     0,     0,     0,     0,     0,
    4254,     0,  4256,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     824,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4306,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  3367,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  3367,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    4420,     0,  4421,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  4429,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  4541,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  4546,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  3610,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  4614,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  4668,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  4702,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  4719,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   142,
       0,   143,   689,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   690,     0,   152,   153,
     154,   155,   156,   157,   691,   159,     0,   160,     0,     0,
     692,   161,   693,   694,   695,   162,   696,     0,   163,   164,
     165,  1766,   166,  4771,   167,   168,     0,     0,   169,   697,
     698,   170,   171,     0,   172,   699,   700,   174,   175,     0,
     176,   177,   178,   179,   180,   701,   182,     0,   702,   184,
     703,   704,   705,   706,   707,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   708,   204,  3610,   205,   709,   710,   206,     0,     0,
     207,   711,   208,   712,   713,   209,     0,   210,   714,   715,
       0,   211,   212,   213,   716,   717,   718,     0,     0,     0,
       0,   719,   216,   720,     0,     0,   721,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   722,     0,   244,   245,   246,   247,   723,   724,   248,
     249,     0,   250,   251,   252,   725,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   726,
     260,   727,   262,   263,     0,   264,     0,   728,   265,   266,
     267,     0,   268,   729,   730,     0,   269,   270,     0,     0,
       0,   731,   272,   273,   274,   275,   732,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   733,   281,
     282,   734,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   735,
       0,  1767,   292,     0,   736,   293,   294,     0,     0,     0,
       0,     0,   737,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   738,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   739,   321,
     322,   323,   324,   740,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   741,   332,     0,     0,   742,   334,
     743,   335,     0,   336,   744,   745,   746,   747,   748,   341,
     342,   343,   344,   345,   346,     0,   749,   347,   348,     0,
       0,   349,   350,   351,   352,   750,   751,   752,   353,   354,
       0,   753,   754,   355,     0,   356,   357,   755,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,   756,   368,
       0,   369,     0,   370,   371,   757,   373,   374,   375,   376,
     758,   759,   379,   760,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   761,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,   762,   763,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   764,
       0,   765,   416,   417,   418,   419,   420,   421,   766,   767,
     424,   425,   426,   427,     0,   768,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,   769,   770,   455,
     456,     0,   457,   458,   771,   460,   461,   462,   772,   773,
     463,   464,   465,   466,   774,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,   775,   474,   475,     0,   776,
     777,   778,   779,     0,     0,     0,     0,  1768,   480,   481,
     482,     0,   780,   781,   782,   484,   485,   486,   783,   487,
     488,   784,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   785,   497,   498,     0,
       0,   786,   787,   788,   789,   499,     0,     0,   500,   790,
       0,   791,   501,   502,   503,   504,   505,   792,   793,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,   795,   796,     0,     0,     0,     0,   797,   798,     0,
       0,   799,   800,     0,     0,   801,   802,   142,     0,   143,
     689,   145,   146,   147,   148,  1981,     0,   149,     0,     0,
       0,   150,     0,     0,   690,     0,   152,   153,   154,   155,
     156,   157,   691,   159,     0,   160,     0,     0,  1982,   161,
     693,   694,   695,   162,   696,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   697,   698,   170,
     171,     0,   172,   699,   700,   174,   175,     0,   176,   177,
     178,   179,   180,   701,   182,     0,   702,   184,   703,   704,
     705,   706,   707,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   708,
     204,     0,   205,   709,   710,   206,     0,     0,   207,   711,
     208,   712,   713,   209,     0,   210,   714,   715,     0,   211,
     212,   213,   716,   717,   718,     0,     0,     0,     0,   719,
     216,   720,     0,     0,  1983,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   722,
       0,   244,   245,   246,   247,   723,   724,   248,   249,     0,
     250,   251,   252,   725,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   726,   260,   727,
     262,   263,     0,   264,     0,   728,   265,   266,   267,     0,
     268,   729,   730,     0,   269,   270,     0,     0,     0,   731,
     272,   273,   274,   275,   732,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   733,   281,   282,   734,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   735,     0,     0,
     292,     0,   736,   293,   294,     0,     0,     0,     0,     0,
     737,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   738,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   739,   321,   322,   323,
     324,   740,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   741,   332,     0,     0,   742,   334,   743,   335,
       0,   336,   744,   745,   746,   747,   748,   341,   342,   343,
     344,   345,   346,     0,   749,   347,   348,     0,     0,   349,
     350,   351,   352,   750,   751,   752,   353,   354,     0,   753,
     754,   355,     0,   356,   357,   755,  1984,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,   756,   368,     0,   369,
       0,   370,   371,   757,   373,   374,   375,   376,   758,   759,
     379,   760,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   761,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,   762,   763,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   764,     0,   765,
     416,   417,   418,   419,   420,   421,   766,   767,   424,   425,
     426,   427,     0,   768,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,   769,   770,   455,   456,     0,
     457,   458,   771,   460,   461,   462,   772,   773,   463,   464,
     465,   466,   774,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   775,   474,   475,     0,   776,   777,   778,
     779,     0,     0,     0,     0,     0,   480,   481,   482,     0,
     780,   781,   782,   484,   485,   486,   783,   487,   488,   784,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   785,   497,   498,     0,     0,   786,
     787,   788,   789,   499,     0,     0,   500,   790,     0,   791,
     501,   502,   503,   504,   505,   792,   793,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   794,     0,     0,     0,     0,     0,     0,     0,   795,
     796,     0,     0,     0,     0,   797,   798,     0,     0,   799,
     800,     0,     0,   801,   802,   142,     0,   143,   689,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   690,     0,   152,   153,   154,   155,   156,   157,
     691,   159,     0,   160,     0,     0,   692,   161,   693,   694,
     695,   162,   696,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   697,   698,   170,   171,     0,
     172,   699,   700,   174,   175,     0,   176,   177,   178,   179,
     180,   701,   182,     0,   702,   184,   703,   704,   705,   706,
     707,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   708,   204,     0,
     205,   709,   710,   206,     0,     0,   207,   711,   208,   712,
     713,   209,     0,   210,   714,   715,     0,   211,   212,   213,
     716,   717,   718,     0,     0,     0,     0,   719,   216,   720,
       0,     0,   721,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   722,     0,   244,
     245,   246,   247,   723,   724,   248,   249,     0,   250,   251,
     252,   725,     0,   253,     0,     0,     0,   254,  2301,   255,
       0,   256,     0,   257,   258,   726,   260,   727,   262,   263,
       0,   264,     0,   728,   265,   266,   267,     0,   268,   729,
     730,     0,   269,   270,     0,     0,     0,   731,   272,   273,
     274,   275,   732,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   733,   281,   282,   734,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   735,     0,     0,   292,     0,
     736,   293,   294,     0,     0,     0,     0,     0,   737,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   738,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   739,   321,   322,   323,   324,   740,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     741,   332,     0,     0,   742,   334,   743,   335,     0,   336,
     744,   745,   746,   747,   748,   341,   342,   343,   344,   345,
     346,     0,   749,   347,   348,     0,     0,   349,   350,   351,
     352,   750,   751,   752,   353,   354,     0,   753,   754,   355,
       0,   356,   357,   755,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,   756,   368,     0,   369,     0,   370,
     371,   757,   373,   374,   375,   376,   758,   759,   379,   760,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   761,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,   762,   763,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   764,     0,   765,   416,   417,
     418,   419,   420,   421,   766,   767,   424,   425,   426,   427,
       0,   768,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,   769,   770,   455,   456,     0,   457,   458,
     771,   460,   461,   462,   772,   773,   463,   464,   465,   466,
     774,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,   775,   474,   475,     0,   776,   777,   778,   779,     0,
       0,     0,     0,     0,   480,   481,   482,     0,   780,   781,
     782,   484,   485,   486,   783,   487,   488,   784,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   785,   497,   498,     0,     0,   786,   787,   788,
     789,   499,     0,     0,   500,   790,     0,   791,   501,   502,
     503,   504,   505,   792,   793,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,   795,   796,     0,
       0,     0,     0,   797,   798,     0,     0,   799,   800,     0,
       0,   801,   802,   142,     0,   143,   689,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     690,     0,   152,   153,   154,   155,   156,   157,   691,   159,
       0,   160,     0,     0,   692,   161,   693,   694,   695,   162,
     696,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   697,   698,   170,   171,     0,   172,   699,
     700,   174,   175,     0,   176,   177,   178,   179,   180,   701,
     182,     0,   702,   184,   703,   704,   705,   706,   707,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   708,   204,     0,   205,   709,
     710,   206,     0,     0,   207,   711,   208,   712,   713,   209,
       0,   210,   714,   715,     0,   211,   212,   213,   716,   717,
     718,     0,     0,     0,     0,   719,   216,   720,     0,     0,
     721,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   722,     0,   244,   245,   246,
     247,   723,   724,   248,   249,     0,   250,   251,   252,   725,
       0,   253,     0,     0,     0,   254,  2303,   255,     0,   256,
       0,   257,   258,   726,   260,   727,   262,   263,     0,   264,
       0,   728,   265,   266,   267,     0,   268,   729,   730,     0,
     269,   270,     0,     0,     0,   731,   272,   273,   274,   275,
     732,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   733,   281,   282,   734,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   735,     0,     0,   292,     0,   736,   293,
     294,     0,     0,     0,     0,     0,   737,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   738,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   739,   321,   322,   323,   324,   740,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   741,   332,
       0,     0,   742,   334,   743,   335,     0,   336,   744,   745,
     746,   747,   748,   341,   342,   343,   344,   345,   346,     0,
     749,   347,   348,     0,     0,   349,   350,   351,   352,   750,
     751,   752,   353,   354,     0,   753,   754,   355,     0,   356,
     357,   755,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,   756,   368,     0,   369,     0,   370,   371,   757,
     373,   374,   375,   376,   758,   759,   379,   760,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   761,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,   762,
     763,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   764,     0,   765,   416,   417,   418,   419,
     420,   421,   766,   767,   424,   425,   426,   427,     0,   768,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,   769,   770,   455,   456,     0,   457,   458,   771,   460,
     461,   462,   772,   773,   463,   464,   465,   466,   774,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,   775,
     474,   475,     0,   776,   777,   778,   779,     0,     0,     0,
       0,     0,   480,   481,   482,     0,   780,   781,   782,   484,
     485,   486,   783,   487,   488,   784,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     785,   497,   498,     0,     0,   786,   787,   788,   789,   499,
       0,     0,   500,   790,     0,   791,   501,   502,   503,   504,
     505,   792,   793,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,   795,   796,     0,     0,     0,
       0,   797,   798,     0,     0,   799,   800,     0,     0,   801,
     802,   142,     0,   143,   689,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   690,     0,
     152,   153,   154,   155,   156,   157,   691,   159,     0,   160,
       0,     0,   692,   161,   693,   694,   695,   162,   696,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   697,   698,   170,   171,     0,   172,   699,   700,   174,
     175,     0,   176,   177,   178,   179,   180,   701,   182,     0,
     702,   184,   703,   704,   705,   706,   707,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   708,   204,     0,   205,   709,   710,   206,
       0,     0,   207,   711,   208,   712,   713,   209,     0,   210,
     714,   715,     0,   211,   212,   213,   716,   717,   718,     0,
       0,     0,     0,   719,   216,   720,     0,     0,   721,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   722,     0,   244,   245,   246,   247,   723,
     724,   248,   249,     0,   250,   251,   252,   725,     0,   253,
       0,     0,     0,   254,  2305,   255,     0,   256,     0,   257,
     258,   726,   260,   727,   262,   263,     0,   264,     0,   728,
     265,   266,   267,     0,   268,   729,   730,     0,   269,   270,
       0,     0,     0,   731,   272,   273,   274,   275,   732,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     733,   281,   282,   734,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   735,     0,     0,   292,     0,   736,   293,   294,     0,
       0,     0,     0,     0,   737,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   738,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     739,   321,   322,   323,   324,   740,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   741,   332,     0,     0,
     742,   334,   743,   335,     0,   336,   744,   745,   746,   747,
     748,   341,   342,   343,   344,   345,   346,     0,   749,   347,
     348,     0,     0,   349,   350,   351,   352,   750,   751,   752,
     353,   354,     0,   753,   754,   355,     0,   356,   357,   755,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
     756,   368,     0,   369,     0,   370,   371,   757,   373,   374,
     375,   376,   758,   759,   379,   760,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   761,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,   762,   763,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   764,     0,   765,   416,   417,   418,   419,   420,   421,
     766,   767,   424,   425,   426,   427,     0,   768,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,   769,
     770,   455,   456,     0,   457,   458,   771,   460,   461,   462,
     772,   773,   463,   464,   465,   466,   774,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,   775,   474,   475,
       0,   776,   777,   778,   779,     0,     0,     0,     0,     0,
     480,   481,   482,     0,   780,   781,   782,   484,   485,   486,
     783,   487,   488,   784,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   785,   497,
     498,     0,     0,   786,   787,   788,   789,   499,     0,     0,
     500,   790,     0,   791,   501,   502,   503,   504,   505,   792,
     793,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,   795,   796,     0,     0,     0,     0,   797,
     798,     0,     0,   799,   800,     0,     0,   801,   802,   142,
       0,   143,   689,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   690,     0,   152,   153,
     154,   155,   156,   157,   691,   159,     0,   160,     0,     0,
     692,   161,   693,   694,   695,   162,   696,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   697,
     698,   170,   171,     0,   172,   699,   700,   174,   175,     0,
     176,   177,   178,   179,   180,   701,   182,     0,   702,   184,
     703,   704,   705,   706,   707,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   708,   204,     0,   205,   709,   710,   206,     0,     0,
     207,   711,   208,   712,   713,   209,     0,   210,   714,   715,
       0,   211,   212,   213,   716,   717,   718,     0,     0,     0,
       0,   719,   216,   720,     0,     0,   721,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   722,     0,   244,   245,   246,   247,   723,   724,   248,
     249,     0,   250,   251,   252,   725,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   726,
     260,   727,   262,   263,     0,   264,     0,   728,   265,   266,
     267,     0,   268,   729,   730,     0,   269,   270,     0,     0,
       0,   731,   272,   273,   274,   275,   732,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   733,   281,
     282,   734,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   735,
       0,     0,   292,     0,   736,   293,   294,     0,     0,     0,
       0,     0,   737,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   738,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   739,   321,
     322,   323,   324,   740,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   741,   332,     0,     0,   742,   334,
     743,   335,     0,   336,   744,   745,   746,   747,   748,   341,
     342,   343,   344,   345,   346,     0,   749,   347,   348,     0,
       0,   349,   350,   351,   352,   750,   751,   752,   353,   354,
       0,   753,   754,   355,     0,   356,   357,   755,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,   756,   368,
       0,   369,     0,   370,   371,   757,   373,   374,   375,   376,
     758,   759,   379,   760,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   761,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,   762,   763,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   764,
       0,   765,   416,   417,   418,   419,   420,   421,   766,   767,
     424,   425,   426,   427,     0,   768,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,   769,   770,   455,
     456,     0,   457,   458,   771,   460,   461,   462,   772,   773,
     463,   464,   465,   466,   774,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,   775,   474,   475,     0,   776,
     777,   778,   779,     0,     0,     0,     0,     0,   480,   481,
     482,     0,   780,   781,   782,   484,   485,   486,   783,   487,
     488,   784,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   785,   497,   498,     0,
       0,   786,   787,   788,   789,   499,     0,     0,   500,   790,
       0,   791,   501,   502,   503,   504,   505,   792,   793,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,   795,   796,     0,     0,     0,     0,   797,   798,     0,
       0,   799,   800,     0,     0,   801,   802,   142,     0,   143,
     689,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   690,     0,   152,   153,   154,   155,
     156,   157,   691,   159,     0,   160,     0,     0,   692,   161,
     693,   694,   695,   162,   696,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   697,   698,   170,
     171,     0,   172,   699,   700,   174,   175,     0,   176,   177,
     178,   179,   180,   701,   182,     0,   702,   184,   703,   704,
     705,   706,   707,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   708,
     204,     0,   205,   709,   710,   206,     0,     0,   207,   711,
     208,   712,   713,   209,     0,   210,   714,   715,     0,   211,
     212,   213,   716,   717,   718,     0,     0,     0,     0,   719,
     216,   720,     0,     0,   721,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   722,
       0,   244,   245,   246,   247,   723,   724,   248,   249,     0,
     250,   251,   252,   725,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   726,   260,   727,
     262,   263,     0,   264,     0,   728,   265,   266,   267,     0,
     268,   729,   730,     0,   269,   270,     0,     0,     0,   731,
     272,   273,   274,   275,   732,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   733,   281,   282,   734,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   735,     0,     0,
     292,     0,   736,   293,   294,     0,     0,     0,     0,     0,
     737,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   738,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   739,   321,   322,   323,
     324,   740,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   741,   332,     0,     0,   742,   334,   743,   335,
       0,   336,   744,   745,   746,   747,   748,   341,   342,   343,
     344,   345,   346,     0,   749,   347,   348,     0,     0,   349,
     350,   351,   352,   750,   751,   752,   353,   354,     0,   753,
     754,   355,     0,   356,   357,   755,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,   756,   368,     0,   369,
       0,   370,   371,   757,   373,   374,   375,   376,   758,   759,
     379,   760,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   761,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,   762,   763,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   764,     0,   765,
     416,   417,   418,   419,   420,   421,   766,   767,   424,   425,
     426,   427,     0,   768,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,   769,   770,   455,   456,     0,
     457,   458,   771,   460,   461,   462,   772,   773,   463,   464,
     465,   466,   774,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   775,   474,   475,     0,   776,   777,   778,
     779,     0,     0,     0,     0,     0,   480,   481,   482,     0,
     780,   781,   782,   484,   485,   486,   783,   487,   488,   784,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   785,   497,   498,     0,     0,   786,
     787,   788,   789,   499,     0,     0,   500,   790,     0,   791,
     501,   502,   503,   504,   505,   792,   793,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   794,     0,     0,     0,     0,     0,     0,     0,   795,
     796,     0,     0,     0,     0,   797,  1167,     0,     0,   799,
     800,     0,     0,   801,   802,   142,     0,   143,   689,   145,
     146,   147,   148,  1801,     0,   149,     0,     0,     0,  1802,
       0,     0,   690,     0,   152,   153,   154,   155,   156,   157,
     691,   159,     0,   160,     0,     0,   692,   161,   693,   694,
     695,   162,   696,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   697,   698,   170,   171,     0,
     172,   699,   700,   174,   175,     0,   176,   177,   178,   179,
     180,   701,   182,     0,   702,   184,   703,   704,   705,   706,
     707,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   708,   204,     0,
     205,   709,   710,   206,     0,     0,   207,   711,   208,   712,
     713,   209,     0,   210,   714,   715,     0,   211,   212,   213,
     716,   717,   718,     0,     0,     0,     0,   719,   216,   720,
       0,     0,   721,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   722,     0,   244,
     245,   246,   247,   723,   724,   248,   249,     0,   250,   251,
     252,   725,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   726,   260,   727,   262,   263,
       0,   264,     0,   728,   265,   266,   267,     0,   268,   729,
     730,     0,   269,   270,     0,     0,     0,   731,   272,   273,
     274,   275,   732,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   733,   281,   282,   734,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   735,     0,     0,   292,     0,
     736,   293,   294,     0,     0,     0,     0,     0,   737,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   738,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   739,   321,   322,   323,   324,   740,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     741,   332,     0,     0,   742,   334,   743,   335,     0,   336,
     744,   745,   746,   747,   748,   341,   342,   343,   344,   345,
     346,     0,   749,   347,   348,     0,     0,   349,   350,   351,
     352,   750,     0,   752,   353,   354,     0,   753,   754,   355,
       0,   356,   357,   755,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,   756,   368,     0,   369,     0,   370,
     371,   757,   373,   374,   375,   376,   758,   759,   379,   760,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   761,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,   762,   763,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   764,     0,   765,   416,   417,
     418,   419,   420,   421,   766,   767,   424,   425,   426,   427,
       0,   768,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,   769,   770,   455,   456,     0,   457,   458,
     771,   460,   461,   462,   772,   773,   463,   464,   465,   466,
     774,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,   775,   474,   475,     0,   776,   777,   778,   779,     0,
       0,     0,     0,     0,   480,   481,   482,     0,   780,   781,
     782,   484,   485,   486,   783,   487,   488,   784,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   785,   497,   498,     0,     0,   786,   787,   788,
     789,   499,     0,     0,   500,   790,     0,   791,   501,   502,
     503,   504,   505,   792,   793,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,   795,   796,     0,
       0,     0,     0,   797,   798,     0,     0,   799,   800,     0,
       0,   801,   802,   142,     0,   143,   689,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     690,     0,   152,   153,   154,   155,   156,   157,   691,   159,
       0,   160,     0,     0,   692,   161,   693,   694,   695,   162,
     696,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   697,   698,   170,   171,     0,   172,   699,
     700,   174,   175,     0,   176,   177,   178,   179,   180,   701,
     182,     0,   702,   184,   703,   704,   705,   706,   707,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   708,   204,     0,   205,   709,
     710,   206,     0,     0,   207,   711,   208,   712,   713,   209,
       0,   210,   714,   715,     0,   211,   212,   213,   716,   717,
     718,     0,     0,     0,     0,   719,   216,   720,     0,     0,
     721,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   722,     0,   244,   245,   246,
     247,   723,   724,   248,   249,     0,   250,   251,   252,   725,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   726,   260,   727,   262,   263,     0,   264,
       0,   728,   265,   266,   267,     0,   268,   729,   730,     0,
     269,   270,     0,     0,     0,   731,   272,   273,   274,   275,
     732,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   733,   281,   282,   734,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   735,     0,     0,   292,     0,   736,   293,
     294,     0,     0,     0,     0,     0,   737,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   738,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   739,   321,   322,   323,   324,   740,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   741,   332,
       0,     0,   742,   334,   743,   335,     0,   336,   744,   745,
     746,   747,   748,   341,   342,   343,   344,   345,   346,     0,
     749,   347,   348,     0,     0,   349,   350,   351,   352,   750,
     751,   752,   353,   354,     0,   753,   754,   355,     0,   356,
     357,   755,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,   756,   368,     0,   369,     0,   370,   371,   757,
     373,   374,   375,   376,   758,   759,   379,   760,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   761,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,   762,
     763,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   764,     0,   765,   416,   417,   418,   419,
     420,   421,   766,   767,   424,   425,   426,   427,     0,   768,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,   769,   770,   455,   456,     0,   457,   458,   771,   460,
     461,   462,   772,   773,   463,   464,   465,   466,   774,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,   775,
     474,   475,     0,   776,   777,   778,   779,     0,     0,     0,
       0,     0,   480,   481,   482,     0,   780,   781,   782,   484,
     485,   486,   783,   487,   488,   784,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
    1898,   497,   498,     0,     0,   786,   787,   788,   789,   499,
       0,     0,   500,   790,     0,   791,   501,   502,   503,   504,
     505,   792,   793,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,   795,   796,     0,     0,     0,
       0,   797,   798,     0,     0,   799,   800,     0,     0,   801,
     802,   142,     0,   143,   689,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   690,     0,
     152,   153,   154,   155,   156,   157,   691,   159,     0,   160,
       0,     0,   692,   161,   693,   694,   695,   162,   696,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   697,   698,   170,   171,     0,   172,   699,   700,   174,
     175,     0,   176,   177,   178,   179,   180,   701,   182,     0,
     702,   184,   703,   704,   705,   706,   707,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   708,   204,     0,   205,   709,   710,   206,
       0,     0,   207,   711,   208,   712,   713,   209,     0,   210,
     714,   715,     0,   211,   212,   213,   716,   717,   718,     0,
       0,     0,     0,   719,   216,   720,     0,     0,   721,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   722,     0,   244,   245,   246,   247,   723,
     724,   248,   249,     0,   250,   251,   252,   725,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   726,   260,   727,   262,   263,     0,   264,     0,   728,
     265,   266,   267,     0,   268,   729,   730,     0,   269,   270,
       0,     0,     0,   731,   272,   273,   274,   275,   732,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     733,   281,   282,  2720,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   735,     0,     0,   292,     0,   736,   293,   294,     0,
       0,     0,     0,     0,   737,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   738,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     739,   321,   322,   323,   324,   740,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   741,   332,     0,     0,
     742,   334,   743,   335,     0,   336,   744,   745,   746,   747,
     748,   341,   342,   343,   344,   345,   346,     0,   749,   347,
     348,     0,     0,   349,   350,   351,   352,   750,   751,   752,
     353,   354,     0,   753,   754,   355,     0,   356,   357,   755,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
     756,   368,     0,   369,     0,   370,   371,   757,   373,   374,
     375,   376,   758,   759,   379,   760,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   761,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,   762,   763,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   764,     0,   765,   416,   417,   418,   419,   420,   421,
     766,   767,   424,   425,   426,   427,     0,   768,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,   769,
     770,   455,   456,     0,   457,   458,   771,   460,   461,   462,
     772,   773,   463,   464,   465,   466,   774,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,   775,   474,   475,
       0,   776,   777,   778,   779,     0,     0,     0,     0,     0,
     480,   481,   482,     0,   780,   781,   782,   484,   485,   486,
     783,   487,   488,   784,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   785,   497,
     498,     0,     0,   786,   787,   788,   789,   499,     0,     0,
     500,   790,     0,   791,   501,   502,   503,   504,   505,   792,
     793,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,   795,   796,     0,     0,     0,     0,   797,
     798,     0,     0,   799,   800,     0,     0,   801,   802,   142,
       0,   143,   689,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   690,     0,   152,   153,
     154,   155,   156,   157,   691,   159,     0,   160,     0,     0,
     692,   161,   693,   694,   695,   162,   696,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   697,
     698,   170,   171,     0,   172,   699,   700,   174,   175,     0,
     176,   177,   178,   179,   180,   701,   182,     0,   702,   184,
     703,   704,   705,   706,   707,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   708,   204,     0,   205,   709,   710,   206,     0,     0,
     207,   711,   208,   712,   713,   209,     0,   210,   714,   715,
       0,   211,   212,   213,   716,   717,   718,     0,     0,     0,
       0,   719,   216,   720,     0,     0,   721,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   722,     0,   244,   245,   246,   247,   723,   724,   248,
     249,     0,   250,   251,   252,   725,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   726,
     260,   727,   262,   263,     0,   264,     0,   728,   265,   266,
     267,     0,   268,   729,   730,     0,   269,   270,     0,     0,
       0,   731,   272,   273,   274,   275,   732,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   733,   281,
     282,  2771,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   735,
       0,     0,   292,     0,   736,   293,   294,     0,     0,     0,
       0,     0,   737,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   738,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   739,   321,
     322,   323,   324,   740,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   741,   332,     0,     0,   742,   334,
     743,   335,     0,   336,   744,   745,   746,   747,   748,   341,
     342,   343,   344,   345,   346,     0,   749,   347,   348,     0,
       0,   349,   350,   351,   352,   750,   751,   752,   353,   354,
       0,   753,   754,   355,     0,   356,   357,   755,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,   756,   368,
       0,   369,     0,   370,   371,   757,   373,   374,   375,   376,
     758,   759,   379,   760,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   761,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,   762,   763,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   764,
       0,   765,   416,   417,   418,   419,   420,   421,   766,   767,
     424,   425,   426,   427,     0,   768,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,   769,   770,   455,
     456,     0,   457,   458,   771,   460,   461,   462,   772,   773,
     463,   464,   465,   466,   774,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,   775,   474,   475,     0,   776,
     777,   778,   779,     0,     0,     0,     0,     0,   480,   481,
     482,     0,   780,   781,   782,   484,   485,   486,   783,   487,
     488,   784,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   785,   497,   498,     0,
       0,   786,   787,   788,   789,   499,     0,     0,   500,   790,
       0,   791,   501,   502,   503,   504,   505,   792,   793,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,   795,   796,     0,     0,     0,     0,   797,   798,     0,
       0,   799,   800,     0,     0,   801,   802,   142,     0,   143,
     689,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   690,     0,   152,   153,   154,   155,
     156,   157,   691,   159,     0,   160,     0,     0,   692,   161,
     693,   694,   695,   162,   696,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,   697,   698,   170,
     171,     0,   172,   699,   700,   174,   175,     0,   176,   177,
     178,   179,   180,   701,   182,     0,   702,   184,   703,   704,
     705,   706,   707,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   708,
     204,     0,   205,   709,   710,   206,     0,     0,   207,   711,
     208,   712,   713,   209,     0,   210,   714,   715,     0,   211,
     212,   213,   716,   717,   718,     0,     0,     0,     0,   719,
     216,   720,     0,     0,  3609,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,   722,
       0,   244,   245,   246,   247,   723,   724,   248,   249,     0,
     250,   251,   252,   725,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   726,   260,   727,
     262,   263,     0,   264,     0,   728,   265,   266,   267,     0,
     268,   729,   730,     0,   269,   270,     0,     0,     0,   731,
     272,   273,   274,   275,   732,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,   733,   281,   282,   734,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   735,     0,     0,
     292,     0,   736,   293,   294,     0,     0,     0,     0,     0,
     737,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   738,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,   739,   321,   322,   323,
     324,   740,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   741,   332,     0,     0,   742,   334,   743,   335,
       0,   336,   744,   745,   746,   747,   748,   341,   342,   343,
     344,   345,   346,     0,   749,   347,   348,     0,     0,   349,
     350,   351,   352,   750,   751,   752,   353,   354,     0,   753,
     754,   355,     0,   356,   357,   755,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,   756,   368,     0,   369,
       0,   370,   371,   757,   373,   374,   375,   376,   758,   759,
     379,   760,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   761,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,   762,   763,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   764,     0,   765,
     416,   417,   418,   419,   420,   421,   766,   767,   424,   425,
     426,   427,     0,   768,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,   769,   770,   455,   456,     0,
     457,   458,   771,   460,   461,   462,   772,   773,   463,   464,
     465,   466,   774,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   775,   474,   475,     0,   776,   777,   778,
     779,     0,     0,     0,     0,     0,   480,   481,   482,     0,
     780,   781,   782,   484,   485,   486,   783,   487,   488,   784,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   785,   497,   498,     0,     0,   786,
     787,   788,   789,   499,     0,     0,   500,   790,     0,   791,
     501,   502,   503,   504,   505,   792,   793,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   794,     0,     0,     0,     0,     0,     0,     0,   795,
     796,     0,     0,     0,     0,   797,   798,     0,     0,   799,
     800,     0,     0,   801,   802,   142,     0,   143,   689,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   690,     0,   152,   153,   154,   155,   156,   157,
     691,   159,     0,   160,     0,     0,   692,   161,   693,   694,
     695,   162,   696,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,   697,   698,   170,   171,     0,
     172,   699,   700,   174,   175,     0,   176,   177,   178,   179,
     180,   701,   182,     0,   702,   184,   703,   704,   705,   706,
     707,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   708,   204,     0,
     205,   709,   710,   206,     0,     0,   207,   711,   208,   712,
     713,   209,     0,   210,   714,   715,     0,   211,   212,   213,
     716,   717,   718,     0,     0,     0,     0,   719,   216,   720,
       0,     0,   721,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,   722,     0,   244,
     245,   246,   247,   723,   724,   248,   249,     0,   250,   251,
     252,   725,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   726,   260,   727,   262,   263,
       0,   264,     0,   728,   265,   266,   267,     0,   268,   729,
     730,     0,   269,   270,     0,     0,     0,   731,   272,   273,
     274,   275,   732,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,   733,   281,   282,   734,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   735,     0,     0,   292,     0,
     736,   293,   294,     0,     0,     0,     0,     0,   737,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,   738,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,   739,   321,   322,   323,   324,   740,
     325,   326,  4635,     0,     0,     0,   327,   328,   329,   330,
     741,   332,     0,     0,   742,   334,   743,   335,     0,   336,
     744,   745,   746,   747,   748,   341,   342,   343,   344,   345,
     346,     0,   749,   347,   348,     0,     0,   349,   350,   351,
     352,   750,     0,   752,   353,   354,     0,   753,   754,   355,
       0,   356,   357,   755,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,   756,   368,     0,   369,     0,   370,
     371,   757,   373,   374,   375,   376,   758,   759,   379,   760,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   761,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,   762,   763,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   764,     0,   765,   416,   417,
     418,   419,   420,   421,   766,   767,   424,   425,   426,   427,
       0,   768,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,   769,   770,   455,   456,     0,   457,   458,
     771,   460,   461,   462,   772,   773,   463,   464,   465,   466,
     774,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,   775,   474,   475,     0,   776,   777,   778,   779,     0,
       0,     0,     0,     0,   480,   481,   482,     0,   780,   781,
     782,   484,   485,   486,   783,   487,   488,   784,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   785,   497,   498,     0,     0,   786,   787,   788,
     789,   499,     0,     0,   500,   790,     0,   791,   501,   502,
     503,   504,   505,   792,   793,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,     0,   794,
       0,     0,     0,     0,     0,     0,     0,   795,   796,     0,
       0,     0,     0,   797,   798,     0,     0,   799,   800,     0,
       0,   801,   802,   142,     0,   143,   689,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     690,     0,   152,   153,   154,   155,   156,   157,   691,   159,
       0,   160,     0,     0,   692,   161,   693,   694,   695,   162,
     696,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,   697,   698,   170,   171,     0,   172,   699,
     700,   174,   175,     0,   176,   177,   178,   179,   180,   701,
     182,     0,   702,   184,   703,   704,   705,   706,   707,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   708,   204,     0,   205,   709,
     710,   206,     0,     0,   207,   711,   208,   712,   713,   209,
       0,   210,   714,   715,     0,   211,   212,   213,   716,   717,
     718,     0,     0,     0,     0,   719,   216,   720,     0,     0,
     721,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,   722,     0,   244,   245,   246,
     247,   723,   724,   248,   249,     0,   250,   251,   252,   725,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   726,   260,   727,   262,   263,     0,   264,
       0,   728,   265,   266,   267,     0,   268,   729,   730,     0,
     269,   270,     0,     0,     0,   731,   272,   273,   274,   275,
     732,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,   733,   281,   282,   734,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   735,     0,     0,   292,     0,   736,   293,
     294,     0,     0,     0,     0,     0,   737,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,   738,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,   739,   321,   322,   323,   324,   740,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   741,   332,
       0,     0,   742,   334,   743,   335,     0,   336,   744,   745,
     746,   747,   748,   341,   342,   343,   344,   345,   346,     0,
     749,   347,   348,     0,     0,   349,   350,   351,   352,   750,
       0,   752,   353,   354,     0,   753,   754,   355,     0,   356,
     357,   755,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,   756,   368,     0,   369,     0,   370,   371,   757,
     373,   374,   375,   376,   758,   759,   379,   760,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   761,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,   762,
     763,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   764,     0,   765,   416,   417,   418,   419,
     420,   421,   766,   767,   424,   425,   426,   427,     0,   768,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,   769,   770,   455,   456,     0,   457,   458,   771,   460,
     461,   462,   772,   773,   463,   464,   465,   466,   774,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,   775,
     474,   475,     0,   776,   777,   778,   779,     0,     0,     0,
       0,     0,   480,   481,   482,     0,   780,   781,   782,   484,
     485,   486,   783,   487,   488,   784,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     785,   497,   498,     0,     0,   786,   787,   788,   789,   499,
       0,     0,   500,   790,     0,   791,   501,   502,   503,   504,
     505,   792,   793,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,     0,   794,     0,     0,
       0,     0,     0,     0,     0,   795,   796,     0,     0,     0,
       0,   797,   798,     0,     0,   799,   800,     0,     0,   801,
     802,   142,     0,   143,   689,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   690,     0,
     152,   153,   154,   155,   156,   157,   691,   159,     0,   160,
       0,     0,   692,   161,   693,   694,   695,   162,   696,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,   697,   698,   170,   171,     0,   172,   699,   700,   174,
     175,     0,   176,   177,   178,   179,   180,   701,   182,     0,
     702,   184,   703,   704,   705,   706,   707,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   708,   204,     0,   205,   709,   710,   206,
       0,     0,   207,   711,   208,   712,   713,   209,     0,   210,
     714,   715,     0,   211,   212,   213,   716,   717,   718,     0,
       0,     0,     0,   719,   216,   720,     0,     0,   721,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,   722,     0,   244,   245,   246,   247,   723,
     724,   248,   249,     0,   250,   251,   252,   725,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   726,   260,   727,   262,   263,     0,   264,     0,   728,
     265,   266,   267,     0,   268,   729,   730,     0,   269,   270,
       0,     0,     0,   731,   272,   273,   274,   275,   732,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
     733,   281,   282,  1816,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   735,     0,     0,   292,     0,   736,   293,   294,     0,
       0,     0,     0,     0,   737,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,   738,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
     739,   321,   322,   323,   324,   740,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   741,   332,     0,     0,
     742,   334,   743,   335,     0,   336,   744,   745,   746,   747,
     748,   341,   342,   343,   344,   345,   346,     0,   749,   347,
     348,     0,     0,   349,   350,   351,   352,   750,     0,   752,
     353,   354,     0,   753,   754,   355,     0,   356,   357,   755,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
     756,   368,     0,   369,     0,   370,   371,   757,   373,   374,
     375,   376,   758,   759,   379,   760,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   761,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,   762,   763,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   764,     0,   765,   416,   417,   418,   419,   420,   421,
     766,   767,   424,   425,   426,   427,     0,   768,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,   769,
     770,   455,   456,     0,   457,   458,   771,   460,   461,   462,
     772,   773,   463,   464,   465,   466,   774,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,   775,   474,   475,
       0,   776,   777,   778,   779,     0,     0,     0,     0,     0,
     480,   481,   482,     0,   780,   781,   782,   484,   485,   486,
     783,   487,   488,   784,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   785,   497,
     498,     0,     0,   786,   787,   788,   789,   499,     0,     0,
     500,   790,     0,   791,   501,   502,   503,   504,   505,   792,
     793,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,     0,   794,     0,     0,     0,     0,
       0,     0,     0,   795,   796,     0,     0,     0,     0,   797,
     798,     0,     0,   799,   800,     0,     0,   801,   802,   142,
       0,   143,   689,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   690,     0,   152,   153,
     154,   155,   156,   157,   691,   159,     0,   160,     0,     0,
     692,   161,   693,   694,   695,   162,   696,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,   697,
     698,   170,   171,     0,   172,   699,   700,   174,   175,     0,
     176,   177,   178,   179,   180,   701,   182,     0,   702,   184,
     703,   704,   705,   706,   707,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   708,   204,     0,   205,   709,   710,   206,     0,     0,
     207,   711,   208,   712,   713,   209,     0,   210,   714,   715,
       0,   211,   212,   213,   716,   717,   718,     0,     0,     0,
       0,   719,   216,   720,     0,     0,   721,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,   722,     0,   244,   245,   246,   247,   723,   724,   248,
     249,     0,   250,   251,   252,   725,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   726,
     260,   727,   262,   263,     0,   264,     0,   728,   265,   266,
     267,     0,   268,   729,   730,     0,   269,   270,     0,     0,
       0,   731,   272,   273,   274,   275,   732,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,   733,   281,
     282,  1818,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   735,
       0,     0,   292,     0,   736,   293,   294,     0,     0,     0,
       0,     0,   737,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,   738,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,   739,   321,
     322,   323,   324,   740,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   741,   332,     0,     0,   742,   334,
     743,   335,     0,   336,   744,   745,   746,   747,   748,   341,
     342,   343,   344,   345,   346,     0,   749,   347,   348,     0,
       0,   349,   350,   351,   352,   750,     0,   752,   353,   354,
       0,   753,   754,   355,     0,   356,   357,   755,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,   756,   368,
       0,   369,     0,   370,   371,   757,   373,   374,   375,   376,
     758,   759,   379,   760,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   761,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,   762,   763,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   764,
       0,   765,   416,   417,   418,   419,   420,   421,   766,   767,
     424,   425,   426,   427,     0,   768,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,   769,   770,   455,
     456,     0,   457,   458,   771,   460,   461,   462,   772,   773,
     463,   464,   465,   466,   774,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,   775,   474,   475,     0,   776,
     777,   778,   779,     0,     0,     0,     0,     0,   480,   481,
     482,     0,   780,   781,   782,   484,   485,   486,   783,   487,
     488,   784,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   785,   497,   498,     0,
       0,   786,   787,   788,   789,   499,     0,     0,   500,   790,
       0,   791,   501,   502,   503,   504,   505,   792,   793,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,     0,   794,     0,     0,     0,     0,     0,     0,
       0,   795,   796,     0,     0,     0,     0,   797,   798,     0,
       0,   799,   800,     0,     0,   801,   802,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
     693,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,  1857,     0,     0,     0,     0,   215,
     216,   720,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,   724,   248,   249,     0,
     250,   251,   252,   725,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,   729,   730,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,   738,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,   749,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,   753,
     754,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   775,   474,   475,     0,  1858,   477,   478,
    1859,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,   781,   483,   484,   485,   486,   783,   487,   488,   784,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   513,     0,     0,     0,     0,     0,     0,   142,     0,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,   801,   802,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,  3012,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,   527,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
    2138,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,  2139,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,  3384,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,   350,   351,   352,     0,     0,     0,   353,   354,     0,
       0,     0,   355,     0,   356,   357,   358,     0,   359,   360,
     361,   362,     0,   363,   364,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,   367,     0,     0,   368,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,   404,
       0,   405,   406,   407,     0,     0,   408,     0,   409,     0,
     410,   411,     0,   412,   413,     0,   414,     0,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,  2440,     0,     0,   430,
     431,   432,   433,     0,     0,     0,   434,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,   442,
     443,   444,   445,   446,   447,   532,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,   453,     0,     0,     0,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,   480,   481,   482,
       0,     0,     0,   483,   484,   485,   486,     0,   487,   488,
       0,   489,   490,     0,   491,   492,     0,     0,   493,     0,
       0,   494,     0,   495,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,     0,   508,   509,     0,   510,   511,   512,
       0,     0,   513,     0,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,  3085,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,  3012,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,   527,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,  2138,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,  2139,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,   532,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   513,     0,     0,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,  3085,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,   353,   354,     0,     0,     0,
     355,     0,   356,   357,   358,     0,   359,   360,   361,   362,
       0,   363,   364,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,   367,     0,     0,   368,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,   404,     0,   405,
     406,   407,     0,     0,   408,     0,   409,     0,   410,   411,
       0,   412,   413,     0,   414,     0,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,  2440,     0,     0,   430,   431,   432,
     433,     0,     0,     0,   434,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,   453,
       0,     0,     0,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,   483,   484,   485,   486,     0,   487,   488,     0,   489,
     490,     0,   491,   492,     0,     0,   493,     0,     0,   494,
       0,   495,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,     0,     0,
       0,     0,   508,   509,     0,   510,   511,   512,     0,     0,
     513,     0,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,  2881,     0,     0,   150,
       0,     0,   151,   802,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,   353,   354,     0,     0,     0,   355,
       0,   356,   357,   358,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,     0,   368,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,     0,     0,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
     483,   484,   485,   486,     0,   487,   488,     0,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,     0,   513,
       0,     0,     0,     0,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,     0,  4782,   149,     0,     0,     0,
     150,  4783,   802,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,   353,   354,     0,     0,     0,
     355,     0,   356,   357,   358,     0,   359,   360,   361,   362,
       0,   363,   364,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,   367,     0,     0,   368,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,   404,     0,   405,
     406,   407,     0,     0,   408,     0,   409,     0,   410,   411,
       0,   412,   413,     0,   414,     0,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,     0,   430,   431,   432,
     433,     0,     0,     0,   434,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,   453,
       0,     0,     0,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,   483,   484,   485,   486,     0,   487,   488,     0,   489,
     490,     0,   491,   492,     0,     0,   493,     0,     0,   494,
       0,   495,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,     0,     0,
       0,     0,   508,   509,     0,   510,   511,   512,     0,     0,
     513,     0,     0,     0,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,  1172,     0,   149,     0,     0,
       0,   150,     0,   802,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
    1388,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   513,     0,     0,     0,     0,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,   561,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,   353,   354,     0,     0,     0,
     355,     0,   356,   357,   358,     0,   359,   360,   361,   362,
       0,   363,   364,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,   367,     0,     0,   368,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,   404,     0,   405,
     406,   407,     0,     0,   408,     0,   409,     0,   410,   411,
       0,   412,   413,     0,   414,     0,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,     0,   430,   431,   432,
     433,     0,     0,     0,   434,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,   453,
       0,     0,     0,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,   483,   484,   485,   486,     0,   487,   488,     0,   489,
     490,     0,   491,   492,     0,     0,   493,     0,     0,   494,
       0,   495,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,     0,     0,
       0,     0,   508,   509,     0,   510,   511,   512,     0,     0,
     513,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2387,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,   561,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,     0,   513,     0,     0,     0,     0,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
    3084,     0,   149,     0,     0,     0,   150,     0,  3085,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,   353,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,   362,     0,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,   367,
       0,     0,   368,     0,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,     0,   383,     0,   384,   385,   386,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,   401,
     402,     0,   403,   404,     0,   405,   406,   407,     0,     0,
     408,     0,   409,     0,   410,   411,     0,   412,   413,     0,
     414,     0,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,     0,   430,   431,   432,   433,     0,     0,     0,
     434,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,     0,     0,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,   453,     0,     0,     0,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,     0,     0,     0,   483,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,   491,   492,
       0,     0,   493,     0,     0,   494,     0,   495,     0,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,     0,     0,   508,   509,
       0,   510,   511,   512,     0,     0,   513,     0,     0,     0,
       0,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,  4783,   802,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,   353,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,     0,   368,     0,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,     0,
       0,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,     0,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,   483,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,     0,   513,     0,     0,
       0,     0,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
     561,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   632,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,   353,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,   362,     0,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,   367,
       0,     0,   368,     0,   369,     0,   633,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,     0,   383,     0,   384,   385,   386,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,   401,
     402,     0,   403,   404,     0,   405,   406,   407,     0,     0,
     408,     0,   409,     0,   410,   411,     0,   412,   413,     0,
     414,     0,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,     0,   430,   431,   432,   433,     0,     0,     0,
     434,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,     0,     0,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,   453,     0,     0,     0,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,     0,     0,     0,   483,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,   491,   492,
       0,     0,   493,     0,     0,   494,     0,   495,     0,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,     0,     0,   508,   509,
       0,   510,   511,   512,     0,     0,   513,     0,     0,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,   561,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,     0,   513,     0,     0,     0,     0,
     142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,   802,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
       0,     0,   349,   350,   351,   352,     0,     0,     0,   353,
     354,     0,     0,     0,   355,     0,   356,   357,   358,     0,
     359,   360,   361,   362,     0,   363,   364,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,   367,     0,     0,
     368,     0,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,     0,
     383,     0,   384,   385,   386,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,     0,     0,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,   401,   402,     0,
     403,   404,     0,   405,   406,   407,     0,     0,   408,     0,
     409,     0,   410,   411,     0,   412,   413,     0,   414,     0,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
       0,   430,   431,   432,   433,     0,     0,     0,   434,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,     0,
       0,     0,     0,   448,   449,     0,   450,     0,     0,   451,
       0,     0,   452,   453,     0,     0,     0,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
       0,   470,   471,   472,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,     0,     0,     0,     0,     0,   480,
     481,   482,     0,     0,     0,   483,   484,   485,   486,     0,
     487,   488,     0,   489,   490,     0,   491,   492,     0,     0,
     493,     0,     0,   494,     0,   495,     0,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,     0,     0,   500,
       0,     0,     0,   501,   502,   503,   504,   505,   506,   507,
       0,     0,     0,     0,     0,     0,   508,   509,     0,   510,
     511,   512,     0,     0,   513,     0,     0,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,  3085,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   944,   945,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,   946,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   947,     0,   264,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   948,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   949,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,   353,   354,
       0,     0,     0,   355,     0,   356,   357,   358,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,     0,   368,
       0,   369,     0,   370,   371,   950,   373,   374,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,     0,     0,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   415,
       0,     0,   951,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,     0,     0,     0,
     430,   431,   952,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   953,   481,
     482,     0,     0,     0,   483,   484,   485,   486,     0,   487,
     488,     0,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,     0,   513,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,   954,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   644,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   139,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   513,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,  1441,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,   644,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,   353,   354,     0,     0,     0,   355,
       0,   356,   357,   358,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,     0,   368,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,     0,     0,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,   139,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
     483,   484,   485,   486,     0,   487,   488,     0,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,     0,   513,
       0,     0,     0,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,  1788,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   944,
     945,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
     946,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   947,     0,   264,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   948,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   949,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,   353,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,     0,   368,     0,   369,     0,   370,   371,   950,
     373,   374,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,     0,
       0,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   415,     0,     0,   951,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,     0,     0,   430,   431,   952,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,     0,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,   483,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,     0,   513,     0,     0,
       0,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,   954,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,   644,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,   139,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,     0,   513,     0,     0,     0,   142,
       0,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,  3645,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,  1319,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,   353,   354,
       0,     0,     0,   355,     0,   356,   357,   358,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,     0,   368,
       0,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,     0,     0,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   480,   481,
     482,     0,     0,     0,   483,   484,   485,   486,     0,   487,
     488,     0,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,     0,   513,     0,     0,     0,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,  1320,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
       0,   513,     0,     0,     0,   142,     0,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,  1320,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4160,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4161,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
       0,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,  4162,   250,   251,
     252,     0,     0,     0,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,     0,   263,
       0,   264,     0,     0,     0,   266,   267,     0,     0,     0,
       0,     0,     0,   270,     0,     0,     0,   271,   272,   273,
     274,   275,  4163,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,     0,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,  4164,     0,     0,
     288,     0,     0,     0,   290,   291,     0,     0,   292,  4165,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,  -327,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,     0,   354,     0,     0,     0,   355,
       0,   356,   357,   358,     0,   359,   360,   361,  4166,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,     0,     0,     0,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
       0,     0,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,     0,     0,   405,     0,
     407,  -327,     0,   408,     0,     0,     0,   410,     0,     0,
     412,   413,     0,   414,  4167,   415,     0,     0,   416,     0,
     418,   419,   420,   421,   422,   423,   424,     0,   426,   427,
       0,   428,     0,     0,     0,     0,   430,   431,   432,     0,
       0,     0,     0,   434,     0,     0,     0,     0,     0,     0,
     437,     0,     0,   440,   441,     0,   442,     0,   444,     0,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,     0,     0,
       0,     0,   454,     0,     0,     0,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
       0,   484,   485,   486,     0,   487,   488,     0,   489,   490,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,  -327,     0,     0,
       0,   508,     0,     0,   510,     0,   512,     0,   142,   513,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,  4776,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,  1051,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,   644,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,   350,   351,   352,     0,     0,     0,   353,   354,     0,
       0,     0,   355,     0,   356,   357,   358,     0,   359,   360,
     361,   362,     0,   363,   364,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,   367,     0,     0,   368,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,   404,
       0,   405,   406,   407,     0,     0,   408,     0,   409,     0,
     410,   411,     0,   412,   413,     0,   414,     0,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,     0,   430,
     431,   432,   433,     0,     0,     0,   434,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,   453,     0,     0,     0,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,   139,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,   480,   481,   482,
       0,     0,     0,   483,   484,   485,   486,     0,   487,   488,
       0,   489,   490,     0,   491,   492,     0,     0,   493,     0,
       0,   494,     0,   495,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,     0,   508,   509,     0,   510,   511,   512,
       0,   142,   513,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,  1217,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,   142,   513,   143,   144,   145,   146,
     147,   148,     0,     0,   149,  2210,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,     0,     0,   349,   350,   351,   352,
       0,     0,     0,   353,   354,     0,     0,     0,   355,     0,
     356,   357,   358,     0,   359,   360,   361,   362,     0,   363,
     364,     0,     0,     0,     0,     0,     0,     0,     0,   365,
     366,   367,     0,     0,   368,     0,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,     0,   383,     0,   384,   385,   386,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,     0,
       0,   393,   394,   395,   396,   397,     0,     0,   398,   399,
     400,   401,   402,     0,   403,   404,     0,   405,   406,   407,
       0,     0,   408,     0,   409,     0,   410,   411,     0,   412,
     413,     0,   414,     0,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,     0,   430,   431,   432,   433,     0,
       0,     0,   434,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,     0,     0,     0,     0,   448,   449,     0,
     450,     0,     0,   451,     0,     0,   452,   453,     0,     0,
       0,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,     0,   470,   471,   472,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,     0,     0,
       0,     0,     0,   480,   481,   482,     0,     0,     0,   483,
     484,   485,   486,     0,   487,   488,     0,   489,   490,     0,
     491,   492,     0,     0,   493,     0,     0,   494,     0,   495,
       0,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,     0,     0,   500,     0,     0,     0,   501,   502,   503,
     504,   505,   506,   507,     0,     0,     0,     0,     0,     0,
     508,   509,     0,   510,   511,   512,     0,   142,   513,   143,
     144,   145,   146,   147,   148,     0,     0,   149,  2912,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
     142,   513,   143,   144,   145,   146,   147,   148,     0,     0,
     149,  3279,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
       0,     0,   349,   350,   351,   352,     0,     0,     0,   353,
     354,     0,     0,     0,   355,     0,   356,   357,   358,     0,
     359,   360,   361,   362,     0,   363,   364,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,   367,     0,     0,
     368,     0,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,     0,
     383,     0,   384,   385,   386,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,     0,     0,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,   401,   402,     0,
     403,   404,     0,   405,   406,   407,     0,     0,   408,     0,
     409,     0,   410,   411,     0,   412,   413,     0,   414,     0,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
       0,   430,   431,   432,   433,     0,     0,     0,   434,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,     0,
       0,     0,     0,   448,   449,     0,   450,     0,     0,   451,
       0,     0,   452,   453,     0,     0,     0,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
       0,   470,   471,   472,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,     0,     0,     0,     0,     0,   480,
     481,   482,     0,     0,     0,   483,   484,   485,   486,     0,
     487,   488,     0,   489,   490,     0,   491,   492,     0,     0,
     493,     0,     0,   494,     0,   495,     0,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,     0,     0,   500,
       0,     0,     0,   501,   502,   503,   504,   505,   506,   507,
       0,     0,     0,     0,     0,     0,   508,   509,     0,   510,
     511,   512,     0,   142,   513,   143,   144,   145,   146,   147,
     148,     0,     0,   149,  3650,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,  1429,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
    1430,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,   644,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,   353,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,     0,   368,     0,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,     0,
       0,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
    1431,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,   139,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,   483,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,     0,   513,     0,   142,
    1432,   143,   144,   145,   146,   147,   148,   843,   844,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,   845,     0,
     207,     0,   208,     0,   846,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
     847,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,   848,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   849,   240,   241,   242,
     850,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   851,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,   852,   264,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,   853,   279,     0,   280,     0,     0,     0,   854,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,   644,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,   855,   299,
     300,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,   353,   354,
       0,     0,     0,   355,     0,   356,   357,   358,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,     0,   368,
       0,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,     0,   383,
       0,   856,   385,   386,   387,   857,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,   858,     0,   398,   399,   400,   401,   402,     0,   859,
     404,     0,   405,   406,   407,     0,     0,   860,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,   861,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
     862,   863,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     864,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,   139,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   480,   481,
     482,   865,     0,     0,   483,   484,   485,   486,     0,   487,
     488,     0,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,   866,   495,   867,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,   142,   513,   920,   144,   145,   146,   147,   148,
     921,   844,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,   845,     0,   207,     0,   208,     0,   846,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,   847,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,   848,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   849,
     240,   241,   242,   850,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   851,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,   852,   264,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,   853,   279,     0,   280,     0,     0,
       0,   854,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     644,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,   855,   299,   300,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,   353,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,   362,     0,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,   367,
       0,     0,   368,     0,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,     0,   383,     0,   856,   385,   386,   387,   922,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,   858,     0,   398,   399,   400,   401,
     402,     0,   859,   404,     0,   405,   406,   407,     0,     0,
     860,     0,   409,     0,   410,   411,     0,   412,   413,     0,
     414,     0,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
     861,     0,     0,   430,   431,   432,   433,     0,     0,     0,
     434,     0,     0,   862,   863,     0,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,     0,     0,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,   453,     0,     0,     0,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   864,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,   139,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,   865,     0,     0,   483,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,   491,   492,
       0,     0,   493,     0,     0,   494,   866,   495,   867,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,     0,     0,   508,   509,
       0,   510,   511,   512,     0,   142,   513,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,  2562,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,  2563,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,   265,   266,   267,     0,   268,  2564,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,  2565,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,  1100,  1101,     0,   353,   354,     0,     0,  2566,   355,
       0,   356,   357,   358,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,     0,   368,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,     0,     0,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,  4763,   586,  4764,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
     483,   484,   485,   486,  2567,   487,   488,     0,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,   142,   513,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,  1673,     0,     0,  3495,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,  1674,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,   265,   266,   267,
       0,   268,  2996,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,  2997,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,   350,   351,   352,     0,     0,     0,   353,   354,     0,
       0,  2998,   355,     0,   356,   357,   358,     0,   359,   360,
     361,   362,     0,   363,   364,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,   367,     0,     0,   368,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,   404,
       0,   405,   406,   407,     0,     0,   408,     0,   409,     0,
     410,   411,     0,   412,   413,     0,   414,     0,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,     0,   430,
     431,   432,   433,     0,     0,     0,   434,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,   453,     0,     0,     0,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,   139,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,   480,   481,   482,
       0,     0,     0,   483,   484,   485,   486,  2999,   487,   488,
       0,   489,   490,     0,   491,   492,     0,     0,   493,     0,
       0,   494,     0,   495,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,     0,   508,   509,     0,   510,   511,   512,
       0,   142,   513,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,  1673,     0,     0,  4302,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,  1674,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,  2996,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,  2997,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,  2998,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,   139,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
    2999,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,   142,   513,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,  1673,     0,
       0,  4557,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
    1674,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,   265,   266,   267,     0,   268,  2996,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,  2997,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,     0,     0,   349,   350,   351,   352,
       0,     0,     0,   353,   354,     0,     0,  2998,   355,     0,
     356,   357,   358,     0,   359,   360,   361,   362,     0,   363,
     364,     0,     0,     0,     0,     0,     0,     0,     0,   365,
     366,   367,     0,     0,   368,     0,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,     0,   383,     0,   384,   385,   386,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,     0,
       0,   393,   394,   395,   396,   397,     0,     0,   398,   399,
     400,   401,   402,     0,   403,   404,     0,   405,   406,   407,
       0,     0,   408,     0,   409,     0,   410,   411,     0,   412,
     413,     0,   414,     0,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,     0,   430,   431,   432,   433,     0,
       0,     0,   434,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,     0,     0,     0,     0,   448,   449,     0,
     450,     0,     0,   451,     0,     0,   452,   453,     0,     0,
       0,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,     0,   470,   471,   472,   473,     0,
     139,   474,   475,     0,   476,   477,   478,   479,     0,     0,
       0,     0,     0,   480,   481,   482,     0,     0,     0,   483,
     484,   485,   486,  2999,   487,   488,     0,   489,   490,     0,
     491,   492,     0,     0,   493,     0,     0,   494,     0,   495,
       0,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,     0,     0,   500,     0,     0,     0,   501,   502,   503,
     504,   505,   506,   507,     0,     0,     0,     0,     0,     0,
     508,   509,     0,   510,   511,   512,     0,   142,   513,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,  1051,   846,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   644,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   139,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
     142,   513,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,  1443,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,  1444,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,   644,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
       0,     0,   349,   350,   351,   352,     0,     0,     0,   353,
     354,     0,     0,     0,   355,     0,   356,   357,   358,     0,
     359,   360,   361,   362,     0,   363,   364,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,   367,     0,     0,
     368,     0,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,     0,
     383,     0,   384,   385,   386,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,     0,     0,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,   401,   402,     0,
     403,   404,     0,   405,   406,   407,     0,     0,   408,     0,
     409,     0,   410,   411,     0,   412,   413,     0,   414,     0,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
       0,   430,   431,   432,   433,     0,     0,     0,   434,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,     0,
       0,     0,     0,   448,   449,     0,   450,     0,     0,   451,
       0,     0,   452,   453,     0,     0,     0,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
       0,   470,   471,   472,   473,     0,   139,   474,   475,     0,
     476,   477,   478,   479,     0,     0,     0,     0,     0,   480,
     481,   482,     0,     0,     0,   483,   484,   485,   486,     0,
     487,   488,     0,   489,   490,     0,   491,   492,     0,     0,
     493,     0,     0,   494,     0,   495,     0,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,     0,     0,   500,
       0,     0,     0,   501,   502,   503,   504,   505,   506,   507,
       0,     0,     0,     0,     0,     0,   508,   509,     0,   510,
     511,   512,     0,   142,   513,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,  1021,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,   265,   266,   267,     0,   268,  1022,  1023,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,   353,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,     0,   368,     0,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,     0,
       0,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,  1024,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,   483,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,   142,   513,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
    2005,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,   353,   354,     0,     0,  2006,
     355,     0,   356,   357,   358,     0,   359,   360,   361,   362,
       0,   363,   364,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,   367,     0,   756,   368,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,   404,     0,   405,
     406,   407,     0,     0,   408,     0,   409,     0,   410,   411,
       0,   412,   413,     0,   414,     0,   415,     0,     0,   416,
     417,   418,   419,  2007,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,     0,   430,   431,   432,
     433,     0,     0,     0,   434,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,   453,
       0,     0,     0,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,   483,   484,   485,   486,  2008,   487,   488,     0,   489,
     490,     0,   491,   492,     0,     0,   493,     0,     0,   494,
       0,   495,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,     0,     0,
       0,     0,   508,   509,     0,   510,   511,   512,     0,   142,
     513,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,  2005,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,   353,   354,
       0,     0,  2006,   355,     0,   356,   357,   358,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,   756,   368,
       0,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,     0,     0,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   480,   481,
     482,     0,     0,     0,   483,   484,   485,   486,  2008,   487,
     488,     0,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,   142,   513,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,  1429,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,  1430,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
     644,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,   353,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,   362,     0,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,   367,
       0,     0,   368,     0,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,     0,   383,     0,   384,   385,   386,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,   401,
     402,     0,   403,   404,     0,   405,   406,   407,     0,     0,
     408,     0,   409,     0,   410,   411,     0,   412,   413,     0,
     414,     0,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,     0,   430,   431,   432,   433,     0,     0,     0,
     434,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,     0,     0,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,   453,     0,     0,     0,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,   139,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,     0,     0,     0,   483,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,   491,   492,
       0,     0,   493,     0,     0,   494,     0,   495,     0,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,     0,     0,   508,   509,
       0,   510,   511,   512,     0,   142,   513,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,  2005,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,   353,   354,     0,     0,  2006,   355,
       0,   356,   357,   358,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,   756,   368,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,     0,     0,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   415,     0,     0,   416,   417,
     418,   419,  4022,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
     483,   484,   485,   486,  2008,   487,   488,     0,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,   142,   513,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,   846,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,   644,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,   350,   351,   352,     0,     0,     0,   353,   354,     0,
       0,     0,   355,     0,   356,   357,   358,     0,   359,   360,
     361,   362,     0,   363,   364,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,   367,     0,     0,   368,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,   404,
       0,   405,   406,   407,     0,     0,   408,     0,   409,     0,
     410,   411,     0,   412,   413,     0,   414,     0,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,     0,   430,
     431,   432,   433,     0,     0,     0,   434,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,   453,     0,     0,     0,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,   139,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,   480,   481,   482,
       0,     0,     0,   483,   484,   485,   486,     0,   487,   488,
       0,   489,   490,     0,   491,   492,     0,     0,   493,     0,
       0,   494,     0,   495,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,     0,   508,   509,     0,   510,   511,   512,
       0,   142,   513,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,  1051,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,   644,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,   139,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,   142,   513,   143,   144,   145,   146,
     147,   148,  1466,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,   644,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,     0,     0,   349,   350,   351,   352,
       0,     0,     0,   353,   354,     0,     0,     0,   355,     0,
     356,   357,   358,     0,   359,   360,   361,   362,     0,   363,
     364,     0,     0,     0,     0,     0,     0,     0,     0,   365,
     366,   367,     0,     0,   368,     0,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,     0,   383,     0,   384,   385,   386,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,     0,
       0,   393,   394,   395,   396,   397,     0,     0,   398,   399,
     400,   401,   402,     0,   403,   404,     0,   405,   406,   407,
       0,     0,   408,     0,   409,     0,   410,   411,     0,   412,
     413,     0,   414,     0,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,     0,   430,   431,   432,   433,     0,
       0,     0,   434,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,     0,     0,     0,     0,   448,   449,     0,
     450,     0,     0,   451,     0,     0,   452,   453,     0,     0,
       0,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,     0,   470,   471,   472,   473,     0,
     139,   474,   475,     0,   476,   477,   478,   479,     0,     0,
       0,     0,     0,   480,   481,   482,     0,     0,     0,   483,
     484,   485,   486,     0,   487,   488,     0,   489,   490,     0,
     491,   492,     0,     0,   493,     0,     0,   494,     0,   495,
       0,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,     0,     0,   500,     0,     0,     0,   501,   502,   503,
     504,   505,   506,   507,     0,     0,     0,     0,     0,     0,
     508,   509,     0,   510,   511,   512,     0,   142,   513,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,  2472,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,   644,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,   139,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
     142,   513,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,  1429,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,   644,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
       0,     0,   349,   350,   351,   352,     0,     0,     0,   353,
     354,     0,     0,     0,   355,     0,   356,   357,   358,     0,
     359,   360,   361,   362,     0,   363,   364,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,   367,     0,     0,
     368,     0,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,     0,
     383,     0,   384,   385,   386,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,     0,     0,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,   401,   402,     0,
     403,   404,     0,   405,   406,   407,     0,     0,   408,     0,
     409,     0,   410,   411,     0,   412,   413,     0,   414,     0,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
       0,   430,   431,   432,   433,     0,     0,     0,   434,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,     0,
       0,     0,     0,   448,   449,     0,   450,     0,     0,   451,
       0,     0,   452,   453,     0,     0,     0,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
       0,   470,   471,   472,   473,     0,   139,   474,   475,     0,
     476,   477,   478,   479,     0,     0,     0,     0,     0,   480,
     481,   482,     0,     0,     0,   483,   484,   485,   486,     0,
     487,   488,     0,   489,   490,     0,   491,   492,     0,     0,
     493,     0,     0,   494,     0,   495,     0,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,     0,     0,   500,
       0,     0,     0,   501,   502,   503,   504,   505,   506,   507,
       0,     0,     0,     0,     0,     0,   508,   509,     0,   510,
     511,   512,     0,   142,   513,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,   644,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,   353,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,     0,   368,     0,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,     0,
       0,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,   139,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,   483,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,   142,   513,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,  2908,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,   353,   354,     0,     0,     0,
     355,     0,   356,   357,   358,     0,   359,   360,   361,   362,
       0,   363,   364,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,   367,     0,     0,   368,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,   404,     0,   405,
     406,   407,     0,     0,   408,     0,   409,     0,   410,   411,
       0,   412,   413,     0,   414,     0,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,     0,   430,   431,   432,
     433,     0,     0,     0,   434,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,   453,
       0,     0,     0,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,   139,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,   483,   484,   485,   486,     0,   487,   488,     0,   489,
     490,     0,   491,   492,     0,     0,   493,     0,     0,   494,
       0,   495,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,     0,     0,
       0,     0,   508,   509,     0,   510,   511,   512,     0,   142,
     513,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,  4670,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,  4671,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,   353,   354,
       0,     0,     0,   355,     0,   356,   357,   358,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,     0,   368,
       0,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,     0,     0,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   480,   481,
     482,     0,     0,     0,   483,   484,   485,   486,     0,   487,
     488,     0,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,   142,   513,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,   353,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,   362,     0,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,   367,
       0,     0,   368,     0,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,     0,   383,     0,   384,   385,   386,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,   401,
     402,     0,   403,   404,     0,   405,   406,   407,     0,     0,
     408,     0,   409,     0,   410,   411,     0,   412,   413,     0,
     414,     0,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,     0,   430,   431,   432,   433,     0,     0,     0,
     434,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,     0,   586,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,   453,     0,     0,     0,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,     0,     0,     0,   483,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,   491,   492,
       0,     0,   493,     0,     0,   494,     0,   495,     0,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,     0,     0,   508,   509,
       0,   510,   511,   512,     0,   142,   513,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,  1118,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,   353,   354,     0,     0,     0,   355,
       0,   356,   357,   358,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,     0,   368,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,     0,     0,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
     483,   484,   485,   486,     0,   487,   488,     0,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,   142,   513,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,   946,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,   251,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,   350,   351,   352,     0,     0,     0,   353,   354,     0,
       0,     0,   355,     0,   356,   357,   358,     0,   359,   360,
     361,   362,     0,   363,   364,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,   367,     0,     0,   368,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,   404,
       0,   405,   406,   407,     0,     0,   408,     0,   409,     0,
     410,   411,     0,   412,   413,     0,   414,     0,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,     0,   430,
     431,   432,   433,     0,     0,     0,   434,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,   453,     0,     0,     0,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,  1975,   481,   482,
       0,     0,     0,   483,   484,   485,   486,     0,   487,   488,
       0,   489,   490,     0,   491,   492,     0,     0,   493,     0,
       0,   494,     0,   495,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,     0,   508,   509,     0,   510,   511,   512,
       0,   142,   513,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,   151,     0,
     152,   153,   154,   155,   156,   157,   158,   159,     0,   160,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,   167,   168,     0,     0,
     169,     0,     0,   170,   171,     0,   172,   173,     0,   174,
     175,     0,   176,   177,   178,   179,   180,   181,   182,     0,
     183,   184,   185,   186,   187,   188,   189,     0,   190,   191,
     192,   193,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,   203,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,   216,     0,     0,     0,  2131,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,   225,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,   230,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,   242,   243,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,   253,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,   262,   263,     0,   264,     0,     0,
     265,   266,   267,     0,   268,     0,     0,     0,   269,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,   282,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,   289,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
     353,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,   362,     0,   363,   364,     0,     0,
       0,     0,     0,     0,     0,     0,   365,   366,   367,     0,
       0,   368,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,     0,     0,   380,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,   404,     0,   405,   406,   407,     0,     0,   408,
       0,   409,     0,   410,   411,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,   417,   418,   419,   420,   421,
     422,   423,   424,   425,   426,   427,     0,   428,   429,     0,
       0,     0,   430,   431,   432,   433,     0,     0,     0,   434,
       0,     0,     0,   435,     0,   436,   437,   438,   439,   440,
     441,     0,   442,   443,   444,   445,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,   453,     0,     0,     0,   454,     0,
       0,   455,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,   483,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,   491,   492,     0,
       0,   493,     0,     0,   494,     0,   495,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,   509,     0,
     510,   511,   512,     0,   142,   513,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,   151,     0,   152,   153,   154,   155,   156,   157,   158,
     159,     0,   160,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,   167,
     168,     0,     0,   169,     0,     0,   170,   171,     0,   172,
     173,     0,   174,   175,     0,   176,   177,   178,   179,   180,
     181,   182,     0,   183,   184,   185,   186,   187,   188,   189,
       0,   190,   191,   192,   193,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,   203,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,   216,     0,     0,
       0,   946,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,   225,     0,
       0,   226,   227,   228,     0,     0,     0,   229,     0,   230,
     231,     0,   232,   233,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,   242,   243,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,     0,   250,   251,   252,
       0,     0,   253,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,   262,   263,     0,
     264,     0,     0,   265,   266,   267,     0,   268,     0,     0,
       0,   269,   270,     0,     0,     0,   271,   272,   273,   274,
     275,     0,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,   282,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,     0,     0,     0,   288,
       0,     0,   289,   290,   291,     0,     0,   292,     0,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
       0,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,     0,     0,   349,   350,   351,   352,
       0,     0,     0,   353,   354,     0,     0,     0,   355,     0,
     356,   357,   358,     0,   359,   360,   361,   362,     0,   363,
     364,     0,     0,     0,     0,     0,     0,     0,     0,   365,
     366,   367,     0,     0,   368,     0,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,   379,     0,     0,
     380,   381,   382,     0,   383,     0,   384,   385,   386,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,     0,
       0,   393,   394,   395,   396,   397,     0,     0,   398,   399,
     400,   401,   402,     0,   403,   404,     0,   405,   406,   407,
       0,     0,   408,     0,   409,     0,   410,   411,     0,   412,
     413,     0,   414,     0,   415,     0,     0,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,     0,
     428,   429,     0,     0,     0,   430,   431,   432,   433,     0,
       0,     0,   434,     0,     0,     0,   435,     0,   436,   437,
     438,   439,   440,   441,     0,   442,   443,   444,   445,   446,
     447,     0,     0,     0,     0,     0,     0,   448,   449,     0,
     450,     0,     0,   451,     0,     0,   452,   453,     0,     0,
       0,   454,     0,     0,   455,   456,     0,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,     0,   470,   471,   472,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,     0,     0,
       0,     0,     0,   480,   481,   482,     0,     0,     0,   483,
     484,   485,   486,     0,   487,   488,     0,   489,   490,     0,
     491,   492,     0,     0,   493,     0,     0,   494,     0,   495,
       0,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,     0,     0,   500,     0,     0,     0,   501,   502,   503,
     504,   505,   506,   507,     0,     0,     0,     0,     0,     0,
     508,   509,     0,   510,   511,   512,     0,   142,   513,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,   151,     0,   152,   153,   154,   155,
     156,   157,   158,   159,     0,   160,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,   167,   168,     0,     0,   169,     0,     0,   170,
     171,     0,   172,   173,     0,   174,   175,     0,   176,   177,
     178,   179,   180,   181,   182,     0,   183,   184,   185,   186,
     187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,   203,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
     216,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,   225,     0,     0,   226,   227,   228,     0,     0,     0,
     229,     0,   230,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,   242,   243,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,     0,
     250,   251,   252,     0,     0,   253,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
     262,   263,     0,   264,     0,     0,   265,   266,   267,     0,
     268,     0,     0,     0,   269,   270,     0,     0,     0,   271,
     272,   273,   274,   275,     0,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,   282,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,     0,
       0,     0,   288,     0,     0,   289,   290,   291,     0,     0,
     292,     0,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,     0,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,   353,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
     362,     0,   363,   364,     0,     0,     0,     0,     0,     0,
       0,     0,   365,   366,   367,     0,     0,   368,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,     0,     0,   380,   381,   382,  3106,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,   404,     0,
     405,   406,   407,     0,     0,   408,     0,   409,     0,   410,
     411,     0,   412,   413,     0,   414,     0,   415,     0,     0,
     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
     426,   427,     0,   428,   429,     0,     0,     0,   430,   431,
     432,   433,     0,     0,     0,   434,     0,     0,     0,   435,
       0,   436,   437,   438,   439,   440,   441,     0,   442,   443,
     444,   445,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
     453,     0,     0,     0,   454,     0,     0,   455,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,   483,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,   491,   492,     0,     0,   493,     0,     0,
     494,     0,   495,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,     0,     0,     0,
       0,     0,     0,   508,   509,     0,   510,   511,   512,     0,
     142,   513,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,   151,     0,   152,
     153,   154,   155,   156,   157,   158,   159,     0,   160,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,   167,   168,     0,     0,   169,
       0,     0,   170,   171,     0,   172,   173,     0,   174,   175,
       0,   176,   177,   178,   179,   180,   181,   182,     0,   183,
     184,   185,   186,   187,   188,   189,     0,   190,   191,   192,
     193,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,   203,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,   216,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,   225,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,   230,   231,     0,   232,   233,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
     242,   243,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,     0,   250,   251,   252,     0,     0,   253,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,   262,   263,     0,   264,     0,     0,   265,
     266,   267,     0,   268,     0,     0,     0,   269,   270,     0,
       0,     0,   271,   272,   273,   274,   275,     0,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,   282,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,     0,     0,     0,   288,     0,     0,   289,   290,
     291,     0,     0,   292,     0,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,     0,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
       0,     0,   349,   350,   351,   352,     0,     0,     0,   353,
     354,     0,     0,     0,   355,     0,   356,   357,   358,     0,
     359,   360,   361,   362,     0,   363,   364,     0,     0,     0,
       0,     0,     0,     0,     0,   365,   366,   367,     0,     0,
     368,     0,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,   379,     0,     0,   380,   381,   382,     0,
     383,     0,   384,   385,   386,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,     0,     0,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,   401,   402,     0,
     403,   404,     0,   405,   406,   407,     0,     0,   408,     0,
     409,     0,   410,   411,     0,   412,   413,     0,   414,     0,
     415,     0,     0,   416,   417,   418,   419,   420,   421,   422,
     423,   424,   425,   426,   427,     0,   428,   429,     0,     0,
       0,   430,   431,   432,   433,     0,     0,     0,   434,     0,
       0,     0,   435,     0,   436,   437,   438,   439,   440,   441,
       0,   442,   443,   444,   445,   446,   447,     0,     0,     0,
       0,     0,     0,   448,   449,     0,   450,     0,     0,   451,
       0,     0,   452,   453,     0,     0,     0,   454,     0,     0,
     455,   456,     0,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
       0,   470,   471,   472,   473,     0,   139,   474,   475,     0,
     476,   477,   478,   479,     0,     0,     0,     0,     0,   480,
     481,   482,     0,     0,     0,   483,   484,   485,   486,     0,
     487,   488,     0,   489,   490,     0,   491,   492,     0,     0,
     493,     0,     0,   494,     0,   495,     0,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,     0,     0,   500,
       0,     0,     0,   501,   502,   503,   504,   505,   506,   507,
       0,     0,     0,     0,     0,     0,   508,   509,     0,   510,
     511,   512,     0,   142,   513,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
     151,     0,   152,   153,   154,   155,   156,   157,   158,   159,
       0,   160,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,   167,   168,
       0,     0,   169,     0,     0,   170,   171,     0,   172,   173,
       0,   174,   175,     0,   176,   177,   178,   179,   180,   181,
     182,     0,   183,   184,   185,   186,   187,   188,   189,     0,
     190,   191,   192,   193,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,   203,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,   216,     0,     0,     0,
    3411,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,   225,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,   230,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,   242,   243,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,     0,   250,   251,   252,     0,
       0,   253,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,   262,   263,     0,   264,
       0,     0,   265,   266,   267,     0,   268,     0,     0,     0,
     269,   270,     0,     0,     0,   271,   272,   273,   274,   275,
       0,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,   282,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,     0,     0,     0,   288,     0,
       0,   289,   290,   291,     0,     0,   292,     0,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,     0,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,   353,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,   362,     0,   363,   364,
       0,     0,     0,     0,     0,     0,     0,     0,   365,   366,
     367,     0,     0,   368,     0,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,   379,     0,     0,   380,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,   404,     0,   405,   406,   407,     0,
       0,   408,     0,   409,     0,   410,   411,     0,   412,   413,
       0,   414,     0,   415,     0,     0,   416,   417,   418,   419,
     420,   421,   422,   423,   424,   425,   426,   427,     0,   428,
     429,     0,     0,     0,   430,   431,   432,   433,     0,     0,
       0,   434,     0,     0,     0,   435,     0,   436,   437,   438,
     439,   440,   441,     0,   442,   443,   444,   445,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,   453,     0,     0,     0,
     454,     0,     0,   455,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,     0,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,   483,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,   491,
     492,     0,     0,   493,     0,     0,   494,     0,   495,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,     0,     0,     0,     0,   508,
     509,     0,   510,   511,   512,     0,   142,   513,   143,   144,
     145,   146,   147,   148,  3419,     0,   149,     0,     0,     0,
     150,     0,     0,   151,     0,   152,   153,   154,   155,   156,
     157,   158,   159,     0,   160,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,   167,   168,     0,     0,   169,     0,     0,   170,   171,
       0,   172,   173,     0,   174,   175,     0,   176,   177,   178,
     179,   180,   181,   182,     0,   183,   184,   185,   186,   187,
     188,   189,     0,   190,   191,   192,   193,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,   203,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,   216,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
     225,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,   230,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,   242,   243,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,     0,   250,
     251,   252,     0,     0,   253,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,   262,
     263,     0,   264,     0,     0,   265,   266,   267,     0,   268,
       0,     0,     0,   269,   270,     0,     0,     0,   271,   272,
     273,   274,   275,     0,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,   282,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,     0,     0,
       0,   288,     0,     0,   289,   290,   291,     0,     0,   292,
       0,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,     0,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,   353,   354,     0,     0,     0,
     355,     0,   356,   357,   358,     0,   359,   360,   361,   362,
       0,   363,   364,     0,     0,     0,     0,     0,     0,     0,
       0,   365,   366,   367,     0,     0,   368,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
       0,     0,   380,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,   404,     0,   405,
     406,   407,     0,     0,   408,     0,   409,     0,   410,   411,
       0,   412,   413,     0,   414,     0,   415,     0,     0,   416,
     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,
     427,     0,   428,   429,     0,     0,     0,   430,   431,   432,
     433,     0,     0,     0,   434,     0,     0,     0,   435,     0,
     436,   437,   438,   439,   440,   441,     0,   442,   443,   444,
     445,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,   453,
       0,     0,     0,   454,     0,     0,   455,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,   483,   484,   485,   486,     0,   487,   488,     0,   489,
     490,     0,   491,   492,     0,     0,   493,     0,     0,   494,
       0,   495,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,     0,     0,
       0,     0,   508,   509,     0,   510,   511,   512,     0,   142,
     513,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,   151,     0,   152,   153,
     154,   155,   156,   157,   158,   159,     0,   160,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,   167,   168,     0,     0,   169,     0,
       0,   170,   171,     0,   172,   173,     0,   174,   175,     0,
     176,   177,   178,   179,   180,   181,   182,     0,   183,   184,
     185,   186,   187,   188,   189,     0,   190,   191,   192,   193,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,   203,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,   216,     0,     0,     0,  3443,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,   225,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,   230,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,   242,
     243,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,     0,   250,   251,   252,     0,     0,   253,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,   262,   263,     0,   264,     0,     0,   265,   266,
     267,     0,   268,     0,     0,     0,   269,   270,     0,     0,
       0,   271,   272,   273,   274,   275,     0,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
     282,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,     0,     0,     0,   288,     0,     0,   289,   290,   291,
       0,     0,   292,     0,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,     0,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,   353,   354,
       0,     0,     0,   355,     0,   356,   357,   358,     0,   359,
     360,   361,   362,     0,   363,   364,     0,     0,     0,     0,
       0,     0,     0,     0,   365,   366,   367,     0,     0,   368,
       0,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,   379,     0,     0,   380,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
     404,     0,   405,   406,   407,     0,     0,   408,     0,   409,
       0,   410,   411,     0,   412,   413,     0,   414,     0,   415,
       0,     0,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,     0,   428,   429,     0,     0,     0,
     430,   431,   432,   433,     0,     0,     0,   434,     0,     0,
       0,   435,     0,   436,   437,   438,   439,   440,   441,     0,
     442,   443,   444,   445,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,   453,     0,     0,     0,   454,     0,     0,   455,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   480,   481,
     482,     0,     0,     0,   483,   484,   485,   486,     0,   487,
     488,     0,   489,   490,     0,   491,   492,     0,     0,   493,
       0,     0,   494,     0,   495,     0,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,     0,     0,     0,     0,   508,   509,     0,   510,   511,
     512,     0,   142,   513,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,   151,
       0,   152,   153,   154,   155,   156,   157,   158,   159,     0,
     160,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,   167,   168,     0,
       0,   169,     0,     0,   170,   171,     0,   172,   173,     0,
     174,   175,     0,   176,   177,   178,   179,   180,   181,   182,
       0,   183,   184,   185,   186,   187,   188,   189,     0,   190,
     191,   192,   193,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,   203,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,   216,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,   225,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,   230,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,   242,   243,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,     0,   250,   251,   252,     0,     0,
     253,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,   262,   263,     0,   264,     0,
       0,   265,   266,   267,     0,   268,     0,     0,     0,   269,
     270,     0,     0,     0,   271,   272,   273,   274,   275,     0,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,   282,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,     0,     0,     0,   288,     0,     0,
     289,   290,   291,     0,     0,   292,     0,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,     0,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,   353,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,   362,     0,   363,   364,     0,
       0,     0,     0,     0,     0,     0,     0,   365,   366,   367,
       0,     0,   368,     0,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,   379,     0,     0,   380,   381,
     382,  4333,   383,     0,   384,   385,   386,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,   401,
     402,     0,   403,   404,     0,   405,   406,   407,     0,     0,
     408,     0,   409,     0,   410,   411,     0,   412,   413,     0,
     414,     0,   415,     0,     0,   416,   417,   418,   419,   420,
     421,   422,   423,   424,   425,   426,   427,     0,   428,   429,
       0,     0,     0,   430,   431,   432,   433,     0,     0,     0,
     434,     0,     0,     0,   435,     0,   436,   437,   438,   439,
     440,   441,     0,   442,   443,   444,   445,   446,   447,     0,
       0,     0,     0,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,   453,     0,     0,     0,   454,
       0,     0,   455,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,     0,     0,     0,   483,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,   491,   492,
       0,     0,   493,     0,     0,   494,     0,   495,     0,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,     0,     0,     0,     0,   508,   509,
       0,   510,   511,   512,     0,   142,   513,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,   151,     0,   152,   153,   154,   155,   156,   157,
     158,   159,     0,   160,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
     167,   168,     0,     0,   169,     0,     0,   170,   171,     0,
     172,   173,     0,   174,   175,     0,   176,   177,   178,   179,
     180,   181,   182,     0,   183,   184,   185,   186,   187,   188,
     189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,   203,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,   216,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,   225,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
     230,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,   242,   243,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,     0,   250,   251,
     252,     0,     0,   253,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,   262,   263,
       0,   264,     0,     0,   265,   266,   267,     0,   268,     0,
       0,     0,   269,   270,     0,     0,     0,   271,   272,   273,
     274,   275,     0,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,   282,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,     0,     0,     0,
     288,     0,     0,   289,   290,   291,     0,     0,   292,     0,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,     0,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,   353,   354,     0,     0,     0,   355,
       0,   356,   357,   358,     0,   359,   360,   361,   362,     0,
     363,   364,     0,     0,     0,     0,     0,     0,     0,     0,
     365,   366,   367,     0,     0,   368,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,   379,     0,
       0,   380,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
     407,     0,     0,   408,     0,   409,     0,   410,   411,     0,
     412,   413,     0,   414,     0,   415,     0,     0,   416,   417,
     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
       0,   428,   429,     0,     0,     0,   430,   431,   432,   433,
       0,     0,     0,   434,     0,     0,     0,   435,     0,   436,
     437,   438,   439,   440,   441,     0,   442,   443,   444,   445,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,   453,     0,
       0,     0,   454,     0,     0,   455,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
     483,   484,   485,   486,     0,   487,   488,     0,   489,   490,
       0,   491,   492,     0,     0,   493,     0,     0,   494,     0,
     495,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,     0,     0,     0,
       0,   508,   509,     0,   510,   511,   512,     0,   142,   513,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,   151,     0,   152,   153,   154,
     155,   156,   157,   158,   159,     0,   160,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,   167,   168,     0,     0,   169,     0,     0,
     170,   171,     0,   172,   173,     0,   174,   175,     0,   176,
     177,   178,   179,   180,   181,   182,     0,   183,   184,   185,
     186,   187,   188,   189,     0,   190,   191,   192,   193,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
     203,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,   216,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,   225,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,   230,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
       0,   250,  1890,   252,     0,     0,   253,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,   262,   263,     0,   264,     0,     0,   265,   266,   267,
       0,   268,     0,     0,     0,   269,   270,     0,     0,     0,
     271,   272,   273,   274,   275,     0,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,   282,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
       0,     0,     0,   288,     0,     0,   289,   290,   291,     0,
       0,   292,     0,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,     0,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,  1891,   351,   352,     0,     0,     0,   353,   354,     0,
       0,     0,   355,     0,   356,   357,   358,     0,   359,   360,
     361,   362,     0,   363,   364,     0,     0,     0,     0,     0,
       0,     0,     0,   365,   366,   367,     0,     0,   368,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,   379,     0,     0,   380,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,   404,
       0,   405,   406,   407,     0,     0,   408,     0,   409,     0,
     410,   411,     0,   412,   413,     0,   414,     0,   415,     0,
       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,     0,   428,   429,     0,     0,     0,   430,
     431,   432,   433,     0,     0,     0,   434,     0,     0,     0,
     435,     0,   436,   437,   438,   439,   440,   441,     0,   442,
     443,   444,   445,   446,   447,     0,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,   453,     0,     0,     0,   454,     0,     0,   455,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,   480,   481,   482,
       0,     0,     0,   483,   484,   485,   486,     0,   487,   488,
       0,   489,   490,     0,   491,   492,     0,     0,   493,     0,
       0,   494,     0,   495,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
       0,     0,     0,     0,   508,   509,     0,   510,   511,   512,
       0,   142,   513,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   158,     0,     0,  -372,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,     0,     0,     0,     0,
     169,  4160,     0,   170,   171,     0,   172,     0,     0,     0,
       0,     0,   176,   177,   178,   179,  4161,   181,   182,     0,
     183,   184,     0,     0,     0,     0,     0,     0,   190,     0,
     192,     0,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,     0,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,     0,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,     0,     0,     0,   226,   227,
     228,     0,  -342,  -342,   229,     0,  -342,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,  4162,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,   266,   267,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,   271,   272,   273,   274,   275,  4163,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,     0,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,  4164,     0,     0,   288,     0,     0,     0,
     290,   291,     0,     0,   292,  4165,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,  -327,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
       0,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,  4166,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,     0,
       0,     0,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,     0,     0,     0,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,     0,     0,   405,     0,   407,  -327,     0,   408,
       0,     0,     0,   410,     0,     0,   412,   413,     0,   414,
    4167,   415,     0,     0,   416,     0,   418,   419,   420,   421,
     422,   423,   424,     0,   426,   427,     0,   428,     0,     0,
       0,     0,   430,   431,   432,     0,     0,     0,     0,   434,
       0,     0,     0,     0,     0,     0,   437,     0,     0,   440,
     441,     0,   442,     0,   444,     0,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,     0,     0,     0,     0,   454,     0,
       0,     0,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,     0,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,  -327,     0,     0,     0,   508,     0,     0,
     510,     0,   512,     0,   142,   513,   143,   144,   145,   146,
     147,   148,     0,     0,   149,     0,     0,     0,   150,     0,
       0,     0,     0,   152,   153,   154,   155,   156,   157,   158,
       0,     0,  -372,     0,     0,     0,   161,     0,     0,     0,
     162,     0,     0,   163,   164,   165,     0,   166,     0,     0,
       0,     0,     0,   169,  4160,     0,   170,   171,     0,   172,
       0,     0,     0,     0,     0,   176,   177,   178,   179,  4161,
     181,   182,     0,   183,   184,     0,     0,     0,     0,     0,
       0,   190,     0,   192,     0,   194,   195,   196,   197,     0,
     198,   199,     0,   200,   201,   202,     0,   204,     0,   205,
       0,     0,   206,     0,     0,   207,     0,   208,     0,     0,
     209,     0,   210,     0,     0,     0,   211,   212,   213,     0,
       0,   214,     0,     0,     0,     0,   215,     0,     0,     0,
       0,     0,   217,     0,   218,     0,     0,     0,   219,     0,
     220,   221,   222,   223,   224,     0,     0,     0,     0,     0,
       0,   226,   227,   228,     0,  -363,     0,   229,     0,  -363,
     231,     0,   232,   233,   234,     0,   235,   236,     0,   237,
     238,   239,   240,   241,     0,     0,     0,     0,   244,   245,
     246,   247,     0,     0,   248,   249,  4162,   250,   251,   252,
       0,     0,     0,     0,     0,     0,   254,     0,   255,     0,
     256,     0,   257,   258,   259,   260,   261,     0,   263,     0,
     264,     0,     0,     0,   266,   267,     0,     0,     0,     0,
       0,     0,   270,     0,     0,     0,   271,   272,   273,   274,
     275,  4163,     0,   276,   277,   278,     0,   279,     0,   280,
       0,     0,     0,     0,   281,     0,     0,     0,     0,   283,
       0,   284,   285,     0,   286,   287,  4164,     0,     0,   288,
       0,     0,     0,   290,   291,     0,     0,   292,  4165,     0,
     293,   294,     0,     0,     0,     0,     0,   295,   296,     0,
     297,     0,   298,     0,   299,   300,     0,     0,     0,     0,
    -327,     0,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,     0,   317,
     318,   319,   320,     0,   321,   322,   323,   324,     0,   325,
     326,     0,     0,     0,     0,   327,   328,   329,   330,   331,
     332,     0,     0,   333,   334,     0,   335,     0,   336,     0,
     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,
       0,     0,   347,   348,     0,     0,   349,   350,   351,   352,
       0,     0,     0,     0,   354,     0,     0,     0,   355,     0,
     356,   357,   358,     0,   359,   360,   361,  4166,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     366,   367,     0,     0,     0,     0,   369,     0,   370,   371,
     372,   373,   374,   375,   376,   377,   378,     0,     0,     0,
       0,   381,   382,     0,   383,     0,   384,   385,   386,   387,
     388,     0,   389,   390,   391,     0,     0,   392,     0,     0,
       0,   393,   394,   395,   396,   397,     0,     0,   398,   399,
     400,   401,   402,     0,   403,     0,     0,   405,     0,   407,
    -327,     0,   408,     0,     0,     0,   410,     0,     0,   412,
     413,     0,   414,  4167,   415,     0,     0,   416,     0,   418,
     419,   420,   421,   422,   423,   424,     0,   426,   427,     0,
     428,     0,     0,     0,     0,   430,   431,   432,     0,     0,
       0,     0,   434,     0,     0,     0,     0,     0,     0,   437,
       0,     0,   440,   441,     0,   442,     0,   444,     0,   446,
     447,     0,     0,     0,     0,     0,     0,   448,   449,     0,
     450,     0,     0,   451,     0,     0,   452,     0,     0,     0,
       0,   454,     0,     0,     0,   456,     0,   457,   458,   459,
     460,   461,   462,     0,     0,   463,   464,   465,   466,     0,
     467,   468,     0,   469,     0,   470,   471,   472,   473,     0,
       0,   474,   475,     0,   476,   477,   478,   479,     0,     0,
       0,     0,     0,   480,   481,   482,     0,     0,     0,     0,
     484,   485,   486,     0,   487,   488,     0,   489,   490,     0,
       0,     0,     0,     0,   493,     0,     0,   494,     0,     0,
       0,   496,   497,   498,     0,     0,     0,     0,     0,     0,
     499,     0,     0,   500,     0,     0,     0,   501,   502,   503,
     504,   505,   506,   507,  -363,     0,  -327,     0,     0,     0,
     508,     0,     0,   510,     0,   512,     0,   142,   513,   143,
     144,   145,   146,   147,   148,     0,     0,   149,     0,     0,
       0,   150,     0,     0,     0,     0,   152,   153,   154,   155,
     156,   157,   158,     0,     0,  -372,     0,     0,     0,   161,
       0,     0,     0,   162,     0,     0,   163,   164,   165,     0,
     166,     0,     0,     0,     0,     0,   169,  4160,     0,   170,
     171,     0,   172,     0,     0,     0,     0,     0,   176,   177,
     178,   179,  4161,   181,   182,     0,   183,   184,     0,     0,
       0,     0,     0,     0,   190,     0,   192,     0,   194,   195,
     196,   197,     0,   198,   199,     0,   200,   201,   202,     0,
     204,     0,   205,     0,     0,   206,     0,     0,   207,     0,
     208,     0,     0,   209,     0,   210,     0,     0,     0,   211,
     212,   213,     0,     0,   214,     0,     0,     0,     0,   215,
       0,     0,     0,     0,     0,   217,     0,   218,     0,     0,
       0,   219,     0,   220,   221,   222,   223,   224,     0,     0,
       0,     0,     0,     0,   226,   227,   228,     0,  -360,     0,
     229,     0,  -360,   231,     0,   232,   233,   234,     0,   235,
     236,     0,   237,   238,   239,   240,   241,     0,     0,     0,
       0,   244,   245,   246,   247,     0,     0,   248,   249,  4162,
     250,   251,   252,     0,     0,     0,     0,     0,     0,   254,
       0,   255,     0,   256,     0,   257,   258,   259,   260,   261,
       0,   263,     0,   264,     0,     0,     0,   266,   267,     0,
       0,     0,     0,     0,     0,   270,     0,     0,     0,   271,
     272,   273,   274,   275,  4163,     0,   276,   277,   278,     0,
     279,     0,   280,     0,     0,     0,     0,   281,     0,     0,
       0,     0,   283,     0,   284,   285,     0,   286,   287,  4164,
       0,     0,   288,     0,     0,     0,   290,   291,     0,     0,
     292,  4165,     0,   293,   294,     0,     0,     0,     0,     0,
     295,   296,     0,   297,     0,   298,     0,   299,   300,     0,
       0,     0,     0,  -327,     0,   301,   302,   303,   304,   305,
     306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
     316,     0,   317,   318,   319,   320,     0,   321,   322,   323,
     324,     0,   325,   326,     0,     0,     0,     0,   327,   328,
     329,   330,   331,   332,     0,     0,   333,   334,     0,   335,
       0,   336,     0,   337,   338,   339,   340,   341,   342,   343,
     344,   345,   346,     0,     0,   347,   348,     0,     0,   349,
     350,   351,   352,     0,     0,     0,     0,   354,     0,     0,
       0,   355,     0,   356,   357,   358,     0,   359,   360,   361,
    4166,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   366,   367,     0,     0,     0,     0,   369,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,
       0,     0,     0,     0,   381,   382,     0,   383,     0,   384,
     385,   386,   387,   388,     0,   389,   390,   391,     0,     0,
     392,     0,     0,     0,   393,   394,   395,   396,   397,     0,
       0,   398,   399,   400,   401,   402,     0,   403,     0,     0,
     405,     0,   407,  -327,     0,   408,     0,     0,     0,   410,
       0,     0,   412,   413,     0,   414,  4167,   415,     0,     0,
     416,     0,   418,   419,   420,   421,   422,   423,   424,     0,
     426,   427,     0,   428,     0,     0,     0,     0,   430,   431,
     432,     0,     0,     0,     0,   434,     0,     0,     0,     0,
       0,     0,   437,     0,     0,   440,   441,     0,   442,     0,
     444,     0,   446,   447,     0,     0,     0,     0,     0,     0,
     448,   449,     0,   450,     0,     0,   451,     0,     0,   452,
       0,     0,     0,     0,   454,     0,     0,     0,   456,     0,
     457,   458,   459,   460,   461,   462,     0,     0,   463,   464,
     465,   466,     0,   467,   468,     0,   469,     0,   470,   471,
     472,   473,     0,     0,   474,   475,     0,   476,   477,   478,
     479,     0,     0,     0,     0,     0,   480,   481,   482,     0,
       0,     0,     0,   484,   485,   486,     0,   487,   488,     0,
     489,   490,     0,     0,     0,     0,     0,   493,     0,     0,
     494,     0,     0,     0,   496,   497,   498,     0,     0,     0,
       0,     0,     0,   499,     0,     0,   500,     0,     0,     0,
     501,   502,   503,   504,   505,   506,   507,  -360,     0,  -327,
       0,     0,     0,   508,     0,     0,   510,     0,   512,     0,
     142,   513,   143,   144,   145,   146,   147,   148,     0,     0,
     149,     0,     0,     0,   150,     0,     0,     0,     0,   152,
     153,   154,   155,   156,   157,   158,     0,     0,  -372,     0,
       0,     0,   161,     0,     0,     0,   162,     0,     0,   163,
     164,   165,     0,   166,     0,     0,     0,     0,     0,   169,
    4160,     0,   170,   171,     0,   172,     0,     0,     0,     0,
       0,   176,   177,   178,   179,  4161,   181,   182,     0,   183,
     184,     0,     0,     0,     0,     0,     0,   190,     0,   192,
       0,   194,   195,   196,   197,     0,   198,   199,     0,   200,
     201,   202,     0,   204,     0,   205,     0,     0,   206,     0,
       0,   207,     0,   208,     0,     0,   209,     0,   210,     0,
       0,     0,   211,   212,   213,     0,     0,   214,     0,     0,
       0,     0,   215,     0,     0,     0,     0,     0,   217,     0,
     218,     0,     0,     0,   219,     0,   220,   221,   222,   223,
     224,     0,     0,     0,     0,     0,     0,   226,   227,   228,
       0,     0,     0,   229,     0,  4542,   231,     0,   232,   233,
     234,     0,   235,   236,     0,   237,   238,   239,   240,   241,
       0,     0,     0,     0,   244,   245,   246,   247,     0,     0,
     248,   249,  4162,   250,   251,   252,     0,     0,     0,     0,
       0,     0,   254,     0,   255,     0,   256,     0,   257,   258,
     259,   260,   261,     0,   263,     0,   264,     0,     0,     0,
     266,   267,     0,     0,     0,     0,     0,     0,   270,     0,
       0,     0,   271,   272,   273,   274,   275,  4163,     0,   276,
     277,   278,     0,   279,     0,   280,     0,     0,     0,     0,
     281,     0,     0,     0,     0,   283,     0,   284,   285,     0,
     286,   287,  4164,     0,     0,   288,     0,     0,     0,   290,
     291,     0,     0,   292,  4165,     0,   293,   294,     0,     0,
       0,     0,     0,   295,   296,     0,   297,     0,   298,     0,
     299,   300,     0,     0,     0,     0,  -327,     0,   301,   302,
     303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
     313,   314,   315,   316,     0,   317,   318,   319,   320,     0,
     321,   322,   323,   324,     0,   325,   326,     0,     0,     0,
       0,   327,   328,   329,   330,   331,   332,     0,     0,   333,
     334,     0,   335,     0,   336,     0,   337,   338,   339,   340,
     341,   342,   343,   344,   345,   346,     0,     0,   347,   348,
       0,     0,   349,   350,   351,   352,     0,     0,     0,     0,
     354,     0,     0,     0,   355,     0,   356,   357,   358,     0,
     359,   360,   361,  4166,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   366,   367,     0,     0,
       0,     0,   369,     0,   370,   371,   372,   373,   374,   375,
     376,   377,   378,     0,     0,     0,     0,   381,   382,     0,
     383,     0,   384,   385,   386,   387,   388,     0,   389,   390,
     391,     0,     0,   392,     0,     0,     0,   393,   394,   395,
     396,   397,     0,     0,   398,   399,   400,   401,   402,     0,
     403,     0,     0,   405,     0,   407,  -327,     0,   408,     0,
       0,     0,   410,     0,     0,   412,   413,     0,   414,  4167,
     415,     0,     0,   416,     0,   418,   419,   420,   421,   422,
     423,   424,     0,   426,   427,     0,   428,     0,     0,     0,
       0,   430,   431,   432,     0,     0,     0,     0,   434,     0,
       0,     0,     0,     0,     0,   437,     0,     0,   440,   441,
       0,   442,     0,   444,     0,   446,   447,     0,     0,     0,
       0,     0,     0,   448,   449,     0,   450,     0,     0,   451,
       0,     0,   452,     0,     0,     0,     0,   454,     0,     0,
       0,   456,     0,   457,   458,   459,   460,   461,   462,     0,
       0,   463,   464,   465,   466,     0,   467,   468,     0,   469,
       0,   470,   471,   472,   473,     0,     0,   474,   475,     0,
     476,   477,   478,   479,     0,     0,     0,     0,     0,   480,
     481,   482,     0,     0,     0,     0,   484,   485,   486,     0,
     487,   488,     0,   489,   490,     0,     0,     0,     0,     0,
     493,     0,     0,   494,     0,     0,     0,   496,   497,   498,
       0,     0,     0,     0,     0,     0,   499,     0,     0,   500,
       0,     0,     0,   501,   502,   503,   504,   505,   506,   507,
       0,     0,  -327,     0,     0,     0,   508,     0,     0,   510,
       0,   512,     0,   142,   513,   143,   144,   145,   146,   147,
     148,     0,     0,   149,     0,     0,     0,   150,     0,     0,
       0,     0,   152,   153,   154,   155,   156,   157,   158,     0,
       0,  -372,     0,     0,     0,   161,     0,     0,     0,   162,
       0,     0,   163,   164,   165,     0,   166,     0,     0,     0,
       0,     0,   169,  4160,     0,   170,   171,     0,   172,     0,
       0,     0,     0,     0,   176,   177,   178,   179,  4161,   181,
     182,     0,   183,   184,     0,     0,     0,     0,     0,     0,
     190,     0,   192,     0,   194,   195,   196,   197,     0,   198,
     199,     0,   200,   201,   202,     0,   204,     0,   205,     0,
       0,   206,     0,     0,   207,     0,   208,     0,     0,   209,
       0,   210,     0,     0,     0,   211,   212,   213,     0,     0,
     214,     0,     0,     0,     0,   215,     0,     0,     0,     0,
       0,   217,     0,   218,     0,     0,     0,   219,     0,   220,
     221,   222,   223,   224,     0,     0,     0,     0,     0,     0,
     226,   227,   228,     0,     0,     0,   229,     0,  -365,   231,
       0,   232,   233,   234,     0,   235,   236,     0,   237,   238,
     239,   240,   241,     0,     0,     0,     0,   244,   245,   246,
     247,     0,     0,   248,   249,  4162,   250,   251,   252,     0,
       0,     0,     0,     0,     0,   254,     0,   255,     0,   256,
       0,   257,   258,   259,   260,   261,     0,   263,     0,   264,
       0,     0,     0,   266,   267,     0,     0,     0,     0,     0,
       0,   270,     0,     0,     0,   271,   272,   273,   274,   275,
    4163,     0,   276,   277,   278,     0,   279,     0,   280,     0,
       0,     0,     0,   281,     0,     0,     0,     0,   283,     0,
     284,   285,     0,   286,   287,  4164,     0,     0,   288,     0,
       0,     0,   290,   291,     0,     0,   292,  4165,     0,   293,
     294,     0,     0,     0,     0,     0,   295,   296,     0,   297,
       0,   298,     0,   299,   300,     0,     0,     0,     0,  -327,
       0,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,     0,   317,   318,
     319,   320,     0,   321,   322,   323,   324,     0,   325,   326,
       0,     0,     0,     0,   327,   328,   329,   330,   331,   332,
       0,     0,   333,   334,     0,   335,     0,   336,     0,   337,
     338,   339,   340,   341,   342,   343,   344,   345,   346,     0,
       0,   347,   348,     0,     0,   349,   350,   351,   352,     0,
       0,     0,     0,   354,     0,     0,     0,   355,     0,   356,
     357,   358,     0,   359,   360,   361,  4166,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   366,
     367,     0,     0,     0,     0,   369,     0,   370,   371,   372,
     373,   374,   375,   376,   377,   378,     0,     0,     0,     0,
     381,   382,     0,   383,     0,   384,   385,   386,   387,   388,
       0,   389,   390,   391,     0,     0,   392,     0,     0,     0,
     393,   394,   395,   396,   397,     0,     0,   398,   399,   400,
     401,   402,     0,   403,     0,     0,   405,     0,   407,  -327,
       0,   408,     0,     0,     0,   410,     0,     0,   412,   413,
       0,   414,  4167,   415,     0,     0,   416,     0,   418,   419,
     420,   421,   422,   423,   424,     0,   426,   427,     0,   428,
       0,     0,     0,     0,   430,   431,   432,     0,     0,     0,
       0,   434,     0,     0,     0,     0,     0,     0,   437,     0,
       0,   440,   441,     0,   442,     0,   444,     0,   446,   447,
       0,     0,     0,     0,     0,     0,   448,   449,     0,   450,
       0,     0,   451,     0,     0,   452,     0,     0,     0,     0,
     454,     0,     0,     0,   456,     0,   457,   458,   459,   460,
     461,   462,     0,     0,   463,   464,   465,   466,     0,   467,
     468,     0,   469,     0,   470,   471,   472,   473,     0,     0,
     474,   475,     0,   476,   477,   478,   479,     0,     0,     0,
       0,     0,   480,   481,   482,     0,     0,     0,     0,   484,
     485,   486,     0,   487,   488,     0,   489,   490,     0,     0,
       0,     0,     0,   493,     0,     0,   494,     0,     0,     0,
     496,   497,   498,     0,     0,     0,     0,     0,     0,   499,
       0,     0,   500,     0,     0,     0,   501,   502,   503,   504,
     505,   506,   507,     0,     0,  -327,     0,     0,     0,   508,
       0,     0,   510,     0,   512,     0,   142,   513,   143,   144,
     145,   146,   147,   148,     0,     0,   149,     0,     0,     0,
     150,     0,     0,     0,     0,   152,   153,   154,   155,   156,
     157,   158,     0,     0,  -372,     0,     0,     0,   161,     0,
       0,     0,   162,     0,     0,   163,   164,   165,     0,   166,
       0,     0,     0,     0,     0,   169,  4160,     0,   170,   171,
       0,   172,     0,     0,     0,     0,     0,   176,   177,   178,
     179,  4161,   181,   182,     0,   183,   184,     0,     0,     0,
       0,     0,     0,   190,     0,   192,     0,   194,   195,   196,
     197,     0,   198,   199,     0,   200,   201,   202,     0,   204,
       0,   205,     0,     0,   206,     0,     0,   207,     0,   208,
       0,     0,   209,     0,   210,     0,     0,     0,   211,   212,
     213,     0,     0,   214,     0,     0,     0,     0,   215,     0,
       0,     0,     0,     0,   217,     0,   218,     0,     0,     0,
     219,     0,   220,   221,   222,   223,   224,     0,     0,     0,
       0,     0,     0,   226,   227,   228,     0,     0,     0,   229,
       0,  4675,   231,     0,   232,   233,   234,     0,   235,   236,
       0,   237,   238,   239,   240,   241,     0,     0,     0,     0,
     244,   245,   246,   247,     0,     0,   248,   249,  4162,   250,
     251,   252,     0,     0,     0,     0,     0,     0,   254,     0,
     255,     0,   256,     0,   257,   258,   259,   260,   261,     0,
     263,     0,   264,     0,     0,     0,   266,   267,     0,     0,
       0,     0,     0,     0,   270,     0,     0,     0,   271,   272,
     273,   274,   275,  4163,     0,   276,   277,   278,     0,   279,
       0,   280,     0,     0,     0,     0,   281,     0,     0,     0,
       0,   283,     0,   284,   285,     0,   286,   287,  4164,     0,
       0,   288,     0,     0,     0,   290,   291,     0,     0,   292,
    4165,     0,   293,   294,     0,     0,     0,     0,     0,   295,
     296,     0,   297,     0,   298,     0,   299,   300,     0,     0,
       0,     0,  -327,     0,   301,   302,   303,   304,   305,   306,
     307,   308,   309,   310,   311,   312,   313,   314,   315,   316,
       0,   317,   318,   319,   320,     0,   321,   322,   323,   324,
       0,   325,   326,     0,     0,     0,     0,   327,   328,   329,
     330,   331,   332,     0,     0,   333,   334,     0,   335,     0,
     336,     0,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,     0,     0,   347,   348,     0,     0,   349,   350,
     351,   352,     0,     0,     0,     0,   354,     0,     0,     0,
     355,     0,   356,   357,   358,     0,   359,   360,   361,  4166,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   366,   367,     0,     0,     0,     0,   369,     0,
     370,   371,   372,   373,   374,   375,   376,   377,   378,     0,
       0,     0,     0,   381,   382,     0,   383,     0,   384,   385,
     386,   387,   388,     0,   389,   390,   391,     0,     0,   392,
       0,     0,     0,   393,   394,   395,   396,   397,     0,     0,
     398,   399,   400,   401,   402,     0,   403,     0,     0,   405,
       0,   407,  -327,     0,   408,     0,     0,     0,   410,     0,
       0,   412,   413,     0,   414,  4167,   415,     0,     0,   416,
       0,   418,   419,   420,   421,   422,   423,   424,     0,   426,
     427,     0,   428,     0,     0,     0,     0,   430,   431,   432,
       0,     0,     0,     0,   434,     0,     0,     0,     0,     0,
       0,   437,     0,     0,   440,   441,     0,   442,     0,   444,
       0,   446,   447,     0,     0,     0,     0,     0,     0,   448,
     449,     0,   450,     0,     0,   451,     0,     0,   452,     0,
       0,     0,     0,   454,     0,     0,     0,   456,     0,   457,
     458,   459,   460,   461,   462,     0,     0,   463,   464,   465,
     466,     0,   467,   468,     0,   469,     0,   470,   471,   472,
     473,     0,     0,   474,   475,     0,   476,   477,   478,   479,
       0,     0,     0,     0,     0,   480,   481,   482,     0,     0,
       0,     0,   484,   485,   486,     0,   487,   488,     0,   489,
     490,     0,     0,     0,     0,     0,   493,     0,     0,   494,
       0,     0,     0,   496,   497,   498,     0,     0,     0,     0,
       0,     0,   499,     0,     0,   500,     0,     0,     0,   501,
     502,   503,   504,   505,   506,   507,     0,     0,  -327,     0,
       0,     0,   508,     0,     0,   510,     0,   512,     0,   142,
     513,   143,   144,   145,   146,   147,   148,     0,     0,   149,
       0,     0,     0,   150,     0,     0,     0,     0,   152,   153,
     154,   155,   156,   157,   158,     0,     0,  -372,     0,     0,
       0,   161,     0,     0,     0,   162,     0,     0,   163,   164,
     165,     0,   166,     0,     0,     0,     0,     0,   169,  4160,
       0,   170,   171,     0,   172,     0,     0,     0,     0,     0,
     176,   177,   178,   179,  4161,   181,   182,     0,   183,   184,
       0,     0,     0,     0,     0,     0,   190,     0,   192,     0,
     194,   195,   196,   197,     0,   198,   199,     0,   200,   201,
     202,     0,   204,     0,   205,     0,     0,   206,     0,     0,
     207,     0,   208,     0,     0,   209,     0,   210,     0,     0,
       0,   211,   212,   213,     0,     0,   214,     0,     0,     0,
       0,   215,     0,     0,     0,     0,     0,   217,     0,   218,
       0,     0,     0,   219,     0,   220,   221,   222,   223,   224,
       0,     0,     0,     0,     0,     0,   226,   227,   228,     0,
       0,     0,   229,     0,  4733,   231,     0,   232,   233,   234,
       0,   235,   236,     0,   237,   238,   239,   240,   241,     0,
       0,     0,     0,   244,   245,   246,   247,     0,     0,   248,
     249,  4162,   250,   251,   252,     0,     0,     0,     0,     0,
       0,   254,     0,   255,     0,   256,     0,   257,   258,   259,
     260,   261,     0,   263,     0,   264,     0,     0,     0,   266,
     267,     0,     0,     0,     0,     0,     0,   270,     0,     0,
       0,   271,   272,   273,   274,   275,  4163,     0,   276,   277,
     278,     0,   279,     0,   280,     0,     0,     0,     0,   281,
       0,     0,     0,     0,   283,     0,   284,   285,     0,   286,
     287,  4164,     0,     0,   288,     0,     0,     0,   290,   291,
       0,     0,   292,  4165,     0,   293,   294,     0,     0,     0,
       0,     0,   295,   296,     0,   297,     0,   298,     0,   299,
     300,     0,     0,     0,     0,  -327,     0,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,     0,   317,   318,   319,   320,     0,   321,
     322,   323,   324,     0,   325,   326,     0,     0,     0,     0,
     327,   328,   329,   330,   331,   332,     0,     0,   333,   334,
       0,   335,     0,   336,     0,   337,   338,   339,   340,   341,
     342,   343,   344,   345,   346,     0,     0,   347,   348,     0,
       0,   349,   350,   351,   352,     0,     0,     0,     0,   354,
       0,     0,     0,   355,     0,   356,   357,   358,     0,   359,
     360,   361,  4166,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   366,   367,     0,     0,     0,
       0,   369,     0,   370,   371,   372,   373,   374,   375,   376,
     377,   378,     0,     0,     0,     0,   381,   382,     0,   383,
       0,   384,   385,   386,   387,   388,     0,   389,   390,   391,
       0,     0,   392,     0,     0,     0,   393,   394,   395,   396,
     397,     0,     0,   398,   399,   400,   401,   402,     0,   403,
       0,     0,   405,     0,   407,  -327,     0,   408,     0,     0,
       0,   410,     0,     0,   412,   413,     0,   414,  4167,   415,
       0,     0,   416,     0,   418,   419,   420,   421,   422,   423,
     424,     0,   426,   427,     0,   428,     0,     0,     0,     0,
     430,   431,   432,     0,     0,     0,     0,   434,     0,     0,
       0,     0,     0,     0,   437,     0,     0,   440,   441,     0,
     442,     0,   444,     0,   446,   447,     0,     0,     0,     0,
       0,     0,   448,   449,     0,   450,     0,     0,   451,     0,
       0,   452,     0,     0,     0,     0,   454,     0,     0,     0,
     456,     0,   457,   458,   459,   460,   461,   462,     0,     0,
     463,   464,   465,   466,     0,   467,   468,     0,   469,     0,
     470,   471,   472,   473,     0,     0,   474,   475,     0,   476,
     477,   478,   479,     0,     0,     0,     0,     0,   480,   481,
     482,     0,     0,     0,     0,   484,   485,   486,     0,   487,
     488,     0,   489,   490,     0,     0,     0,     0,     0,   493,
       0,     0,   494,     0,     0,     0,   496,   497,   498,     0,
       0,     0,     0,     0,     0,   499,     0,     0,   500,     0,
       0,     0,   501,   502,   503,   504,   505,   506,   507,     0,
       0,  -327,     0,     0,     0,   508,     0,     0,   510,     0,
     512,     0,   142,   513,   143,   144,   145,   146,   147,   148,
       0,     0,   149,     0,     0,     0,   150,     0,     0,     0,
       0,   152,   153,   154,   155,   156,   157,   158,     0,     0,
    -372,     0,     0,     0,   161,     0,     0,     0,   162,     0,
       0,   163,   164,   165,     0,   166,     0,     0,     0,     0,
       0,   169,  4160,     0,   170,   171,     0,   172,     0,     0,
       0,     0,     0,   176,   177,   178,   179,  4161,   181,   182,
       0,   183,   184,     0,     0,     0,     0,     0,     0,   190,
       0,   192,     0,   194,   195,   196,   197,     0,   198,   199,
       0,   200,   201,   202,     0,   204,     0,   205,     0,     0,
     206,     0,     0,   207,     0,   208,     0,     0,   209,     0,
     210,     0,     0,     0,   211,   212,   213,     0,     0,   214,
       0,     0,     0,     0,   215,     0,     0,     0,     0,     0,
     217,     0,   218,     0,     0,     0,   219,     0,   220,   221,
     222,   223,   224,     0,     0,     0,     0,     0,     0,   226,
     227,   228,     0,     0,     0,   229,     0,  -346,   231,     0,
     232,   233,   234,     0,   235,   236,     0,   237,   238,   239,
     240,   241,     0,     0,     0,     0,   244,   245,   246,   247,
       0,     0,   248,   249,  4162,   250,   251,   252,     0,     0,
       0,     0,     0,     0,   254,     0,   255,     0,   256,     0,
     257,   258,   259,   260,   261,     0,   263,     0,   264,     0,
       0,     0,   266,   267,     0,     0,     0,     0,     0,     0,
     270,     0,     0,     0,   271,   272,   273,   274,   275,  4163,
       0,   276,   277,   278,     0,   279,     0,   280,     0,     0,
       0,     0,   281,     0,     0,     0,     0,   283,     0,   284,
     285,     0,   286,   287,  4164,     0,     0,   288,     0,     0,
       0,   290,   291,     0,     0,   292,  4165,     0,   293,   294,
       0,     0,     0,     0,     0,   295,   296,     0,   297,     0,
     298,     0,   299,   300,     0,     0,     0,     0,  -327,     0,
     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
     311,   312,   313,   314,   315,   316,     0,   317,   318,   319,
     320,     0,   321,   322,   323,   324,     0,   325,   326,     0,
       0,     0,     0,   327,   328,   329,   330,   331,   332,     0,
       0,   333,   334,     0,   335,     0,   336,     0,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,     0,     0,
     347,   348,     0,     0,   349,   350,   351,   352,     0,     0,
       0,     0,   354,     0,     0,     0,   355,     0,   356,   357,
     358,     0,   359,   360,   361,  4166,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   366,   367,
       0,     0,     0,     0,   369,     0,   370,   371,   372,   373,
     374,   375,   376,   377,   378,     0,     0,     0,     0,   381,
     382,     0,   383,     0,   384,   385,   386,   387,   388,     0,
     389,   390,   391,     0,     0,   392,     0,     0,     0,   393,
     394,   395,   396,   397,     0,     0,   398,   399,   400,   401,
     402,     0,   403,     0,     0,   405,     0,   407,  -327,     0,
     408,     0,     0,     0,   410,     0,     0,   412,   413,     0,
     414,  4167,   415,     0,     0,   416,     0,   418,   419,   420,
     421,   422,   423,   424,     0,   426,   427,     0,   428,     0,
       0,     0,     0,   430,   431,   432,     0,     0,     0,     0,
     434,     0,     0,     0,     0,     0,     0,   437,     0,     0,
     440,   441,     0,   442,     0,   444,     0,   446,   447,     0,
       0,     0,     0,     0,     0,   448,   449,     0,   450,     0,
       0,   451,     0,     0,   452,     0,     0,     0,     0,   454,
       0,     0,     0,   456,     0,   457,   458,   459,   460,   461,
     462,     0,     0,   463,   464,   465,   466,     0,   467,   468,
       0,   469,     0,   470,   471,   472,   473,     0,     0,   474,
     475,     0,   476,   477,   478,   479,     0,     0,     0,     0,
       0,   480,   481,   482,     0,     0,     0,     0,   484,   485,
     486,     0,   487,   488,     0,   489,   490,     0,     0,     0,
       0,     0,   493,     0,     0,   494,     0,     0,     0,   496,
     497,   498,     0,     0,     0,     0,     0,     0,   499,     0,
       0,   500,     0,     0,     0,   501,   502,   503,   504,   505,
     506,   507,     0,     0,  -327,     0,     0,     0,   508,     0,
       0,   510,     0,   512,     0,   142,   513,   143,   144,   145,
     146,   147,   148,     0,     0,   149,     0,     0,     0,   150,
       0,     0,     0,     0,   152,   153,   154,   155,   156,   157,
     158,     0,     0,  -372,     0,     0,     0,   161,     0,     0,
       0,   162,     0,     0,   163,   164,   165,     0,   166,     0,
       0,     0,     0,     0,   169,  4160,     0,   170,   171,     0,
     172,     0,     0,     0,     0,     0,   176,   177,   178,   179,
    4161,   181,   182,     0,   183,   184,     0,     0,     0,     0,
       0,     0,   190,     0,   192,     0,   194,   195,   196,   197,
       0,   198,   199,     0,   200,   201,   202,     0,   204,     0,
     205,     0,     0,   206,     0,     0,   207,     0,   208,     0,
       0,   209,     0,   210,     0,     0,     0,   211,   212,   213,
       0,     0,   214,     0,     0,     0,     0,   215,     0,     0,
       0,     0,     0,   217,     0,   218,     0,     0,     0,   219,
       0,   220,   221,   222,   223,   224,     0,     0,     0,     0,
       0,     0,   226,   227,   228,     0,     0,     0,   229,     0,
       0,   231,     0,   232,   233,   234,     0,   235,   236,     0,
     237,   238,   239,   240,   241,     0,     0,     0,     0,   244,
     245,   246,   247,     0,     0,   248,   249,  4162,   250,   251,
     252,     0,     0,     0,     0,     0,     0,   254,     0,   255,
       0,   256,     0,   257,   258,   259,   260,   261,     0,   263,
       0,   264,     0,     0,     0,   266,   267,     0,     0,     0,
       0,     0,     0,   270,     0,     0,     0,   271,   272,   273,
     274,   275,  4163,     0,   276,   277,   278,     0,   279,     0,
     280,     0,     0,     0,     0,   281,     0,     0,     0,     0,
     283,     0,   284,   285,     0,   286,   287,  4164,     0,     0,
     288,     0,     0,     0,   290,   291,     0,     0,   292,  4165,
       0,   293,   294,     0,     0,     0,     0,     0,   295,   296,
       0,   297,     0,   298,     0,   299,   300,     0,     0,     0,
       0,  -327,     0,   301,   302,   303,   304,   305,   306,   307,
     308,   309,   310,   311,   312,   313,   314,   315,   316,     0,
     317,   318,   319,   320,     0,   321,   322,   323,   324,     0,
     325,   326,     0,     0,     0,     0,   327,   328,   329,   330,
     331,   332,     0,     0,   333,   334,     0,   335,     0,   336,
       0,   337,   338,   339,   340,   341,   342,   343,   344,   345,
     346,     0,     0,   347,   348,     0,     0,   349,   350,   351,
     352,     0,     0,     0,     0,   354,     0,     0,     0,   355,
       0,   356,   357,   358,     0,   359,   360,   361,  4166,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,   366,   367,     0,     0,     0,     0,   369,     0,   370,
     371,   372,   373,   374,   375,   376,   377,   378,     0,     0,
       0,     0,   381,   382,     0,   383,     0,   384,   385,   386,
     387,   388,     0,   389,   390,   391,     0,     0,   392,     0,
       0,     0,   393,   394,   395,   396,   397,     0,     0,   398,
     399,   400,   401,   402,     0,   403,     0,     0,   405,     0,
     407,  -327,     0,   408,     0,     0,     0,   410,     0,     0,
     412,   413,     0,   414,  4167,   415,     0,     0,   416,     0,
     418,   419,   420,   421,   422,   423,   424,     0,   426,   427,
       0,   428,     0,     0,     0,     0,   430,   431,   432,     0,
       0,     0,     0,   434,     0,     0,     0,     0,     0,     0,
     437,     0,     0,   440,   441,     0,   442,     0,   444,     0,
     446,   447,     0,     0,     0,     0,     0,     0,   448,   449,
       0,   450,     0,     0,   451,     0,     0,   452,     0,     0,
       0,     0,   454,     0,     0,     0,   456,     0,   457,   458,
     459,   460,   461,   462,     0,     0,   463,   464,   465,   466,
       0,   467,   468,     0,   469,     0,   470,   471,   472,   473,
       0,     0,   474,   475,     0,   476,   477,   478,   479,     0,
       0,     0,     0,     0,   480,   481,   482,     0,     0,     0,
       0,   484,   485,   486,     0,   487,   488,     0,   489,   490,
       0,     0,     0,     0,     0,   493,     0,     0,   494,     0,
       0,     0,   496,   497,   498,     0,     0,     0,     0,     0,
       0,   499,     0,     0,   500,     0,     0,     0,   501,   502,
     503,   504,   505,   506,   507,     0,     0,  -327,     0,     0,
       0,   508,     0,     0,   510,     0,   512,     0,   142,   513,
     143,   144,   145,   146,   147,   148,     0,     0,   149,     0,
       0,     0,   150,     0,     0,     0,     0,   152,   153,   154,
     155,   156,   157,   158,     0,     0,  -372,     0,     0,     0,
     161,     0,     0,     0,   162,     0,     0,   163,   164,   165,
       0,   166,     0,     0,     0,     0,     0,   169,  4160,     0,
     170,   171,     0,   172,     0,     0,     0,     0,     0,   176,
     177,   178,   179,  4161,   181,   182,     0,   183,   184,     0,
       0,     0,     0,     0,     0,   190,     0,   192,     0,   194,
     195,   196,   197,     0,   198,   199,     0,   200,   201,   202,
       0,   204,     0,   205,     0,     0,   206,     0,     0,   207,
       0,   208,     0,     0,   209,     0,   210,     0,     0,     0,
     211,   212,   213,     0,     0,   214,     0,     0,     0,     0,
     215,     0,     0,     0,     0,     0,   217,     0,   218,     0,
       0,     0,   219,     0,   220,   221,   222,   223,   224,     0,
       0,     0,     0,     0,     0,   226,   227,   228,     0,     0,
       0,   229,     0,     0,   231,     0,   232,   233,   234,     0,
     235,   236,     0,   237,   238,   239,   240,   241,     0,     0,
       0,     0,   244,   245,   246,   247,     0,     0,   248,   249,
    4162,   250,   251,   252,     0,     0,     0,     0,     0,     0,
     254,     0,   255,     0,   256,     0,   257,   258,   259,   260,
     261,     0,   263,     0,   264,     0,     0,     0,   266,   267,
       0,     0,     0,     0,     0,     0,   270,     0,     0,     0,
     271,   272,   273,   274,   275,  4163,     0,   276,   277,   278,
       0,   279,     0,   280,     0,     0,     0,     0,   281,     0,
       0,     0,     0,   283,     0,   284,   285,     0,   286,   287,
    4164,     0,     0,   288,     0,     0,     0,   290,   291,     0,
       0,   292,  4165,     0,   293,   294,     0,     0,     0,     0,
       0,   295,   296,     0,   297,     0,   298,     0,   299,   300,
       0,     0,     0,     0,  -327,     0,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,     0,   317,   318,   319,   320,     0,   321,   322,
     323,   324,     0,   325,   326,     0,     0,     0,     0,   327,
     328,   329,   330,   331,   332,     0,     0,   333,   334,     0,
     335,     0,   336,     0,   337,   338,   339,   340,   341,   342,
     343,   344,   345,   346,     0,     0,   347,   348,     0,     0,
     349,   350,   351,   352,     0,     0,     0,     0,   354,     0,
       0,     0,   355,     0,   356,   357,   358,     0,   359,   360,
     361,  4166,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   366,   367,     0,     0,     0,     0,
     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,
     378,     0,     0,     0,     0,   381,   382,     0,   383,     0,
     384,   385,   386,   387,   388,     0,   389,   390,   391,     0,
       0,   392,     0,     0,     0,   393,   394,   395,   396,   397,
       0,     0,   398,   399,   400,   401,   402,     0,   403,     0,
       0,   405,     0,   407,  -327,     0,   408,     0,     0,     0,
     410,     0,     0,   412,   413,     0,   414,  4167,   415,     0,
       0,   416,     0,   418,   419,   420,   421,   422,   423,   424,
       0,   426,   427,     0,   428,     0,     0,     0,     0,   430,
     431,   432,     0,     0,     0,     0,   434,     0,     0,     0,
       0,     0,     0,   437,     0,     0,   440,   441,     0,   442,
       0,   444,     0,   446,   447,     0,     0,     0,     0,     0,
       0,   448,   449,     0,   450,     0,     0,   451,     0,     0,
     452,     0,     0,     0,     0,   454,     0,     0,     0,   456,
       0,   457,   458,   459,   460,   461,   462,     0,     0,   463,
     464,   465,   466,     0,   467,   468,     0,   469,     0,   470,
     471,   472,   473,     0,     0,   474,   475,     0,   476,   477,
     478,   479,     0,     0,     0,     0,     0,   480,   481,   482,
       0,     0,     0,     0,   484,   485,   486,     0,   487,   488,
       0,   489,   490,     0,     0,     0,     0,     0,   493,     0,
       0,  4545,     0,     0,     0,   496,   497,   498,     0,     0,
       0,     0,     0,     0,   499,     0,     0,   500,     0,     0,
       0,   501,   502,   503,   504,   505,   506,   507,     0,     0,
    -327,     0,     0,     0,   508,     0,     0,   510,     0,   512,
       0,   142,   513,   143,   144,   145,   146,   147,   148,     0,
       0,   149,     0,     0,     0,   150,     0,     0,     0,     0,
     152,   153,   154,   155,   156,   157,   158,     0,     0,     0,
       0,     0,     0,   161,     0,     0,     0,   162,     0,     0,
     163,   164,   165,     0,   166,     0,     0,     0,     0,     0,
     169,     0,     0,   170,   171,     0,   172,     0,     0,     0,
       0,     0,   176,   177,   178,   179,     0,   181,   182,     0,
     183,   184,     0,     0,     0,     0,     0,     0,   190,     0,
     192,     0,   194,   195,   196,   197,     0,   198,   199,     0,
     200,   201,   202,     0,   204,     0,   205,     0,     0,   206,
       0,     0,   207,     0,   208,     0,     0,   209,     0,   210,
       0,     0,     0,   211,   212,   213,     0,     0,   214,     0,
       0,     0,     0,   215,     0,     0,     0,     0,     0,   217,
       0,   218,     0,     0,     0,   219,     0,   220,   221,   222,
     223,   224,     0,     0,     0,     0,     0,     0,   226,   227,
     228,     0,     0,     0,   229,     0,     0,   231,     0,   232,
     233,   234,     0,   235,   236,     0,   237,   238,   239,   240,
     241,     0,     0,     0,     0,   244,   245,   246,   247,     0,
       0,   248,   249,     0,   250,   251,   252,     0,     0,     0,
       0,     0,     0,   254,     0,   255,     0,   256,     0,   257,
     258,   259,   260,   261,     0,   263,     0,   264,     0,     0,
       0,   266,   267,     0,     0,     0,     0,     0,     0,   270,
       0,     0,     0,   271,   272,   273,   274,   275,     0,     0,
     276,   277,   278,     0,   279,     0,   280,     0,     0,     0,
       0,   281,     0,     0,     0,     0,   283,     0,   284,   285,
       0,   286,   287,     0,     0,     0,   288,     0,     0,     0,
     290,   291,     0,     0,   292,     0,     0,   293,   294,     0,
       0,     0,     0,     0,   295,   296,     0,   297,     0,   298,
       0,   299,   300,     0,     0,     0,     0,     0,     0,   301,
     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
     312,   313,   314,   315,   316,     0,   317,   318,   319,   320,
       0,   321,   322,   323,   324,     0,   325,   326,     0,     0,
       0,     0,   327,   328,   329,   330,   331,   332,     0,     0,
     333,   334,     0,   335,     0,   336,     0,   337,   338,   339,
     340,   341,   342,   343,   344,   345,   346,     0,     0,   347,
     348,     0,     0,   349,   350,   351,   352,     0,     0,     0,
       0,   354,     0,     0,     0,   355,     0,   356,   357,   358,
       0,   359,   360,   361,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   366,   367,     0,
       0,     0,     0,   369,     0,   370,   371,   372,   373,   374,
     375,   376,   377,   378,     0,     0,     0,     0,   381,   382,
       0,   383,     0,   384,   385,   386,   387,   388,     0,   389,
     390,   391,     0,     0,   392,     0,     0,     0,   393,   394,
     395,   396,   397,     0,     0,   398,   399,   400,   401,   402,
       0,   403,     0,     0,   405,     0,   407,     0,     0,   408,
       0,     0,     0,   410,     0,     0,   412,   413,     0,   414,
       0,   415,     0,     0,   416,     0,   418,   419,   420,   421,
     422,   423,   424,     0,   426,   427,     0,   428,     0,     0,
       0,     0,   430,   431,   432,     0,     0,     0,     0,   434,
       0,     0,     0,     0,     0,     0,   437,     0,     0,   440,
     441,     0,   442,     0,   444,     0,   446,   447,     0,     0,
       0,     0,     0,     0,   448,   449,     0,   450,     0,     0,
     451,     0,     0,   452,     0,     0,     0,     0,   454,     0,
       0,     0,   456,     0,   457,   458,   459,   460,   461,   462,
       0,     0,   463,   464,   465,   466,     0,   467,   468,     0,
     469,     0,   470,   471,   472,   473,     0,     0,   474,   475,
       0,   476,   477,   478,   479,     0,     0,     0,     0,     0,
     480,   481,   482,     0,     0,     0,     0,   484,   485,   486,
       0,   487,   488,     0,   489,   490,     0,     0,     0,     0,
       0,   493,     0,     0,   494,     0,     0,     0,   496,   497,
     498,     0,     0,     0,     0,     0,     0,   499,     0,     0,
     500,     0,     0,     0,   501,   502,   503,   504,   505,   506,
     507,     0,     0,     0,     0,     0,     0,   508,     0,     0,
     510,     0,   512,     0,     0,   513
};

static const yytype_int16 yycheck[] =
{
       6,   598,   929,   576,   672,   949,   950,   597,   598,  1044,
     621,    20,  1221,    19,   640,  1319,   960,    23,  1045,  1951,
    1952,    30,  1150,  1221,  1637,   526,   640,    33,    37,     6,
    1601,  1785,  2121,  1122,    40,  2121,   997,    43,   972,  1365,
    1469,   739,    48,  1168,  1599,  1469,   835,  1633,  1634,    55,
    1449,   543,   544,   545,   680,   547,  1319,   549,  2555,  2405,
     552,     4,   554,   997,   692,  1243,  2616,  1286,  2444,  2226,
    1192,   970,  3044,  1251,   128,  2544,  2573,  2574,  3364,  1346,
    2888,  2238,  2367,  2799,   560,  2677,  2953,  1159,  1373,  3095,
    1861,  1016,  2119,    99,    23,   541,   837,   601,  2193,   998,
     604,   560,  2119,  3090,  2329,  2121,  1049,  2239,  1049,  2193,
     134,  2514,  1936,  3633,  2582,   591,  2962,   123,  2517,   125,
    2466,   127,   128,   129,  3159,  3561,  3045,  2526,  3245,  2102,
    1252,  1253,   591,    18,  1256,  1257,  1258,  1259,   806,  1261,
    1262,  1263,  1264,  1265,  1266,  1267,  1268,  2584,   125,  3451,
     127,  2588,    13,    17,    18,  1080,   666,  1480,  2509,   669,
      13,    20,  2599,   904,  1569,  2732,  2193,   795,   796,   797,
      99,  1579,    18,    21,  2611,  3183,  2193,  1500,    60,   807,
     681,   682,   683,    75,    26,  1508,  1509,  2684,  2685,    20,
     118,    36,    17,    18,  3175,   116,    62,    26,    17,    18,
     676,    20,  3012,  2729,  2730,    13,   132,    13,   132,  2735,
    1950,  2737,    22,  3023,   136,    83,  1624,    20,    29,    32,
      20,    17,    18,    17,    18,    36,    36,  2209,  2573,  2574,
     198,    83,   168,   132,    17,    18,   162,    53,   162,    72,
      50,   136,  2323,   196,    22,    17,    18,    38,   156,   999,
      87,    61,    62,   156,   322,   156,   181,  2180,    36,  4096,
    1039,  1040,   275,   162,    26,    49,  2093,  2989,  3710,    17,
      18,  3020,    50,    17,    18,   215,  2111,   162,    36,    11,
      22,   374,   378,    61,    62,   376,    17,    18,    58,   137,
      45,  4394,    65,    17,    18,   372,   376,   132,   402,   181,
    1079,   233,   429,   185,    89,   255,   145,   416,   310,   237,
      70,   152,  3748,  3749,   196,   463,  3752,   134,    84,    61,
      62,   258,   244,    38,   454,   483,   137,   373,   255,   434,
      13,   162,  3673,    24,  4405,  3771,    13,   233,  3816,  2684,
    2685,   162,  3778,  3629,  2317,   133,  2875,   839,    21,   198,
      12,   369,    17,    18,   233,   401,   275,   833,    42,   561,
    1579,   229,   443,   231,  2715,    65,  2717,   532,   405,   289,
     551,   384,   551,   196,   555,    13,   555,   561,   198,   593,
      17,    18,    17,    18,    17,    18,    17,    18,    17,    18,
    1063,  1064,   260,   526,   216,   362,    72,  3917,   240,   248,
      36,   172,     9,   196,   221,  1624,   561,   181,   629,   630,
      90,   240,   233,   292,   523,   198,    66,  1008,    17,    18,
     310,   162,   424,  1014,  1015,    32,    62,   560,   219,   220,
     201,   251,   112,  2057,  2577,   656,  1109,    75,   619,   261,
     619,   655,  2971,   524,   326,   412,  2693,  4518,   368,   614,
     198,    17,    18,   272,   138,   129,   162,   475,    66,   661,
    1158,   284,   250,   146,   137,   384,  1039,  1040,   577,   146,
     654,   133,   509,  3493,  1172,   292,   318,   531,   240,   429,
    2462,   377,   173,   588,    17,    18,   990,  3828,   327,   318,
      68,  2523,   292,  1282,    21,   195,   654,  1524,  1442,   501,
     425,   628,   429,  2881,   219,   220,   560,   292,  2491,  3355,
     619,   565,  4264,  3359,   662,   561,   620,   191,  3996,   383,
     452,  3999,   386,   460,  3960,   531,   656,   533,  2895,  2896,
    2897,   196,   367,  3969,   275,   384,   365,   591,    17,    18,
    3881,  1042,   633,   425,   550,   219,   425,   388,  2899,  2900,
    2577,  4654,   310,   633,   560,   561,   318,  3993,  2531,   565,
    2577,   567,  3998,   656,   383,    53,   662,   386,   508,   275,
      17,    18,  4409,  1972,   580,  1474,   519,  1245,  1477,   656,
     593,  3867,  1481,  1093,  1483,   591,   654,   383,  3304,   383,
     386,   597,   386,  3090,   364,  3405,   351,  1338,  2693,  3901,
     383,   607,  1536,   386,    17,    18,   256,  3417,  2984,  2693,
     137,   383,  1511,  1512,   386,   289,  1835,   465,   194,  2635,
     626,  1319,   676,  3433,  3434,   568,  1569,  1255,  1569,   429,
     151,   452,  1936,  3668,   640,   383,   642,  3447,   386,   383,
    3896,   478,   386,   459,  1272,  3142,  4398,  4089,   256,   655,
    3366,   425,   383,  3402,   660,   386,   662,   233,   601,   383,
     666,   604,   386,   669,   437,   608,  2693,   673,   674,   429,
     676,  3393,  1413,  1936,   680,   628,  2693,   599,   655,   604,
    1623,   687,  1623,  1608,   416,  2093,   622,  2660,   656,  1135,
    1136,  1813,  2665,   501,   368,   501,  1437,   196,   619,   532,
    2673,  2674,  1824,    75,   599,  1827,  2679,   536,   636,  2032,
     360,  2119,   523,   572,   414,  1161,  4018,   625,   383,  2800,
    1346,   386,   625,  1169,   625,  1171,   572,  4029,  2468,  2556,
    3597,   660,  2714,   739,   660,  1807,   660,  1183,  1184,  1185,
    2575,  3749,   594,   628,   555,  1191,   383,   613,   383,   386,
     383,   386,   383,   386,   383,   386,  1506,   386,  4060,   572,
     628,   660,   654,  2686,   575,    17,    18,  3317,   574,  2174,
     561,  3888,  2180,   637,   656,   660,    17,    18,  1557,   833,
     834,   591,  1292,   642,   383,  2193,  1914,   386,  1414,  3708,
    1579,   523,   621,   654,   800,   659,   802,  3142,   609,   647,
    1414,   654,  3783,   606,    17,    18,  1310,  3158,  4328,   654,
     606,   642,   637,   591,   656,  3661,  3662,   383,   637,   585,
     386,   827,   828,   829,   830,   831,   832,   833,   834,   660,
     836,   837,    41,   633,   618,  1624,   842,   656,   616,   660,
     656,   637,   642,   637,   628,   577,   561,   129,  3883,   591,
     383,   828,  1478,   386,   637,   832,   532,  2412,  1368,   836,
     656,   655,   656,   656,  1478,   637,  3009,  4208,    17,    18,
      17,    18,   655,   879,  2093,   525,   654,  1387,    17,    18,
      17,    18,   656,   655,   656,   626,   892,   619,  2820,   637,
    1394,   541,  2516,   637,   594,   949,  3143,   951,   904,   905,
     954,   955,  3712,   909,   383,  4246,   637,   386,   656,   191,
     584,   655,   656,   637,    17,    18,  2529,   971,  3938,   660,
     626,    17,    18,   501,   655,   656,    17,    18,  2960,  2961,
     194,  2863,   656,   541,  3310,  3313,   383,   219,   465,   386,
    2923,    17,    18,   949,   119,   951,  3349,   122,   954,   955,
     150,    17,    18,  3320,   660,   898,  3355,  1458,  3427,  4711,
    3359,  2180,   483,   892,   181,   971,  1539,  1540,  1541,   233,
     383,   459,   637,   386,  2193,   274,   905,  4413,  3324,  4415,
     909,   655,  3009,  1573,   634,  3552,   129,    17,    18,    73,
     655,  3080,  3009,   492,  3080,  3431,  4516,    17,    18,  4255,
     637,  4257,   637,   201,   637,  1631,   637,   289,   637,   274,
    1016,  3406,  3363,  3481,  1958,  4111,   129,  1041,   655,   656,
     655,   656,   655,   656,  3550,   656,   655,   656,  2599,   605,
     841,    91,  1730,  3559,  1978,   291,    17,    18,   637,  1045,
      17,    18,   401,  4345,   281,  3482,   418,   990,  3143,   992,
     365,    17,    18,  3026,  3186,  3028,  4358,   656,   533,  3143,
      17,    18,  3035,  1069,  3080,  2836,  2027,  2891,    17,    18,
    2499,   637,  2501,  2502,  1080,   550,  3049,  2501,  2502,   201,
    4086,  4383,   492,  3056,  3057,   136,   368,  1093,    34,   277,
     656,   199,   286,  2027,   399,   906,  3069,  3070,  3071,   111,
    1841,  2062,  3075,  3076,   637,   384,   817,   648,    48,  1115,
    1116,  1117,  1118,   184,   655,  4412,  3143,  2384,   674,  2018,
     198,   134,  2211,   656,   292,  3350,  3143,   216,  2062,   366,
     374,   383,  2031,   654,   386,  2034,  2035,   658,  3111,  2424,
    1069,  2263,   383,   642,   189,   386,   289,   237,  2556,   368,
    1626,   345,  1158,   374,    17,    18,    73,  1898,   637,    17,
      18,   492,  2340,  4150,  3731,  3732,  1172,  1626,    12,  2577,
     383,  3738,   261,   386,  3741,  3742,   289,   656,   374,   551,
    1234,  1922,  1923,   242,  4470,    17,    18,  2510,  4284,  1118,
     637,  3758,   251,   244,   328,   451,   492,   275,  1826,  2953,
      17,    18,   561,  2128,   576,  3772,   917,  3733,   425,   656,
    3736,  3778,  3779,  3780,  3781,  1221,   631,  1271,   416,   264,
    2663,  2346,  2347,   198,   637,   368,    53,   209,  1234,    17,
      18,  2174,   642,  2174,   383,  2444,   383,   386,  1936,   386,
    3766,  3767,  3768,   656,   383,   374,   383,   386,  3774,   386,
     223,   275,   662,   170,   159,   368,  3782,   374,  1831,   108,
     374,   429,   561,   129,   169,  1271,  1320,  2339,  3241,   237,
    1276,    17,    18,   147,    20,   831,   216,  2349,  2686,   292,
     383,  4164,  4165,   386,   472,  2693,  1292,   383,  3724,   397,
     386,   491,   383,   261,   416,   386,   367,  2852,  2420,   281,
     164,   385,   584,  3698,  2093,   251,   621,   383,    17,    18,
     386,   642,    26,  1319,  1320,    17,    18,   383,  2527,   364,
     386,   530,  1376,    17,    18,   191,   535,   626,   274,  2527,
     389,   662,  1338,  1843,    17,    18,  1909,  2556,   532,   548,
    1346,   605,    17,    18,   553,  1351,   642,  1353,  1852,   654,
    1356,   564,   364,   383,  1982,   162,   386,   555,  4655,  4656,
     384,   626,  1368,   383,   424,   143,   386,  1310,    17,    18,
    1376,   627,   581,    17,    18,   212,   240,   656,    17,    18,
     158,  1387,  1388,   358,  3541,   637,  4253,   604,  4375,  4376,
     565,  2180,   500,   568,   130,   351,   637,    17,    18,    17,
      18,   452,   383,   655,  2193,   386,   383,  1413,  1414,   386,
     483,  1417,   656,   129,  1357,   656,  1926,   383,   374,  1425,
     386,   258,  1428,   289,   637,   559,   383,  1356,   647,   386,
    3715,  1437,   483,   555,   383,   656,   561,   386,     9,   656,
     284,   584,  1448,  1449,   654,    17,    18,   398,  3019,  3020,
     164,  1394,   586,  1459,  1460,  1461,  1462,  1463,  1464,  1388,
     656,  1937,   483,  1469,  4272,   633,   340,  2686,   385,  1475,
    1476,   584,  1478,  4460,  2693,   191,  1482,   382,  1937,    17,
      18,   172,  1459,  1460,  1461,    54,  1463,  4005,   637,  4205,
     637,   503,   438,    17,    18,   446,    65,  1503,   637,  1476,
     637,   365,   368,   219,   198,  1482,   488,   656,   579,   656,
     201,  1454,  2941,   249,  4800,  4107,  4108,   656,  4490,   656,
     383,   628,  1576,   386,   595,   383,   240,   656,   386,   654,
      83,   149,   492,  1462,   637,  1464,   476,   364,  1481,   656,
     136,   637,   656,  2487,   582,  3921,   637,   384,   599,   656,
      13,   383,  1558,   656,   386,  2683,   561,    17,    18,   532,
     656,   637,  4112,  2189,    13,   656,   383,  2068,   606,   386,
    1576,   637,  1626,   289,  1503,  2189,  2843,  2844,  2845,   483,
     656,   654,  3025,    22,   229,  1591,   231,  2891,   561,   655,
    1596,  1597,    81,   483,  4063,   383,   655,    36,   386,   483,
     483,  3009,  1608,   654,   318,    17,    18,   637,  3051,  3052,
      13,    50,    13,    17,    18,    17,    18,   637,   189,   405,
    1626,   477,    61,    62,   483,  1631,   656,  2716,  2891,  1558,
     361,   362,   459,   654,  1640,   655,  1642,   383,  2816,  1582,
     386,    17,    18,  2969,   115,   133,  4164,  4165,   244,   654,
     606,   365,   368,  4150,   483,   560,   637,  3814,   364,   129,
     637,   242,  1591,   628,   491,  4548,  4549,  2876,  1597,   555,
     251,   637,   536,  4475,   383,   656,  4478,   386,  2876,   656,
     637,   383,   642,   146,   386,    17,    18,   240,   637,   383,
     656,   656,   386,    17,    18,   431,     0,   146,  3876,   656,
     383,   172,   662,   386,  2648,   656,   195,   656,   383,    17,
      18,   386,   281,   642,  2455,  2343,  4062,  4093,   584,    17,
      18,   191,  3900,   509,  1730,  1731,    17,    18,   240,    83,
     201,   251,   654,  3288,   383,  3143,   147,   386,   444,   383,
     662,  2869,   386,   146,   383,   146,   411,   386,   237,   219,
     654,   271,    17,    18,    17,    18,   628,   621,  2384,    17,
      18,   654,   250,   383,   654,   383,   386,  2556,   386,   662,
     654,   654,   261,   648,   637,   649,   650,   651,   652,   637,
     655,   610,   611,  3404,   656,  1791,   198,  3408,  3409,  2235,
    1844,   642,   656,   656,  2240,   654,    17,    18,   656,   658,
     241,   172,   538,  4321,  4322,   637,   359,  2253,   389,    17,
      18,   383,   365,  4464,   386,  4466,    40,   258,   129,   289,
     637,   132,   536,   655,    48,   654,  3799,  1833,  1834,   270,
    2456,  3402,  4634,    17,    18,  1841,   606,  1843,  1844,    17,
      18,  2287,  2456,  3597,   212,   383,  3055,   551,   386,   637,
    1856,   555,   129,   365,   133,  1861,   452,  3055,   492,   383,
    1866,   613,   386,  1869,   616,    17,    18,   655,   584,   662,
    1876,  1877,  3845,  1879,    18,   229,   232,   231,  4375,  4376,
     191,   564,   435,  1937,  3236,   655,   656,   483,  3240,    17,
      18,   637,  1898,    17,    18,  1901,   212,  2686,   368,  1905,
     452,  1955,   237,  2493,  2693,  1834,   260,   621,   219,  1852,
    2356,  3482,  4430,   429,   191,   237,  1922,  1923,  1924,  1925,
    1926,    17,    18,   383,  3143,   414,   386,  4445,   637,   340,
    1936,  1937,    17,    18,   450,   637,  1942,  1943,  1944,   655,
      17,    18,   656,   637,  3343,   416,   655,  1876,  1877,  1955,
    1879,    17,    18,   655,   637,    17,    18,   655,   656,    17,
      18,  2888,   637,  4460,    17,    18,  1972,   237,    17,    18,
     486,   383,  1901,   232,   386,  2936,  1905,  1920,   289,   383,
     655,   383,   386,   536,   386,   141,    81,  1993,   637,    17,
      18,   655,   656,   637,  4512,  1924,  1925,   212,   637,   378,
      17,    18,  2936,   599,   248,   551,   655,   383,   642,   555,
     386,   655,   289,  1942,  1943,  1944,   655,   637,  4536,   637,
      17,    18,    49,  2967,   536,  3351,   467,  2033,   662,   184,
    4548,  4549,    17,    18,   198,   655,   589,  3162,   611,    17,
      18,    17,    18,  2049,    20,  1988,   555,   491,  2947,   558,
    2056,   383,    17,    18,   386,    20,   602,   368,   654,   383,
    2066,  2067,   386,  2069,  2070,   637,  3191,  3192,   621,    61,
      62,  4044,  4045,  4046,  3695,   383,    13,   502,   386,    17,
      18,    73,   471,   655,   555,   383,   502,  3212,   386,  2066,
    2067,   368,   383,   655,   656,   386,   537,  4615,   292,   637,
     195,   655,  3230,   660,  2033,  3314,   577,  4625,   555,   621,
     655,   656,   558,   637,   584,  3701,  3702,   655,   383,   662,
     383,   386,  2128,   386,   380,   383,   276,  2056,   386,   279,
    2871,   655,   655,   656,   600,  2078,    18,  2191,   555,    26,
      33,   572,   237,  2197,  2087,  2088,  3552,   499,   619,  4667,
     523,  4669,   591,  3362,   654,  2098,  2099,  2100,  2101,   195,
    2103,  2104,   383,   552,  3362,   386,   261,   136,     6,   558,
      17,    18,  2226,   612,   613,   383,  4694,   637,   386,   655,
     656,   655,   656,  2189,  2238,  2191,  4704,   654,  4706,   654,
    4708,  2197,    85,  2891,   656,   655,    83,  2203,   654,   383,
    2206,   198,   386,   654,  4722,   383,   361,   362,   386,   146,
     561,  4729,   367,   602,    83,   712,   713,  2843,  2844,  2845,
    2226,   654,   160,   536,   606,   637,  4744,  4745,    36,   177,
     619,   383,  2238,   637,   386,   637,   647,   648,   649,   650,
     651,   652,  4760,  4761,   606,   597,   105,  4765,   654,  2822,
     415,   655,   662,   655,    62,   383,   483,   654,   386,   383,
      20,   637,   386,   654,   491,   147,   654,   160,   654,  2895,
    2896,  2897,   606,   584,   656,   244,   426,   654,  2332,   655,
     662,  2895,  2896,  2897,   221,    18,   471,   383,   640,   786,
     386,   654,  4224,   654,   656,   182,  3424,   654,   383,   654,
     662,   386,   381,   398,   654,   637,   383,   584,  2362,   386,
     654,   119,  1339,   637,   122,  1342,  3077,   383,  1345,   414,
     386,   383,   130,   655,   386,   383,  2332,   654,   386,   637,
     383,   655,  3738,   386,   383,  3741,  3742,   386,   551,   637,
     148,   655,   656,   572,  3105,   105,   637,   655,   654,   846,
     210,  2357,  3758,   240,  3143,   383,  2362,   655,   386,   752,
     229,   654,   231,  3307,   655,  2811,   383,   655,   656,   386,
     655,   656,   637,   654,   637,  3804,  3501,   233,  2384,   637,
    3804,   774,   241,   610,   611,  3346,   383,    17,    18,   386,
     655,   260,   655,   115,   787,   788,   656,   655,   383,   258,
     654,   386,   162,   147,   654,   383,   654,   383,   386,   654,
     386,   270,  3346,  2419,   147,   654,   637,   654,   383,  3628,
      13,   386,   655,   656,   579,   655,   656,   654,   654,   637,
    3628,   318,   614,   615,   655,   617,   196,   619,  2444,  3528,
     595,   249,  2448,  3033,    13,   383,   374,   655,   386,  2455,
    2456,   654,   212,   637,   147,   315,   316,   217,   340,   637,
     320,   321,   654,  2469,   654,  2471,   654,  4556,   654,  4555,
     374,   655,   359,   654,    12,    44,    51,   655,   365,   655,
     656,   241,   654,   452,  4457,   637,   654,  2493,   248,  2543,
    2544,   654,   351,  2499,   654,  2501,  2502,   654,   258,  4253,
     222,    26,   509,   655,  4075,  4076,    62,   655,   656,   637,
     270,  3720,  3013,   637,   483,   275,   655,   656,   411,   654,
    3021,  2527,  3720,   654,   284,   654,  2469,   655,   654,    98,
    2536,   655,   654,  2539,   103,  3027,   383,  2543,  2544,   386,
     433,   637,  3569,   655,   656,   353,   654,  3039,   654,  3041,
    3042,   654,   637,   146,  1051,   655,   656,   654,    83,   655,
     637,  3053,  2539,   119,   655,   656,   122,   654,  4201,  4202,
     655,   637,    61,    62,   130,   637,   469,   115,   655,   637,
     517,   518,   654,   520,   637,   522,   655,   656,   637,   655,
     654,   351,   148,   655,   654,   133,   340,   655,   655,   656,
     537,   655,   655,    65,   655,   656,   655,   340,   467,   637,
    4223,   654,   494,   495,   374,  1128,  1129,  1130,   286,    81,
     637,   654,  2628,   654,   384,   654,  3930,   655,   221,    20,
     599,    93,  1145,   654,   172,   528,   192,  2643,   655,   164,
     637,  2074,  2075,   654,    86,   654,    88,   340,   654,   536,
     654,  2657,   637,  3414,   655,   656,   416,   182,  2091,   637,
     654,   637,    51,   201,  1177,   655,   656,  1180,   390,   656,
     655,   654,   637,   654,  3978,  2108,  2109,   655,   537,   401,
      65,   655,   656,   654,   253,   654,   408,  3448,  1201,  1202,
     132,   499,  1205,   249,  3320,   654,    81,   654,  3459,   637,
     654,  3462,   654,  2709,  2710,  2711,  3320,   467,    93,  1222,
    1223,   654,   154,   582,   105,   240,  4349,   564,  2661,  2662,
    4353,  2664,   654,  2666,  2667,  2668,  2669,  2670,  2671,  2672,
     654,   491,  2675,   195,   621,  2678,   654,   606,   200,  2682,
     655,   656,  2175,  2176,  2177,  2178,   654,   285,   190,   654,
     494,   495,  3342,  1877,  3200,  1879,    60,  4322,   327,   654,
     568,   494,   495,   645,   646,   647,   648,   649,   650,   651,
     652,   162,   655,   656,   381,   237,   374,   537,   189,   198,
    2709,  2710,  2711,   655,   656,   507,   374,  4719,   477,   597,
     637,   202,    83,   318,   350,   593,     6,   353,   649,   261,
     659,   494,   495,   194,   662,   196,  3252,   655,   656,   491,
     195,   655,   656,   655,   656,   200,   662,    83,  1942,  1943,
    1944,   212,   502,   392,   655,   656,   217,   655,   656,   171,
    2836,    97,  2838,   593,   359,   654,  2842,  2843,  2844,  2845,
     365,   275,   233,   655,   656,  2851,   606,   129,   196,    59,
     241,   551,   237,   264,   532,   266,   509,   248,   286,   147,
     655,   656,   655,   656,  2870,  2871,   626,   258,   628,  4801,
    2876,   655,   656,   164,   532,   431,   261,   181,   416,   270,
     602,   185,   642,   129,   275,  2891,   132,  4520,  4521,  2895,
    2896,  2897,   196,   284,   163,   655,   656,   196,   166,   659,
     660,    92,  2908,   647,   648,   649,   650,   651,   652,   191,
     655,   656,   645,   646,   647,   648,   649,   650,   651,   652,
     105,   656,  2851,   375,   517,   518,   519,   520,   521,   522,
     656,  4053,   147,   547,   202,  2941,   398,   219,  3430,   655,
     150,   162,   511,   132,   537,   191,   118,   358,  3538,   240,
     392,   489,   414,   646,   647,   648,   649,   650,   651,   652,
     351,     6,    57,   251,   661,  2908,   654,  4095,   655,   656,
       4,  4536,    67,   219,   655,   656,   117,  2983,  2984,   548,
     127,   655,   656,   374,   482,   523,   254,    82,   655,   656,
    3044,   655,   656,   384,   436,   655,   656,   263,   266,    94,
      95,    96,   413,    17,    18,   656,  3012,   289,   655,   656,
     619,   536,   568,  4222,   552,  3024,  3022,  3023,   113,   655,
     656,  3030,   326,  3029,  4222,   416,   296,   297,   251,   414,
     655,   656,   655,   656,   655,   656,   251,   398,  3044,  3045,
      58,   597,   312,   289,  3050,  3054,   444,  3991,   177,  3055,
     512,  3060,   340,   118,  2983,   230,   241,  3066,  3067,  3065,
     655,   656,   156,   157,   655,   656,   230,   129,   359,   656,
     132,  3077,   338,   258,   365,   656,   467,   662,  3084,  3085,
     227,   619,  3846,  3847,  3090,   270,   368,   355,  3031,  3032,
    3096,  1209,  1210,    73,  3100,    13,   621,  4225,   364,  3105,
     491,  4128,  4667,   625,  4669,   655,  3679,  4134,   105,   123,
     124,   125,   126,   127,   655,   294,  3059,   296,   297,  3096,
     146,   425,   368,  3326,  3327,   340,    10,   512,   656,   191,
     662,   656,   594,   312,  1647,  3141,  3065,  3281,  3282,  4704,
    3607,  3608,   105,   655,   435,   655,   537,  3090,   147,   655,
    2583,  3157,   362,  2586,  2587,   662,  2589,   219,   654,  2592,
    2593,   427,   274,  2596,   129,   662,   351,   132,  2601,  4297,
     374,   441,   442,  2606,  2607,  2608,  2609,  2610,   656,  4744,
    4745,  2614,  2615,   330,  2617,   164,   656,   334,   661,   374,
    2623,  2624,  2625,  2626,   341,   286,  2629,  2630,   286,  2632,
      38,   286,   593,   286,    51,  3148,   494,   495,   286,   594,
     224,   225,   226,   227,   605,   606,   286,   656,   428,  1732,
     430,   656,   642,  1736,   551,   129,   191,   289,   132,   654,
     228,   642,   643,   644,   329,   626,   399,   628,   281,   656,
    3246,   656,   129,   572,   241,   536,   656,  1760,  3254,  4377,
     572,   642,   347,   398,   219,   656,   642,   523,  2691,   196,
    4469,   258,   441,   442,   655,   656,   656,    73,   659,   660,
     532,  4469,   656,   270,   656,  3329,   423,   251,   241,   494,
     495,   649,   467,   252,   122,   549,   186,   191,  3294,   196,
     656,   129,   171,   532,  3884,   258,   403,  3870,   589,   506,
     142,    34,   584,   374,   191,    83,   368,   270,  3314,  3315,
     656,  3254,  3318,    91,  3320,   219,   330,   655,   332,   333,
     334,   402,   656,  3329,   289,   600,    38,   341,     7,  3335,
     621,   632,   219,   605,   481,   656,  3342,  3343,   584,   198,
     118,   340,   229,   655,   231,  4272,   184,   655,   655,   655,
     655,   649,   537,   191,   351,   655,  3362,   645,   646,   647,
     648,   649,   650,   651,   652,   656,   461,   198,   655,   383,
     655,  3377,   386,  3427,   642,   643,   644,   374,  3384,   656,
     654,   219,   220,   648,   479,   289,   164,  4414,   351,  3398,
     593,   492,   655,   561,   655,   655,   655,  4008,   655,  3405,
    4344,   656,   289,   368,   656,  3348,   655,   655,  3414,   423,
     122,  3417,   655,   654,   147,   129,   654,   129,   652,  4363,
     655,  3427,   654,   656,   561,  3431,   561,  3433,  3434,   572,
     645,   646,   647,   648,   649,   650,   651,   652,  3802,  3803,
     626,  3447,  3448,   239,   539,   656,   654,   543,   654,  4571,
      12,   289,    13,  3459,   210,  3384,  3462,   198,   656,   237,
    4057,   662,   557,    27,   368,    29,   480,   481,   272,   656,
     467,   654,   184,   654,   656,   198,   623,   191,   662,   191,
    3486,   368,   662,  3489,    20,  3428,   662,  3541,  3494,   655,
     175,    27,   639,   424,  3437,   494,   495,    61,    62,   472,
      64,   656,   491,   656,   467,   219,   598,   219,   220,    73,
    3516,    49,   656,   196,   352,   201,   349,   523,   251,    83,
     523,   523,   584,  3954,  3955,   363,   482,    91,   523,   367,
     368,   523,   447,   196,   654,  3541,  3967,    73,   642,   317,
     537,   274,   642,  3974,   642,   642,   656,    83,   285,   642,
     374,   600,   642,   642,   118,  4582,  4583,   335,  4585,  4681,
    3489,   374,  3926,  3506,   374,  4774,   642,   642,   132,  4000,
    4001,   135,   160,   642,   537,   289,  4774,   289,  4787,    83,
     662,   359,   642,  4792,   642,   642,   642,   642,  4797,  4787,
     642,  3645,   642,    97,  4792,   642,   132,   606,   642,  4797,
     164,  3034,   115,   642,   642,   247,   247,   340,   662,   623,
     656,   642,     7,   655,  3047,   655,   561,  3623,  4645,   584,
    4647,  4648,  3628,   637,   638,   639,   655,   655,   361,   362,
     655,   655,    14,   655,   655,   655,   140,   656,   572,  3645,
     352,   656,   572,   572,  4241,   662,   645,   646,   647,   648,
     649,   650,   651,   652,   368,   367,   368,   662,   633,   172,
     281,    89,    49,   654,   654,   229,   642,   231,   204,   654,
     572,   654,   642,   237,   381,   198,   198,   198,   248,   198,
     584,   245,   255,  3689,   561,   561,   429,   175,   201,   656,
     368,   258,   258,   229,   387,   231,   260,   584,   331,   654,
     118,   118,  3708,    81,   398,   438,  3712,   398,   398,   572,
     142,   259,  4739,   552,  3720,   259,   398,   552,  3724,    36,
    3726,  4756,   104,   561,   237,   261,  4394,   565,   142,   398,
     568,    49,   398,   400,   398,  4099,  4100,   398,  4102,  4103,
     398,   579,  3685,   572,   654,   654,   584,   212,   654,   587,
     380,   662,    69,   317,   136,   649,   561,   654,   536,   263,
    3814,   494,   495,   654,   249,   249,   655,   655,   150,   655,
     655,   335,   285,   654,   552,   429,   656,   510,   656,   662,
     655,   655,   655,   655,   381,  3791,   654,   649,  3794,   374,
     172,   233,   656,   276,   176,  3801,  3802,  3803,  3804,   655,
     398,   515,   656,   346,   655,   662,   188,   198,  3814,   647,
     648,   599,   251,   429,   655,   655,   642,   258,   258,   656,
     656,   398,   139,  4396,   463,   361,   362,   391,   210,   393,
     261,   367,  3886,   654,   338,   261,    27,   401,   374,   662,
     412,   123,   124,   125,   126,   127,  4419,   164,   374,   561,
     167,  4795,    83,   565,   374,   237,   568,   361,   362,    20,
     364,   655,   244,   656,   654,   654,   384,   579,   655,    49,
     584,   485,   584,   655,   628,   587,   655,   180,   414,   272,
    3886,  4471,    73,   465,   284,   210,   203,   153,   268,   655,
    3896,   655,    83,   656,   483,   258,   212,   493,   411,   258,
      36,   656,   284,   416,   374,   374,   223,  3913,   509,   473,
     115,   655,   645,   646,   647,   648,   649,   650,   651,   652,
    3926,   238,  3976,   427,    57,  3931,   655,   654,   656,   261,
    3939,  3937,   261,    69,    67,   647,   648,   656,   656,  3945,
     628,   132,   224,   225,   226,   227,   654,    87,   501,    82,
     655,   487,   149,   236,   655,   468,   654,   654,   654,  3902,
     275,    94,    95,    96,    36,   529,   530,   531,   655,   286,
    3976,   655,   536,    36,   655,   655,   489,    62,   368,   249,
     113,   655,   655,  4430,   655,   655,  4654,   337,   552,   263,
     424,   656,   556,   310,    18,   200,  4002,   381,  4445,   655,
     628,   541,   248,   139,   654,   656,   655,   662,  3937,  4063,
      49,   575,   656,   217,   337,   606,   606,   654,   509,   523,
     478,   655,    20,   654,   656,   132,   655,   132,   164,   593,
     555,   167,   237,   410,  3977,   417,   654,   662,   229,   552,
     231,    36,  4639,   656,   368,   558,  4052,   337,   330,  4055,
     332,   333,   334,   179,   143,   437,   655,  4063,   594,   341,
     561,   561,   561,   445,   577,  4512,   261,   203,   555,  4642,
     261,   453,   606,   654,   606,   610,   655,   655,  4084,  4085,
     285,  4749,   656,   654,   314,   654,   654,   223,   616,   602,
      15,   654,   656,  4099,  4100,   654,  4102,  4103,   415,   616,
     654,   483,   238,   599,   132,   261,   619,   424,  4776,    20,
     261,   367,   527,   628,   496,   497,   175,   654,   472,   462,
      63,   381,   439,  4052,   655,   599,   656,   463,   655,   542,
     654,   248,   374,   611,   363,   161,   625,    33,   654,   175,
     457,   423,   654,   368,  4150,   655,   142,   563,  4721,   663,
     286,   142,   692,   164,   416,  4161,  4085,   697,    75,   654,
    4166,   196,   196,   655,   546,   625,   198,    33,  4615,   381,
     361,   362,   654,   654,   310,    65,   367,    65,  4625,   655,
     395,   386,   655,   374,   501,   656,   654,   504,   543,  4195,
    4196,   277,  4198,   437,   734,   577,   329,   248,   480,   481,
     655,   160,   381,   660,   381,   654,    49,  4150,    49,   159,
      49,   751,    49,    49,   347,   532,  4222,   599,   654,   601,
     140,   654,   149,   414,   374,  4798,     5,   374,   655,   625,
     160,   232,   131,   291,   551,   660,   284,   554,   555,   663,
      12,   155,   654,    49,    49,    49,    27,  4694,    29,  4255,
     599,  4257,   136,    55,   660,   795,   796,   797,   798,  4706,
     474,  4708,   472,   468,   656,   160,   655,   807,   564,   655,
     214,   656,   660,   656,   230,  4722,   655,   261,    55,   415,
     655,  4287,  4729,    64,   489,   656,   603,   451,   424,   196,
     196,   196,    49,   564,   627,   233,   487,   132,   368,   197,
     656,   654,    83,   439,   491,  2680,  4171,   512,  4314,  3799,
      91,  2572,  3520,  4760,  4761,   992,  1040,  2369,  4765,  3911,
    4266,   457,  4397,  4598,  4378,  1060,  4599,  3909,  3913,  4083,
    4737,  4776,    48,  1935,   599,  1866,  4005,   118,  2836,  4005,
    4746,   623,  4005,  4612,  4005,  4005,   479,   552,  4005,  4005,
    4005,   132,  4005,  4005,   135,   895,   638,   639,  4423,  4612,
    4005,  4549,  4368,  4005,  4005,   501,  4449,  1105,   504,  4448,
    1835,  1585,  4378,  4270,  4092,  2642,  3457,  3622,  4384,  2121,
    2865,  3294,  4368,   164,  2870,  1373,  4053,  4473,  4681,   594,
    3625,  4639,  4579,  1623,  4337,   631,   532,   602,  4241,  3918,
    2635,  3370,  3084,   594,  3689,  2643,   539,  3087,  3931,  3938,
    4700,  4419,  3183,  3749,  4126,  3783,  3987,  3976,   554,  4471,
    2543,  3237,  2789,  3232,   557,  3240,   234,  4403,  4371,  4372,
      11,    11,  4520,  2199,  4521,  4340,  4490,  4353,  4349,  2707,
    4134,  4198,  3405,  2642,  3080,  1020,  1073,  1519,   229,  4455,
     231,  3943,  2513,  2439,  4460,  2128,   237,  4455,  3707,  1619,
    1924,  1597,  2412,  4469,   245,  3289,  2851,   603,  2325,  2460,
    4007,   620,  1949,  3254,   941,  4299,  2234,  2230,  2528,   260,
    2822,  2522,  3353,  1172,  4490,   293,  4593,   295,   296,   297,
     298,   299,  2324,   301,   302,   303,   304,   305,   306,   307,
     308,   309,  3516,   311,   312,   313,  4078,  4260,  3720,  4594,
    1145,  2350,  2941,  1536,  3897,  3076,  4721,  4460,  2465,  3886,
    2203,  1388,  1356,  4577,  2443,  2406,  3628,  3309,  3308,  3362,
    4469,   610,  1640,  1044,   688,  1044,   317,  1044,  4481,  4482,
    2028,  1044,  1467,   598,  2029,  2507,  1086,  3726,   598,  1395,
    3292,  4679,  1855,  4497,   335,  4716,  4589,  4792,  4797,  3978,
     784,  3314,  1788,  2490,  1425,  3342,   597,  3343,   597,  1975,
    2483,  4577,  2482,  2476,  1905,   833,   591,   921,  1348,  4042,
    2455,  2838,  4048,  1415,  1124,  1125,   592,  4593,  4594,   928,
    1631,   628,  1040,  1133,  1134,  1135,  1136,  1137,  1138,  1139,
    1140,  1141,  1142,  1143,  1144,   628,   628,    -1,    -1,    -1,
     391,  4617,   393,  1153,  1154,    -1,  1156,  1157,  4624,  1040,
     401,  1161,    -1,    -1,  1164,  1165,  1166,  1167,    -1,  1169,
    1170,  1171,  1040,   441,   442,    -1,    -1,    -1,  1178,  1179,
      -1,  1181,  1182,  1183,  1184,  1185,    -1,    -1,  1188,  1189,
    1190,  1191,  1192,  1193,  1194,  1195,  1196,  1197,  1198,    -1,
    1200,    -1,    -1,  1203,  1204,    -1,    -1,    -1,  1208,    -1,
      -1,    -1,  1212,  1213,  1214,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1224,  1225,  1226,    -1,    -1,    -1,
      -1,    -1,   473,  1233,    -1,    -1,    -1,    -1,    -1,  4705,
    1240,  1241,  1242,  1243,  4710,    -1,    -1,    -1,    -1,    -1,
      -1,  1251,  1252,  1253,    -1,  1255,  1256,  1257,  1258,  1259,
      -1,  1261,  1262,  1263,  1264,  1265,  1266,  1267,  1268,  4783,
      -1,    -1,  1272,  1273,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4749,    -1,    -1,    -1,    -1,   529,   530,
     531,    -1,    -1,    -1,  4697,   536,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4774,    -1,
    4776,   552,    -1,    -1,    -1,   556,    -1,  4783,    -1,    -1,
      -1,  4787,    -1,    -1,    -1,    -1,  4792,    -1,    -1,    -1,
      -1,  4797,    -1,    -1,   575,    -1,    -1,    -1,    -1,  4232,
    4233,    -1,    -1,  4236,  4237,  4238,  4239,    -1,    -1,    -1,
      -1,    -1,   593,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1360,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     697,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1425,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  1435,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4338,    -1,   734,    -1,    -1,
      -1,  1451,    -1,    -1,    -1,  1455,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   751,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4373,  4374,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4382,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1510,   798,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,     6,    -1,    -1,
      -1,    -1,    -1,    12,    -1,    14,    -1,    16,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    27,    -1,
      29,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   895,    -1,
      59,    -1,    -1,    -1,    -1,    64,    65,    -1,    -1,    -1,
      -1,    -1,    71,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,  1653,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   132,    -1,    -1,   135,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   143,   144,    -1,    -1,    -1,    -1,
      -1,   150,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   158,
      -1,    -1,    -1,   162,    -1,   164,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1766,  1767,  1768,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     229,  1781,   231,    -1,    -1,    -1,   235,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,  1086,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1807,    -1,    -1,
      -1,   260,    -1,  1813,    -1,    -1,  1816,    -1,  1818,    -1,
      -1,    -1,    -1,    -1,  1824,    -1,  1826,  1827,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   284,    -1,  1124,  1125,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1133,  1134,    -1,    -1,
    1137,  1138,  1139,  1140,  1141,  1142,  1143,  1144,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1153,  1154,   317,  1156,
    1157,    -1,    -1,    -1,    -1,    -1,    -1,  1164,  1165,  1166,
    1167,    -1,    -1,  1170,    -1,    -1,   335,    -1,    -1,    -1,
     339,  1178,  1179,    -1,  1181,  1182,    -1,    -1,    -1,    -1,
      -1,  1188,  1189,  1190,    -1,    -1,  1193,  1194,  1195,  1196,
    1197,  1198,    -1,  1200,    -1,    -1,  1203,  1204,    -1,  1919,
      -1,  1208,    -1,    -1,    -1,  1212,  1213,  1214,    -1,    -1,
     379,    -1,    -1,    -1,    -1,   384,    -1,  1224,  1225,  1226,
      -1,    -1,   391,    -1,   393,    -1,  1233,    -1,    -1,   398,
      -1,    -1,   401,  1240,  1241,  1242,    -1,    27,    -1,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1973,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1982,   432,    -1,    -1,  1273,    -1,    -1,    -1,
      -1,    61,    62,    -1,    64,    -1,    -1,   446,   447,   448,
     449,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    91,    -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   132,    -1,    -1,   135,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  1360,    -1,    -1,    -1,    -1,    -1,    -1,
     529,   530,   531,    -1,    -1,    -1,    -1,   536,    -1,    -1,
      -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   552,    -1,    -1,    -1,   556,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2121,    -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,
      -1,   580,    -1,    -1,    -1,    -1,    -1,    -1,  1425,    -1,
      -1,    -1,    -1,  2143,   593,    -1,    -1,    -1,  1435,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,
      -1,   231,    -1,    -1,  1451,    -1,    -1,   237,  1455,    -1,
      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   274,    -1,    -1,    -1,    -1,    -1,
      -1,   660,  2212,    -1,    -1,    -1,  2216,    -1,    -1,    -1,
      -1,  2221,  2222,  1510,    -1,    -1,    -1,    -1,    -1,    -1,
    2230,    -1,  2232,    -1,  2234,  2235,  2236,  2237,    -1,    -1,
    2240,    -1,    -1,    -1,    -1,    -1,    -1,   317,    -1,    -1,
    2250,    -1,  2252,  2253,    -1,  2255,  2256,  2257,  2258,    -1,
    2260,    -1,    -1,  2263,    -1,   335,    -1,    -1,    -1,    -1,
      -1,    -1,  2272,    -1,    -1,    -1,    -1,    -1,    -1,  2279,
      -1,  2281,    -1,  2283,  2284,    -1,  2286,  2287,    -1,    -1,
      -1,  2291,  2292,  2293,    -1,    -1,    -1,  2297,  2298,  2299,
      -1,  2301,    -1,  2303,    -1,  2305,    -1,  2307,    -1,  2309,
      -1,    -1,    -1,    -1,  2314,    -1,    -1,    -1,    -1,    -1,
      -1,   391,    -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   401,    -1,  2333,    -1,    -1,    -1,    -1,    -1,    -1,
    2340,    -1,    -1,  2343,    -1,    -1,    -1,    -1,    -1,  2349,
      -1,    -1,  2352,    -1,    -1,    -1,  2356,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1653,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2420,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   529,
     530,   531,    -1,    -1,    -1,    -1,   536,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1766,
    1767,  1768,   552,    -1,    -1,    -1,   556,    -1,    -1,    -1,
      -1,  2491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    1807,    -1,    -1,   593,    -1,    -1,    -1,    -1,    -1,  1816,
      -1,  1818,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2542,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2555,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2573,  2574,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   654,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1919,    -1,    -1,  2635,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    14,    -1,    16,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2684,  2685,  1973,    -1,    -1,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    51,    52,
      -1,    -1,    -1,    -1,    -1,    -1,    59,    -1,    -1,    -1,
    2720,    64,    65,    -1,  2724,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    85,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2751,  2752,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   104,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2771,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2780,    -1,  2782,    -1,  2784,   128,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   136,   137,   138,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   149,   150,    -1,    -1,
      -1,  2811,    -1,    -1,    -1,    -1,  2816,    -1,    -1,   162,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   176,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2847,    -1,    -1,
     193,    -1,    -1,    -1,    -1,    -1,  2143,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   208,    -1,   210,    -1,    -1,
      -1,   214,    -1,    -1,    -1,   218,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   244,    -1,   246,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   262,
      -1,    -1,    -1,  2923,    -1,  2212,    -1,    -1,    -1,  2216,
      -1,    -1,    -1,    -1,  2221,  2222,    -1,   280,    -1,    -1,
      -1,   284,    -1,  2230,    -1,  2232,    -1,  2234,    -1,  2236,
    2237,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2250,    -1,  2252,    -1,    -1,  2255,  2256,
    2257,  2258,    -1,  2260,  2974,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2272,    -1,    -1,    -1,  2989,
      -1,    -1,  2279,    -1,  2281,    -1,  2283,  2284,    -1,  2286,
      -1,    -1,    -1,    -1,  2291,  2292,  2293,    -1,    -1,    -1,
    2297,  2298,  2299,    -1,  2301,    -1,  2303,    -1,  2305,    -1,
    2307,    -1,  2309,    -1,    -1,    -1,    -1,  2314,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   379,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  2333,    -1,    -1,    -1,
      -1,    -1,    -1,   396,    -1,   398,    -1,    -1,    -1,    -1,
      -1,    -1,  2349,    -1,    -1,  2352,    -1,    -1,   411,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   422,
    3080,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3093,  3094,    -1,    -1,    -1,    -1,    -1,
      -1,   444,    -1,    -1,   447,    -1,   449,    -1,    -1,   452,
      -1,    -1,   455,   456,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   466,    -1,    -1,   469,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   477,    -1,    -1,    14,    -1,    16,
     483,    -1,  3142,    -1,    -1,    -1,    -1,    -1,   491,    -1,
      -1,    -1,    -1,   496,   497,   498,    -1,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    -1,  3165,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    51,    52,    -1,    -1,    -1,    -1,
      -1,    -1,    59,    -1,    -1,   528,    -1,    64,    65,    -1,
      -1,    -1,   535,    -1,    -1,    -1,    -1,  3197,  3198,    -1,
    3200,    -1,    -1,    -1,  2491,    -1,    -1,    -1,    85,  3209,
      -1,    -1,    -1,    -1,  3214,    -1,    -1,  3217,    -1,  3219,
    3220,    -1,    -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   580,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   592,
      -1,   128,  3252,   596,    -1,    -1,   599,    -1,    -1,   136,
     137,   138,   605,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   149,   150,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3283,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   635,    -1,    -1,    -1,    -1,    -1,   641,   176,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3308,    -1,
      -1,   654,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    13,    -1,    -1,
      -1,   208,    -1,   210,    -1,    -1,    -1,   214,    -1,    25,
      -1,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      36,    37,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  3364,    -1,    -1,   244,    -1,   246,
      -1,    -1,    -1,    -1,    -1,    61,    62,    -1,    -1,    -1,
      -1,    -1,    -1,    69,    -1,   262,    -1,    -1,    74,    -1,
      -1,    -1,    -1,  3393,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   280,    -1,    -1,    -1,   284,    -1,    -1,
      -1,    -1,    -1,    -1,   100,    -1,   102,    -1,   104,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     116,    -1,    -1,  2720,    -1,    -1,    -1,  2724,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   137,   138,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2751,  2752,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   163,   164,    -1,
      -1,    -1,   168,    -1,  2771,   171,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2780,    -1,  2782,    -1,  2784,    -1,    -1,
      -1,    -1,   379,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   199,    -1,   201,    -1,    -1,    -1,   396,
      -1,   398,    -1,   209,    -1,   211,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   411,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   422,    -1,    -1,    -1,    -1,
     236,   237,   238,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2847,    -1,    -1,    -1,    -1,    -1,    -1,   444,    -1,    -1,
     447,    -1,   449,   259,    -1,   452,    -1,    -1,   455,   456,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   466,
      -1,    -1,   469,    -1,    -1,   281,    -1,    -1,    -1,    -1,
     477,    -1,    -1,    -1,    -1,    -1,   483,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   491,    -1,    -1,    -1,    -1,   496,
     497,   498,    -1,    -1,   310,    -1,    -1,    -1,    -1,  3629,
      -1,    -1,    -1,    -1,    -1,    -1,  2923,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   528,    -1,    -1,    -1,    -1,    -1,    -1,   535,    -1,
      -1,    -1,    -1,    -1,    -1,  3665,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  3673,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2974,    -1,    -1,
      -1,    -1,   378,    -1,  3694,    -1,    -1,    -1,    -1,    -1,
      35,    36,    -1,   580,    -1,    -1,    41,    -1,    43,    -1,
      45,    46,    -1,    -1,    -1,   592,    -1,    -1,   404,   596,
      -1,    -1,   599,    -1,    -1,    -1,    -1,    62,   605,   415,
     416,    -1,    -1,   419,   420,    -1,    27,    -1,    29,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   440,    -1,    -1,    -1,   635,    -1,
      -1,    -1,    -1,    -1,   641,    -1,    -1,    -1,    -1,    -1,
      61,    62,    -1,    64,    -1,    -1,  3776,   654,    -1,    -1,
      -1,    -1,    73,    -1,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,    83,    -1,    -1,   130,    -1,    -1,    -1,    -1,
      91,    -1,   488,    -1,    -1,    -1,  3093,  3094,    -1,    -1,
      -1,    -1,    -1,   148,    -1,   501,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,  3828,    -1,
     165,    -1,  3832,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   132,    -1,    -1,   135,    -1,   532,    -1,    -1,    -1,
     536,    -1,    -1,    -1,    -1,   190,    -1,   192,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3867,   554,   555,
     205,   206,    -1,   164,    -1,    -1,    -1,    -1,  3165,    -1,
      -1,  3881,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3197,  3198,    -1,    -1,   249,    -1,    -1,   603,  3918,    -1,
      -1,    -1,  3209,    -1,    -1,    -1,    -1,  3214,   614,    -1,
    3217,    -1,  3219,  3220,    -1,    -1,   622,    -1,   229,    -1,
     231,    -1,    -1,   278,    -1,    -1,   237,    -1,    -1,    -1,
      -1,    -1,   287,   288,   245,   290,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   260,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3987,   323,   324,
     325,    -1,    -1,    -1,    -1,    -1,  3283,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4005,    -1,   342,   343,   344,
      -1,    -1,    -1,    -1,    -1,   350,    -1,    -1,   353,    -1,
      -1,  3308,    -1,    -1,    -1,    -1,   317,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   370,   371,     6,    -1,    -1,
      -1,    -1,    -1,    12,   335,    14,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4053,    -1,    -1,    -1,    -1,    27,    -1,
      29,  4061,    -1,    -1,    -1,    -1,    -1,  4067,    -1,  4069,
      -1,   406,   407,    -1,    -1,    -1,    -1,  3364,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      59,    -1,    -1,    -1,    -1,    64,   431,    -1,    -1,    -1,
     391,    -1,   393,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     401,    -1,    -1,    -1,    83,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   101,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   118,
      -1,    -1,   487,    -1,    -1,    -1,   491,    -1,  4158,    -1,
      -1,    -1,    -1,   132,  4164,  4165,   135,    -1,    -1,    -1,
     505,    -1,    -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,
      -1,   150,   473,    -1,    -1,    -1,    -1,    -1,    -1,   158,
      -1,    -1,    -1,    -1,    -1,   164,    -1,  4197,    -1,    -1,
      -1,  4201,  4202,    -1,    -1,    -1,    -1,    -1,  4208,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   194,    -1,   562,    -1,    -1,
     565,    -1,    -1,   568,   569,   570,   571,    -1,   529,   530,
     531,    -1,    -1,    -1,    -1,   536,  4246,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     229,   552,   231,    -1,    -1,   556,    -1,    -1,   237,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   245,   612,   613,    -1,
      -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,    -1,    -1,
      -1,   260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   593,    -1,   639,    -1,    -1,  4307,    -1,  4309,
      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,    -1,  4319,
      -1,  4321,  4322,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4340,    -1,  3629,    -1,    -1,    -1,    -1,    -1,   317,  4349,
      -1,    -1,    -1,  4353,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   335,    -1,    -1,    -1,
     339,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3665,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  3673,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4405,    -1,  3694,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   384,    -1,    -1,    -1,    -1,
      -1,    -1,   391,    -1,   393,    -1,    -1,    -1,  4428,    -1,
    4430,    -1,   401,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4445,  4446,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4463,    -1,    -1,    -1,    -1,    -1,    -1,
    4470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   447,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4512,    -1,    -1,    -1,    -1,    -1,  4518,    -1,
    4520,  4521,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4535,  4536,    -1,    -1,    -1,
      -1,  3828,    -1,    -1,    -1,  3832,    -1,    -1,  4548,  4549,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     529,   530,   531,    -1,    -1,    -1,    -1,   536,    -1,    -1,
      -1,  4571,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    3867,    -1,    -1,   552,    -1,    -1,    -1,   556,    -1,    -1,
      -1,    -1,    -1,    -1,  3881,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   575,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4615,    -1,    -1,    -1,    -1,
      -1,    -1,  4622,    -1,   593,  4625,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4660,    -1,    -1,    -1,    -1,    -1,    -1,  4667,    -1,  4669,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4681,    -1,    -1,  4684,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4694,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4704,    -1,  4706,    -1,  4708,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4722,    -1,    -1,    -1,    -1,    -1,    -1,  4729,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4744,  4745,    -1,    -1,    -1,    -1,
    4750,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4760,  4761,    -1,    -1,    -1,  4765,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  4061,    -1,    -1,    -1,    -1,    -1,
    4067,    -1,  4069,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4800,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4158,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4208,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4246,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    4307,    -1,  4309,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  4319,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  4428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4446,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4470,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  4535,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  4622,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  4660,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  4684,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    47,    48,  4750,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,  4800,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,    -1,   218,   219,   220,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,   232,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,   247,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,   267,   268,    -1,   270,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,   289,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,   573,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,   607,   608,   609,   610,   611,    -1,    -1,   614,   615,
      -1,   617,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    13,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,    -1,
     218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,   232,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,   244,   245,   246,   247,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,   270,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,   289,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,   374,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,   533,   534,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,   607,
     608,   609,   610,   611,    -1,    -1,   614,   615,    -1,   617,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,   198,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,    -1,   218,   219,
     220,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
     270,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,   289,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,   607,   608,   609,
     610,   611,    -1,    -1,   614,   615,    -1,   617,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,    -1,    -1,    -1,   197,   198,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,    -1,   218,   219,   220,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
     232,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,   244,   245,   246,   247,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,   270,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,   289,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,   533,   534,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,   607,   608,   609,   610,   611,
      -1,    -1,   614,   615,    -1,   617,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,    -1,   218,   219,   220,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,   232,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
     244,   245,   246,   247,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,   270,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,   289,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,   578,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,   607,   608,   609,   610,   611,    -1,    -1,
     614,   615,    -1,   617,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,    -1,   218,   219,   220,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,   232,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,   247,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,   270,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,   289,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,   607,   608,   609,   610,   611,    -1,    -1,   614,   615,
      -1,   617,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,    -1,
     218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,   232,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,   244,   245,   246,   247,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,   270,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,   289,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,   533,   534,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,   607,
     608,   609,   610,   611,    -1,    -1,   614,   615,    -1,   617,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,    -1,   218,   219,
     220,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
     270,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,   289,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,   607,   608,   609,
     610,   611,    -1,    -1,   614,   615,    -1,   617,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,    -1,   218,   219,   220,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
     232,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,   244,   245,   246,   247,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,   270,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,   289,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,   361,
     362,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,   533,   534,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,   607,   608,   609,   610,   611,
      -1,    -1,   614,   615,    -1,   617,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,    -1,   218,   219,   220,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,   232,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
     244,   245,   246,   247,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,   270,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,   289,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,   361,   362,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,   578,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,   607,   608,   609,   610,   611,    -1,    -1,
     614,   615,    -1,   617,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,    -1,   218,   219,   220,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,   232,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,   247,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,   270,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,   289,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,   361,   362,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,   607,   608,   609,   610,   611,    -1,    -1,   614,   615,
      -1,   617,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    36,    37,
      38,    39,    40,    41,    42,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    55,    56,    57,
      58,    -1,    60,    61,    62,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,   101,   102,   103,    -1,    -1,   106,   107,
     108,   109,   110,   111,    -1,   113,   114,   115,    -1,   117,
     118,   119,   120,   121,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,   177,
      -1,   179,   180,   181,   182,   183,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,    -1,
     218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,   232,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,   244,   245,   246,   247,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,   270,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,   289,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,   336,   337,
      -1,   339,   340,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,   394,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,   409,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,   451,   452,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,   467,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,   533,   534,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,
     548,   549,   550,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
     578,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,   607,
     608,   609,   610,   611,    -1,    -1,   614,   615,    -1,   617,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   647,
     648,    -1,    -1,    -1,    -1,   653,   654,    -1,    -1,   657,
     658,    -1,    -1,   661,   662,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    36,    37,    38,    39,
      40,    41,    42,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    55,    56,    57,    58,    -1,
      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,   101,   102,   103,    -1,    -1,   106,   107,   108,   109,
     110,   111,    -1,   113,   114,   115,    -1,   117,   118,   119,
     120,   121,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,   177,    -1,   179,
     180,   181,   182,   183,   184,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,    -1,   218,   219,
     220,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,   244,   245,   246,   247,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
     270,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,   289,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
     320,   321,   322,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,   336,   337,    -1,   339,
     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,   352,   353,   354,    -1,    -1,   357,   358,   359,
     360,   361,    -1,   363,   364,   365,    -1,   367,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,   451,   452,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,   467,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,   533,   534,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
     550,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,   578,   579,
     580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,   607,   608,   609,
     610,   611,    -1,    -1,   614,   615,    -1,   617,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   647,   648,    -1,
      -1,    -1,    -1,   653,   654,    -1,    -1,   657,   658,    -1,
      -1,   661,   662,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    38,    39,    40,    41,
      42,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    55,    56,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,   101,
     102,   103,    -1,    -1,   106,   107,   108,   109,   110,   111,
      -1,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
     122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,   177,    -1,   179,   180,   181,
     182,   183,   184,   185,   186,    -1,   188,   189,   190,   191,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,    -1,   218,   219,   220,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
     232,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,   244,   245,   246,   247,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,   270,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,   289,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,   336,   337,    -1,   339,   340,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
     352,   353,   354,    -1,    -1,   357,   358,   359,   360,   361,
      -1,   363,   364,   365,    -1,   367,   368,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,   451,
     452,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,   467,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,   533,   534,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,   578,   579,   580,   581,
     582,   583,   584,   585,   586,   587,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,   607,   608,   609,   610,   611,
      -1,    -1,   614,   615,    -1,   617,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   647,   648,    -1,    -1,    -1,
      -1,   653,   654,    -1,    -1,   657,   658,    -1,    -1,   661,
     662,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    36,    37,    38,    39,    40,    41,    42,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    55,    56,    57,    58,    -1,    60,    61,    62,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,   101,   102,   103,
      -1,    -1,   106,   107,   108,   109,   110,   111,    -1,   113,
     114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,   177,    -1,   179,   180,   181,   182,   183,
     184,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,    -1,   218,   219,   220,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,   232,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
     244,   245,   246,   247,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,   270,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,   289,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,   336,   337,    -1,   339,   340,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,   352,   353,
     354,    -1,    -1,   357,   358,   359,   360,   361,    -1,   363,
     364,   365,    -1,   367,   368,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,   451,   452,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,   467,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,   533,
     534,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
     544,   545,   546,   547,   548,   549,   550,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,   578,   579,   580,   581,   582,   583,
     584,   585,   586,   587,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,   607,   608,   609,   610,   611,    -1,    -1,
     614,   615,    -1,   617,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   647,   648,    -1,    -1,    -1,    -1,   653,
     654,    -1,    -1,   657,   658,    -1,    -1,   661,   662,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      36,    37,    38,    39,    40,    41,    42,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    55,
      56,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,   101,   102,   103,    -1,    -1,
     106,   107,   108,   109,   110,   111,    -1,   113,   114,   115,
      -1,   117,   118,   119,   120,   121,   122,    -1,    -1,    -1,
      -1,   127,   128,   129,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,   177,    -1,   179,   180,   181,   182,   183,   184,   185,
     186,    -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,    -1,   218,   219,   220,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,   232,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,   247,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,   270,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,   289,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
     336,   337,    -1,   339,   340,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,   352,   353,   354,    -1,
      -1,   357,   358,   359,   360,   361,    -1,   363,   364,   365,
      -1,   367,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,   409,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,   451,   452,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,   467,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,   533,   534,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,   544,   545,
     546,   547,   548,   549,   550,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,   578,   579,   580,   581,   582,   583,   584,   585,
     586,   587,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,   607,   608,   609,   610,   611,    -1,    -1,   614,   615,
      -1,   617,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   647,   648,    -1,    -1,    -1,    -1,   653,   654,    -1,
      -1,   657,   658,    -1,    -1,   661,   662,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      38,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,   129,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,   184,   185,   186,    -1,
     188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,   219,   220,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,   289,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,   352,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,   367,
     368,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,   579,   580,   581,   582,   583,   584,   585,   586,   587,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,   661,   662,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    93,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,   200,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
     237,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,    -1,   260,   261,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,   271,   272,    -1,   274,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,
      -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,   483,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,    -1,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,
      -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,    -1,   639,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   662,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    93,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,   200,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,   237,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,   261,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,   512,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   662,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
      -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,   483,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,   580,   581,   582,   583,    -1,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,
      -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,
     639,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,   655,    -1,    -1,    19,
      -1,    -1,    22,   662,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
     580,   581,   582,   583,    -1,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,   655,    15,    -1,    -1,    -1,
      19,   661,   662,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
      -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,   580,   581,   582,   583,    -1,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,
      -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,
     639,    -1,    -1,    -1,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,   654,    -1,    15,    -1,    -1,
      -1,    19,    -1,   662,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
     248,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,    -1,     5,    -1,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,   662,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
      -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,   580,   581,   582,   583,    -1,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,
      -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,
     639,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     649,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,   662,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,    -1,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
     654,    -1,    15,    -1,    -1,    -1,    19,    -1,   662,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,
      -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,
     463,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
     493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,   661,   662,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,    -1,     5,    -1,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
     662,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,
      -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,
     463,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
     493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,    -1,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,    -1,
       5,    -1,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,   662,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,
     245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,
     255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,
      -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,
     285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
     335,    -1,   337,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,    -1,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,
     365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,
     395,    -1,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,   411,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,    -1,
      -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,   554,
      -1,   556,   557,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
     575,   576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
     595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,    -1,    -1,   618,   619,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,    -1,   639,    -1,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   662,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    62,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,   365,
      -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   661,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,   661,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,   271,   272,   273,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,   561,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
     580,   581,   582,   583,    -1,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,    -1,   639,
      -1,    -1,    -1,     5,    -1,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,   661,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      62,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,    -1,
      -1,     5,    -1,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,   661,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,    -1,   639,    -1,    -1,    -1,     5,
      -1,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,   661,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,   365,
      -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,    -1,   639,    -1,    -1,    -1,     5,    -1,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,   661,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
      -1,   639,    -1,    -1,    -1,     5,    -1,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,   661,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
      -1,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,    -1,    -1,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,   187,   188,   189,
     190,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,   264,   265,    -1,    -1,   268,   269,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,
      -1,   291,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,   365,    -1,    -1,    -1,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,    -1,    -1,    -1,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
      -1,    -1,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,
     450,   451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,
     460,   461,    -1,   463,   464,   465,    -1,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
      -1,   481,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,
      -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    -1,   503,   504,    -1,   506,    -1,   508,    -1,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,    -1,   532,    -1,    -1,    -1,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
      -1,   581,   582,   583,    -1,   585,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,
      -1,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,   627,    -1,    -1,
      -1,   631,    -1,    -1,   634,    -1,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,   656,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,   109,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,
      -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,
      -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,   654,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,    -1,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,   649,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,
     271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,
     281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,
     331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1,
     411,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,
      -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,
     501,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,
      -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,   554,    -1,   556,   557,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,
     581,   582,   583,    -1,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,
      -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,   649,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,   649,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,
     245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,
     255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,
      -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,
     285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
     335,    -1,   337,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,    -1,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,
     365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,
     395,    -1,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,   411,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,    -1,
      -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,   554,
      -1,   556,   557,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
     575,   576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
     595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,    -1,    -1,   618,   619,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,   649,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    36,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
     492,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,    -1,   639,    -1,     5,
     642,     7,     8,     9,    10,    11,    12,    13,    14,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,   104,    -1,
     106,    -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
     136,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,   150,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,   210,   211,    -1,    -1,   214,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,   237,   238,    -1,   240,    -1,    -1,    -1,   244,   245,
     246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,   284,   285,
     286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,   365,
      -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,   437,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,   483,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
     496,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,   561,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,   577,    -1,    -1,   580,   581,   582,   583,    -1,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,   599,   600,   601,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    12,
      13,    14,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,   104,    -1,   106,    -1,   108,    -1,   110,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,   136,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,   150,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,
      -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,   237,   238,    -1,   240,    -1,    -1,
      -1,   244,   245,   246,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,   284,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,
     463,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
     483,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
     493,    -1,    -1,   496,   497,    -1,   499,   500,   501,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,   577,    -1,    -1,   580,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,   595,    -1,    -1,   598,   599,   600,   601,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,   191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,   219,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,   289,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,   361,   362,    -1,   364,   365,    -1,    -1,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,   514,   515,   516,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
     580,   581,   582,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,   129,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,   191,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,   216,
      -1,   218,   219,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,   289,    -1,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,
      -1,   368,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,   580,   581,   582,   583,   584,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,
      -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,   129,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,   191,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,   219,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,   289,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,   368,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
     584,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,   129,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
     191,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,   216,    -1,   218,   219,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,
     271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,
     281,    -1,   283,    -1,   285,   286,    -1,    -1,   289,    -1,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,
     331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1,
     411,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,
      -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,
     501,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,
      -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,   554,    -1,   556,   557,   558,   559,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,
     581,   582,   583,   584,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,
      -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,   109,   110,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,
     245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,
     255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,
     285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
     335,    -1,   337,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,    -1,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,
     365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,
     395,    -1,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,   411,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,    -1,
      -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,   554,
      -1,   556,   557,   558,   559,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
     575,   576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
     595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,    -1,    -1,   618,   619,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    38,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,   216,    -1,   218,   219,   220,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
     289,    -1,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,   580,   581,   582,   583,   584,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,
      -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,   289,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,   365,
      -1,    -1,   368,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,   394,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,    -1,    -1,   580,   581,   582,   583,   584,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    36,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,
     273,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,
     463,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
     493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,   561,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,   289,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,   364,   365,    -1,    -1,   368,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,   394,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
     580,   581,   582,   583,   584,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,   110,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,   271,   272,   273,    -1,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,
      -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,   561,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,
      -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,   109,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,   273,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,   561,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    12,    13,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,
     271,   272,   273,    -1,    -1,    -1,    -1,   278,   279,    -1,
     281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,
     331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1,
     411,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,
      -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,
     501,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,
      -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,   554,    -1,   556,   557,   558,   559,    -1,
     561,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,
     581,   582,   583,    -1,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,
      -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,   273,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,   561,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    36,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,
     245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,
     255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,   268,    -1,    -1,   271,   272,   273,    -1,
      -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,
     285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
     335,    -1,   337,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,    -1,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,
     365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,
     395,    -1,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,   411,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,    -1,
      -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,   554,
      -1,   556,   557,   558,   559,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
     575,   576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
     595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,    -1,    -1,   618,   619,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,
     272,   273,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,   561,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    20,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
      -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,   561,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,   580,   581,   582,   583,    -1,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,
      -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,    -1,   178,   179,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,   365,
      -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,
      -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,
     463,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
     493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,   515,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,   198,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
     580,   581,   582,   583,    -1,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,
      -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,    -1,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,
      -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,
      64,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
      84,    85,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    97,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,   128,    -1,    -1,    -1,   132,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,   176,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,   193,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,    -1,
     214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
     364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,   380,   381,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,
      -1,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,    -1,    -1,   411,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,   453,
      -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,   469,   470,   471,   472,   473,
     474,   475,   476,   477,   478,   479,    -1,   481,   482,    -1,
      -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,
      -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,   503,
     504,    -1,   506,   507,   508,   509,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,
      -1,   535,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,    -1,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,   580,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,   591,   592,    -1,
      -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,
     634,   635,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    22,    -1,    24,    25,    26,    27,    28,    29,    30,
      31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,
      51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,
      61,    -1,    63,    64,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    76,    77,    78,    79,    80,
      -1,    82,    83,    84,    85,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    97,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,
      -1,   132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,
      -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,   175,   176,    -1,    -1,   179,   180,
     181,   182,    -1,    -1,   185,   186,    -1,   188,   189,   190,
      -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,   208,   209,    -1,
     211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,
      -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,   230,
     231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,
      -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,
      -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,
     271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,
     281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,
      -1,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,
     331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,    -1,   380,
     381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,
     391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,   408,    -1,    -1,
     411,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,   446,    -1,   448,   449,   450,
      -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,
     461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,
     471,   472,   473,   474,   475,   476,   477,   478,   479,    -1,
     481,   482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,
      -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,
     501,   502,   503,   504,    -1,   506,   507,   508,   509,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,
     521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,
      -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,   554,    -1,   556,   557,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,
     581,   582,   583,    -1,   585,   586,    -1,   588,   589,    -1,
     591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,
      -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,
     621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,
     631,   632,    -1,   634,   635,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,    27,
      28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,
      58,    -1,    60,    61,    -1,    63,    64,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    76,    77,
      78,    79,    80,    -1,    82,    83,    84,    85,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    97,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
     128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,   176,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,    -1,
     188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,
     218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,    -1,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,
      -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,
     268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
     408,    -1,    -1,   411,   412,   413,   414,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,   446,    -1,
     448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,
     458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,
     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
     478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,
     488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,
      -1,   499,   500,   501,   502,   503,   504,    -1,   506,   507,
     508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
     528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,   580,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,
     598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,    -1,    -1,    -1,
      -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,
      25,    26,    27,    28,    29,    30,    31,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,
      -1,    -1,    57,    58,    -1,    60,    61,    -1,    63,    64,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
      85,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,   128,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,   176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,
     185,   186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,    -1,   214,
     215,   216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,
      -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,   234,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,
     245,   246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,
     255,   256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,
     265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,
      -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,
     285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
     335,    -1,   337,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,    -1,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,
     365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,
     395,    -1,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,    -1,    -1,   411,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,   446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,
     455,    -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,
     465,    -1,    -1,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,    -1,   481,   482,    -1,    -1,
      -1,   486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,
      -1,    -1,   497,    -1,   499,   500,   501,   502,   503,   504,
      -1,   506,   507,   508,   509,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,
      -1,    -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,
     535,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,   554,
      -1,   556,   557,   558,   559,    -1,   561,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
     575,   576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,
     585,   586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,
     595,    -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,    -1,    -1,   618,   619,   620,   621,   622,   623,   624,
      -1,    -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,
     635,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      22,    -1,    24,    25,    26,    27,    28,    29,    30,    31,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    50,    51,
      -1,    -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,
      -1,    63,    64,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    76,    77,    78,    79,    80,    -1,
      82,    83,    84,    85,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    97,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,
     132,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,   176,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,
      -1,   193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,    -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,
     222,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
      -1,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,
      -1,   263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,   380,   381,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,
     392,    -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,   408,    -1,    -1,   411,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,   446,    -1,   448,   449,   450,    -1,
      -1,   453,    -1,   455,    -1,   457,   458,    -1,   460,   461,
      -1,   463,    -1,   465,    -1,    -1,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,    -1,   481,
     482,    -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,
      -1,   493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,
     502,   503,   504,    -1,   506,   507,   508,   509,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,
     532,    -1,    -1,   535,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,   591,
     592,    -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,
     632,    -1,   634,   635,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    12,    13,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    22,    -1,    24,    25,    26,    27,    28,
      29,    30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,
      -1,    60,    61,    -1,    63,    64,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    -1,    82,    83,    84,    85,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    97,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
     149,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,   176,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,    -1,   188,
     189,   190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,
      -1,    -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,    -1,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,
      -1,   260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,
      -1,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
      -1,    -1,    -1,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,   380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
      -1,    -1,   411,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,   446,    -1,   448,
     449,   450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,
      -1,   460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,
     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
     479,    -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,
     489,    -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,
     499,   500,   501,   502,   503,   504,    -1,   506,   507,   508,
     509,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,
      -1,    -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,   580,   581,   582,   583,    -1,   585,   586,    -1,   588,
     589,    -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,
      -1,   600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,
      -1,    -1,   631,   632,    -1,   634,   635,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,
      26,    27,    28,    29,    30,    31,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,
      -1,    57,    58,    -1,    60,    61,    -1,    63,    64,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      76,    77,    78,    79,    80,    -1,    82,    83,    84,    85,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,   128,    -1,    -1,    -1,   132,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
     176,    -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,
     186,    -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,    -1,   214,   215,
     216,    -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,    -1,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
     246,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,    -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,
      -1,    -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,   364,   365,
      -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,   408,    -1,    -1,   411,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
     446,    -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,
      -1,   457,   458,    -1,   460,   461,    -1,   463,    -1,   465,
      -1,    -1,   468,   469,   470,   471,   472,   473,   474,   475,
     476,   477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,
     486,   487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,
      -1,   497,    -1,   499,   500,   501,   502,   503,   504,    -1,
     506,   507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,
     586,    -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,
      -1,    -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,    -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    22,
      -1,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    50,    51,    -1,
      -1,    54,    -1,    -1,    57,    58,    -1,    60,    61,    -1,
      63,    64,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    76,    77,    78,    79,    80,    -1,    82,
      83,    84,    85,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    97,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,   128,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,   149,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,   176,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,
     193,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
      -1,   214,   215,   216,    -1,   218,    -1,    -1,    -1,   222,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,
      -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,   246,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,
     263,   264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,
      -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,    -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,   364,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,   380,   381,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   390,   391,   392,
      -1,    -1,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,   408,    -1,    -1,   411,   412,
     413,   414,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,   446,    -1,   448,   449,   450,    -1,    -1,
     453,    -1,   455,    -1,   457,   458,    -1,   460,   461,    -1,
     463,    -1,   465,    -1,    -1,   468,   469,   470,   471,   472,
     473,   474,   475,   476,   477,   478,   479,    -1,   481,   482,
      -1,    -1,    -1,   486,   487,   488,   489,    -1,    -1,    -1,
     493,    -1,    -1,    -1,   497,    -1,   499,   500,   501,   502,
     503,   504,    -1,   506,   507,   508,   509,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,   528,    -1,    -1,    -1,   532,
      -1,    -1,   535,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,    -1,    -1,    -1,   580,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,   591,   592,
      -1,    -1,   595,    -1,    -1,   598,    -1,   600,    -1,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,    -1,    -1,    -1,    -1,   631,   632,
      -1,   634,   635,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    22,    -1,    24,    25,    26,    27,    28,    29,
      30,    31,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      50,    51,    -1,    -1,    54,    -1,    -1,    57,    58,    -1,
      60,    61,    -1,    63,    64,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    76,    77,    78,    79,
      80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    97,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,   128,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,   149,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
     160,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,    -1,   188,   189,
     190,    -1,    -1,   193,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,    -1,   214,   215,   216,    -1,   218,    -1,
      -1,    -1,   222,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,    -1,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,   246,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,    -1,    -1,    -1,
     260,    -1,    -1,   263,   264,   265,    -1,    -1,   268,    -1,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,
      -1,    -1,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,   364,   365,    -1,    -1,    -1,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
     380,   381,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     390,   391,   392,    -1,    -1,   395,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,   408,    -1,
      -1,   411,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,   446,    -1,   448,   449,
     450,    -1,    -1,   453,    -1,   455,    -1,   457,   458,    -1,
     460,   461,    -1,   463,    -1,   465,    -1,    -1,   468,   469,
     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
      -1,   481,   482,    -1,    -1,    -1,   486,   487,   488,   489,
      -1,    -1,    -1,   493,    -1,    -1,    -1,   497,    -1,   499,
     500,   501,   502,   503,   504,    -1,   506,   507,   508,   509,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,   528,    -1,
      -1,    -1,   532,    -1,    -1,   535,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
     580,   581,   582,   583,    -1,   585,   586,    -1,   588,   589,
      -1,   591,   592,    -1,    -1,   595,    -1,    -1,   598,    -1,
     600,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,    -1,    -1,    -1,
      -1,   631,   632,    -1,   634,   635,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    22,    -1,    24,    25,    26,
      27,    28,    29,    30,    31,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    50,    51,    -1,    -1,    54,    -1,    -1,
      57,    58,    -1,    60,    61,    -1,    63,    64,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    76,
      77,    78,    79,    80,    -1,    82,    83,    84,    85,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      97,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,   128,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,   149,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,   160,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,   175,   176,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
      -1,   188,   189,   190,    -1,    -1,   193,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,   208,   209,    -1,   211,    -1,    -1,   214,   215,   216,
      -1,   218,    -1,    -1,    -1,   222,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,    -1,    -1,   234,   235,   236,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,   246,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
      -1,    -1,    -1,   260,    -1,    -1,   263,   264,   265,    -1,
      -1,   268,    -1,    -1,   271,   272,    -1,    -1,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,    -1,    -1,    -1,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,   364,   365,    -1,
      -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,   380,   381,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   390,   391,   392,    -1,    -1,   395,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,   408,    -1,    -1,   411,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,   446,
      -1,   448,   449,   450,    -1,    -1,   453,    -1,   455,    -1,
     457,   458,    -1,   460,   461,    -1,   463,    -1,   465,    -1,
      -1,   468,   469,   470,   471,   472,   473,   474,   475,   476,
     477,   478,   479,    -1,   481,   482,    -1,    -1,    -1,   486,
     487,   488,   489,    -1,    -1,    -1,   493,    -1,    -1,    -1,
     497,    -1,   499,   500,   501,   502,   503,   504,    -1,   506,
     507,   508,   509,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,   528,    -1,    -1,    -1,   532,    -1,    -1,   535,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,    -1,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,   580,   581,   582,   583,    -1,   585,   586,
      -1,   588,   589,    -1,   591,   592,    -1,    -1,   595,    -1,
      -1,   598,    -1,   600,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
      -1,    -1,    -1,    -1,   631,   632,    -1,   634,   635,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    33,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    66,    67,    68,    69,    70,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
     154,    -1,   156,   157,   158,    -1,   160,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,    -1,    -1,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,   187,   188,   189,   190,    -1,    -1,    -1,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,   215,   216,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,   232,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,    -1,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,
     264,   265,    -1,    -1,   268,   269,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,   378,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,    -1,
      -1,    -1,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,    -1,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,    -1,    -1,   448,    -1,   450,   451,    -1,   453,
      -1,    -1,    -1,   457,    -1,    -1,   460,   461,    -1,   463,
     464,   465,    -1,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,    -1,   481,    -1,    -1,
      -1,    -1,   486,   487,   488,    -1,    -1,    -1,    -1,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,   503,
     504,    -1,   506,    -1,   508,    -1,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,    -1,   532,    -1,
      -1,    -1,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,    -1,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,    -1,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,   627,    -1,    -1,    -1,   631,    -1,    -1,
     634,    -1,   636,    -1,     5,   639,     7,     8,     9,    10,
      11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,
      -1,    -1,    -1,    24,    25,    26,    27,    28,    29,    30,
      -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,
      41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,    -1,
      -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,
      -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,
      71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,
      -1,    82,    -1,    84,    -1,    86,    87,    88,    89,    -1,
      91,    92,    -1,    94,    95,    96,    -1,    98,    -1,   100,
      -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,
     111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,
      -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,
      -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,
     141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,
      -1,   152,   153,   154,    -1,   156,    -1,   158,    -1,   160,
     161,    -1,   163,   164,   165,    -1,   167,   168,    -1,   170,
     171,   172,   173,   174,    -1,    -1,    -1,    -1,   179,   180,
     181,   182,    -1,    -1,   185,   186,   187,   188,   189,   190,
      -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,    -1,
     201,    -1,   203,   204,   205,   206,   207,    -1,   209,    -1,
     211,    -1,    -1,    -1,   215,   216,    -1,    -1,    -1,    -1,
      -1,    -1,   223,    -1,    -1,    -1,   227,   228,   229,   230,
     231,   232,    -1,   234,   235,   236,    -1,   238,    -1,   240,
      -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,   250,
      -1,   252,   253,    -1,   255,   256,   257,    -1,    -1,   260,
      -1,    -1,    -1,   264,   265,    -1,    -1,   268,   269,    -1,
     271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,
     281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,
     291,    -1,   293,   294,   295,   296,   297,   298,   299,   300,
     301,   302,   303,   304,   305,   306,   307,   308,    -1,   310,
     311,   312,   313,    -1,   315,   316,   317,   318,    -1,   320,
     321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,
     331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,
     341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
      -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,   360,
      -1,    -1,    -1,    -1,   365,    -1,    -1,    -1,   369,    -1,
     371,   372,   373,    -1,   375,   376,   377,   378,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     391,   392,    -1,    -1,    -1,    -1,   397,    -1,   399,   400,
     401,   402,   403,   404,   405,   406,   407,    -1,    -1,    -1,
      -1,   412,   413,    -1,   415,    -1,   417,   418,   419,   420,
     421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,
      -1,   432,   433,   434,   435,   436,    -1,    -1,   439,   440,
     441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,
     451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,
     461,    -1,   463,   464,   465,    -1,    -1,   468,    -1,   470,
     471,   472,   473,   474,   475,   476,    -1,   478,   479,    -1,
     481,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,    -1,
      -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,
      -1,    -1,   503,   504,    -1,   506,    -1,   508,    -1,   510,
     511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,
     521,    -1,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,
      -1,   532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,
     541,   542,   543,    -1,    -1,   546,   547,   548,   549,    -1,
     551,   552,    -1,   554,    -1,   556,   557,   558,   559,    -1,
      -1,   562,   563,    -1,   565,   566,   567,   568,    -1,    -1,
      -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,    -1,
     581,   582,   583,    -1,   585,   586,    -1,   588,   589,    -1,
      -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,    -1,
      -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,
     611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,
     621,   622,   623,   624,   625,    -1,   627,    -1,    -1,    -1,
     631,    -1,    -1,   634,    -1,   636,    -1,     5,   639,     7,
       8,     9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,
      -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,
      28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,
      -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,
      48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    57,
      58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,
      68,    69,    70,    71,    72,    -1,    74,    75,    -1,    -1,
      -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,
      88,    89,    -1,    91,    92,    -1,    94,    95,    96,    -1,
      98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,
     108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,
     118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,
      -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,
      -1,   139,    -1,   141,   142,   143,   144,   145,    -1,    -1,
      -1,    -1,    -1,    -1,   152,   153,   154,    -1,   156,    -1,
     158,    -1,   160,   161,    -1,   163,   164,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,    -1,    -1,    -1,
      -1,   179,   180,   181,   182,    -1,    -1,   185,   186,   187,
     188,   189,   190,    -1,    -1,    -1,    -1,    -1,    -1,   197,
      -1,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
      -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,    -1,
      -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,   227,
     228,   229,   230,   231,   232,    -1,   234,   235,   236,    -1,
     238,    -1,   240,    -1,    -1,    -1,    -1,   245,    -1,    -1,
      -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,   257,
      -1,    -1,   260,    -1,    -1,    -1,   264,   265,    -1,    -1,
     268,   269,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,
     278,   279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,
      -1,    -1,    -1,   291,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,
     308,    -1,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,
     328,   329,   330,   331,    -1,    -1,   334,   335,    -1,   337,
      -1,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
     348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,
     358,   359,   360,    -1,    -1,    -1,    -1,   365,    -1,    -1,
      -1,   369,    -1,   371,   372,   373,    -1,   375,   376,   377,
     378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   391,   392,    -1,    -1,    -1,    -1,   397,
      -1,   399,   400,   401,   402,   403,   404,   405,   406,   407,
      -1,    -1,    -1,    -1,   412,   413,    -1,   415,    -1,   417,
     418,   419,   420,   421,    -1,   423,   424,   425,    -1,    -1,
     428,    -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,
      -1,   439,   440,   441,   442,   443,    -1,   445,    -1,    -1,
     448,    -1,   450,   451,    -1,   453,    -1,    -1,    -1,   457,
      -1,    -1,   460,   461,    -1,   463,   464,   465,    -1,    -1,
     468,    -1,   470,   471,   472,   473,   474,   475,   476,    -1,
     478,   479,    -1,   481,    -1,    -1,    -1,    -1,   486,   487,
     488,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,
      -1,    -1,   500,    -1,    -1,   503,   504,    -1,   506,    -1,
     508,    -1,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,
     518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,
      -1,    -1,    -1,    -1,   532,    -1,    -1,    -1,   536,    -1,
     538,   539,   540,   541,   542,   543,    -1,    -1,   546,   547,
     548,   549,    -1,   551,   552,    -1,   554,    -1,   556,   557,
     558,   559,    -1,    -1,   562,   563,    -1,   565,   566,   567,
     568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,
      -1,    -1,    -1,   581,   582,   583,    -1,   585,   586,    -1,
     588,   589,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,
     598,    -1,    -1,    -1,   602,   603,   604,    -1,    -1,    -1,
      -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,
     618,   619,   620,   621,   622,   623,   624,   625,    -1,   627,
      -1,    -1,    -1,   631,    -1,    -1,   634,    -1,   636,    -1,
       5,   639,     7,     8,     9,    10,    11,    12,    -1,    -1,
      15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,
      25,    26,    27,    28,    29,    30,    -1,    -1,    33,    -1,
      -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,
      45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,
      55,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,
      -1,    66,    67,    68,    69,    70,    71,    72,    -1,    74,
      75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,
      -1,    86,    87,    88,    89,    -1,    91,    92,    -1,    94,
      95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,
      -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,
      -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,
      -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,
     135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,
     145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,
      -1,    -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
      -1,    -1,    -1,    -1,   179,   180,   181,   182,    -1,    -1,
     185,   186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,
      -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,
     205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,
     215,   216,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,
      -1,    -1,   227,   228,   229,   230,   231,   232,    -1,   234,
     235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,
     245,    -1,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,
     255,   256,   257,    -1,    -1,   260,    -1,    -1,    -1,   264,
     265,    -1,    -1,   268,   269,    -1,   271,   272,    -1,    -1,
      -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,
     285,   286,    -1,    -1,    -1,    -1,   291,    -1,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,    -1,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,
      -1,   326,   327,   328,   329,   330,   331,    -1,    -1,   334,
     335,    -1,   337,    -1,   339,    -1,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,    -1,    -1,   353,   354,
      -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,
     365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,
     375,   376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,
      -1,    -1,   397,    -1,   399,   400,   401,   402,   403,   404,
     405,   406,   407,    -1,    -1,    -1,    -1,   412,   413,    -1,
     415,    -1,   417,   418,   419,   420,   421,    -1,   423,   424,
     425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,
     435,   436,    -1,    -1,   439,   440,   441,   442,   443,    -1,
     445,    -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,
      -1,    -1,   457,    -1,    -1,   460,   461,    -1,   463,   464,
     465,    -1,    -1,   468,    -1,   470,   471,   472,   473,   474,
     475,   476,    -1,   478,   479,    -1,   481,    -1,    -1,    -1,
      -1,   486,   487,   488,    -1,    -1,    -1,    -1,   493,    -1,
      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,   503,   504,
      -1,   506,    -1,   508,    -1,   510,   511,    -1,    -1,    -1,
      -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,
      -1,    -1,   527,    -1,    -1,    -1,    -1,   532,    -1,    -1,
      -1,   536,    -1,   538,   539,   540,   541,   542,   543,    -1,
      -1,   546,   547,   548,   549,    -1,   551,   552,    -1,   554,
      -1,   556,   557,   558,   559,    -1,    -1,   562,   563,    -1,
     565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,
     575,   576,    -1,    -1,    -1,    -1,   581,   582,   583,    -1,
     585,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,
     595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,   604,
      -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,
      -1,    -1,    -1,   618,   619,   620,   621,   622,   623,   624,
      -1,    -1,   627,    -1,    -1,    -1,   631,    -1,    -1,   634,
      -1,   636,    -1,     5,   639,     7,     8,     9,    10,    11,
      12,    -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,
      -1,    -1,    24,    25,    26,    27,    28,    29,    30,    -1,
      -1,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,
      -1,    -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,
      -1,    -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,
      -1,    -1,    -1,    -1,    66,    67,    68,    69,    70,    71,
      72,    -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,
      82,    -1,    84,    -1,    86,    87,    88,    89,    -1,    91,
      92,    -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,
      -1,   103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,
      -1,   113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,
     122,    -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,
      -1,   133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,
     142,   143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,
     152,   153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,
      -1,   163,   164,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,    -1,    -1,    -1,    -1,   179,   180,   181,
     182,    -1,    -1,   185,   186,   187,   188,   189,   190,    -1,
      -1,    -1,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
      -1,    -1,    -1,   215,   216,    -1,    -1,    -1,    -1,    -1,
      -1,   223,    -1,    -1,    -1,   227,   228,   229,   230,   231,
     232,    -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,
      -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,   250,    -1,
     252,   253,    -1,   255,   256,   257,    -1,    -1,   260,    -1,
      -1,    -1,   264,   265,    -1,    -1,   268,   269,    -1,   271,
     272,    -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,
      -1,   283,    -1,   285,   286,    -1,    -1,    -1,    -1,   291,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,    -1,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,    -1,   320,   321,
      -1,    -1,    -1,    -1,   326,   327,   328,   329,   330,   331,
      -1,    -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,
     342,   343,   344,   345,   346,   347,   348,   349,   350,    -1,
      -1,   353,   354,    -1,    -1,   357,   358,   359,   360,    -1,
      -1,    -1,    -1,   365,    -1,    -1,    -1,   369,    -1,   371,
     372,   373,    -1,   375,   376,   377,   378,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,
     392,    -1,    -1,    -1,    -1,   397,    -1,   399,   400,   401,
     402,   403,   404,   405,   406,   407,    -1,    -1,    -1,    -1,
     412,   413,    -1,   415,    -1,   417,   418,   419,   420,   421,
      -1,   423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,
     432,   433,   434,   435,   436,    -1,    -1,   439,   440,   441,
     442,   443,    -1,   445,    -1,    -1,   448,    -1,   450,   451,
      -1,   453,    -1,    -1,    -1,   457,    -1,    -1,   460,   461,
      -1,   463,   464,   465,    -1,    -1,   468,    -1,   470,   471,
     472,   473,   474,   475,   476,    -1,   478,   479,    -1,   481,
      -1,    -1,    -1,    -1,   486,   487,   488,    -1,    -1,    -1,
      -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,
      -1,   503,   504,    -1,   506,    -1,   508,    -1,   510,   511,
      -1,    -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,
      -1,    -1,   524,    -1,    -1,   527,    -1,    -1,    -1,    -1,
     532,    -1,    -1,    -1,   536,    -1,   538,   539,   540,   541,
     542,   543,    -1,    -1,   546,   547,   548,   549,    -1,   551,
     552,    -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,
     562,   563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,
      -1,    -1,   574,   575,   576,    -1,    -1,    -1,    -1,   581,
     582,   583,    -1,   585,   586,    -1,   588,   589,    -1,    -1,
      -1,    -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,
     602,   603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,
      -1,    -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,
     622,   623,   624,    -1,    -1,   627,    -1,    -1,    -1,   631,
      -1,    -1,   634,    -1,   636,    -1,     5,   639,     7,     8,
       9,    10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,
      19,    -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,
      29,    30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,
      -1,    -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,
      -1,    -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,
      -1,    60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,
      -1,    -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,
      89,    -1,    91,    92,    -1,    94,    95,    96,    -1,    98,
      -1,   100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,
      -1,    -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,
     119,    -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,
      -1,    -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,
     139,    -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,
      -1,    -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,
      -1,   160,   161,    -1,   163,   164,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,    -1,    -1,    -1,    -1,
     179,   180,   181,   182,    -1,    -1,   185,   186,   187,   188,
     189,   190,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,    -1,
     209,    -1,   211,    -1,    -1,    -1,   215,   216,    -1,    -1,
      -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,   227,   228,
     229,   230,   231,   232,    -1,   234,   235,   236,    -1,   238,
      -1,   240,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,
      -1,   250,    -1,   252,   253,    -1,   255,   256,   257,    -1,
      -1,   260,    -1,    -1,    -1,   264,   265,    -1,    -1,   268,
     269,    -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,
     279,    -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,
      -1,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
      -1,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
      -1,   320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,
     329,   330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,
     339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,
     359,   360,    -1,    -1,    -1,    -1,   365,    -1,    -1,    -1,
     369,    -1,   371,   372,   373,    -1,   375,   376,   377,   378,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   391,   392,    -1,    -1,    -1,    -1,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,    -1,
      -1,    -1,    -1,   412,   413,    -1,   415,    -1,   417,   418,
     419,   420,   421,    -1,   423,   424,   425,    -1,    -1,   428,
      -1,    -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,
     439,   440,   441,   442,   443,    -1,   445,    -1,    -1,   448,
      -1,   450,   451,    -1,   453,    -1,    -1,    -1,   457,    -1,
      -1,   460,   461,    -1,   463,   464,   465,    -1,    -1,   468,
      -1,   470,   471,   472,   473,   474,   475,   476,    -1,   478,
     479,    -1,   481,    -1,    -1,    -1,    -1,   486,   487,   488,
      -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,
      -1,   500,    -1,    -1,   503,   504,    -1,   506,    -1,   508,
      -1,   510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,
     519,    -1,   521,    -1,    -1,   524,    -1,    -1,   527,    -1,
      -1,    -1,    -1,   532,    -1,    -1,    -1,   536,    -1,   538,
     539,   540,   541,   542,   543,    -1,    -1,   546,   547,   548,
     549,    -1,   551,   552,    -1,   554,    -1,   556,   557,   558,
     559,    -1,    -1,   562,   563,    -1,   565,   566,   567,   568,
      -1,    -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,
      -1,    -1,   581,   582,   583,    -1,   585,   586,    -1,   588,
     589,    -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,   598,
      -1,    -1,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,
      -1,    -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,
     619,   620,   621,   622,   623,   624,    -1,    -1,   627,    -1,
      -1,    -1,   631,    -1,    -1,   634,    -1,   636,    -1,     5,
     639,     7,     8,     9,    10,    11,    12,    -1,    -1,    15,
      -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,
      26,    27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,
      -1,    37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,
      46,    -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,
      -1,    57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,
      66,    67,    68,    69,    70,    71,    72,    -1,    74,    75,
      -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,
      86,    87,    88,    89,    -1,    91,    92,    -1,    94,    95,
      96,    -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,
     106,    -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,
      -1,   117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,
      -1,   127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,
      -1,    -1,    -1,   139,    -1,   141,   142,   143,   144,   145,
      -1,    -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,
      -1,    -1,   158,    -1,   160,   161,    -1,   163,   164,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,    -1,
      -1,    -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,
     186,   187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,
      -1,   197,    -1,   199,    -1,   201,    -1,   203,   204,   205,
     206,   207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,
     216,    -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,
      -1,   227,   228,   229,   230,   231,   232,    -1,   234,   235,
     236,    -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,
      -1,    -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,
     256,   257,    -1,    -1,   260,    -1,    -1,    -1,   264,   265,
      -1,    -1,   268,   269,    -1,   271,   272,    -1,    -1,    -1,
      -1,    -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,
     286,    -1,    -1,    -1,    -1,   291,    -1,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
     306,   307,   308,    -1,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,
     326,   327,   328,   329,   330,   331,    -1,    -1,   334,   335,
      -1,   337,    -1,   339,    -1,   341,   342,   343,   344,   345,
     346,   347,   348,   349,   350,    -1,    -1,   353,   354,    -1,
      -1,   357,   358,   359,   360,    -1,    -1,    -1,    -1,   365,
      -1,    -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,
     376,   377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   391,   392,    -1,    -1,    -1,
      -1,   397,    -1,   399,   400,   401,   402,   403,   404,   405,
     406,   407,    -1,    -1,    -1,    -1,   412,   413,    -1,   415,
      -1,   417,   418,   419,   420,   421,    -1,   423,   424,   425,
      -1,    -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,
     436,    -1,    -1,   439,   440,   441,   442,   443,    -1,   445,
      -1,    -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,
      -1,   457,    -1,    -1,   460,   461,    -1,   463,   464,   465,
      -1,    -1,   468,    -1,   470,   471,   472,   473,   474,   475,
     476,    -1,   478,   479,    -1,   481,    -1,    -1,    -1,    -1,
     486,   487,   488,    -1,    -1,    -1,    -1,   493,    -1,    -1,
      -1,    -1,    -1,    -1,   500,    -1,    -1,   503,   504,    -1,
     506,    -1,   508,    -1,   510,   511,    -1,    -1,    -1,    -1,
      -1,    -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,
      -1,   527,    -1,    -1,    -1,    -1,   532,    -1,    -1,    -1,
     536,    -1,   538,   539,   540,   541,   542,   543,    -1,    -1,
     546,   547,   548,   549,    -1,   551,   552,    -1,   554,    -1,
     556,   557,   558,   559,    -1,    -1,   562,   563,    -1,   565,
     566,   567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,
     576,    -1,    -1,    -1,    -1,   581,   582,   583,    -1,   585,
     586,    -1,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,
      -1,    -1,   598,    -1,    -1,    -1,   602,   603,   604,    -1,
      -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,
      -1,    -1,   618,   619,   620,   621,   622,   623,   624,    -1,
      -1,   627,    -1,    -1,    -1,   631,    -1,    -1,   634,    -1,
     636,    -1,     5,   639,     7,     8,     9,    10,    11,    12,
      -1,    -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,
      -1,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
      33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      -1,    44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,
      -1,    54,    55,    -1,    57,    58,    -1,    60,    -1,    -1,
      -1,    -1,    -1,    66,    67,    68,    69,    70,    71,    72,
      -1,    74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,
      -1,    84,    -1,    86,    87,    88,    89,    -1,    91,    92,
      -1,    94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,
     103,    -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,
     113,    -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,
      -1,    -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,
     133,    -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,
     143,   144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,
     153,   154,    -1,    -1,    -1,   158,    -1,   160,   161,    -1,
     163,   164,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,    -1,    -1,    -1,    -1,   179,   180,   181,   182,
      -1,    -1,   185,   186,   187,   188,   189,   190,    -1,    -1,
      -1,    -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
      -1,    -1,   215,   216,    -1,    -1,    -1,    -1,    -1,    -1,
     223,    -1,    -1,    -1,   227,   228,   229,   230,   231,   232,
      -1,   234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,
      -1,    -1,   245,    -1,    -1,    -1,    -1,   250,    -1,   252,
     253,    -1,   255,   256,   257,    -1,    -1,   260,    -1,    -1,
      -1,   264,   265,    -1,    -1,   268,   269,    -1,   271,   272,
      -1,    -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,
     283,    -1,   285,   286,    -1,    -1,    -1,    -1,   291,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,   304,   305,   306,   307,   308,    -1,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,    -1,   320,   321,    -1,
      -1,    -1,    -1,   326,   327,   328,   329,   330,   331,    -1,
      -1,   334,   335,    -1,   337,    -1,   339,    -1,   341,   342,
     343,   344,   345,   346,   347,   348,   349,   350,    -1,    -1,
     353,   354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,
      -1,    -1,   365,    -1,    -1,    -1,   369,    -1,   371,   372,
     373,    -1,   375,   376,   377,   378,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,
      -1,    -1,    -1,    -1,   397,    -1,   399,   400,   401,   402,
     403,   404,   405,   406,   407,    -1,    -1,    -1,    -1,   412,
     413,    -1,   415,    -1,   417,   418,   419,   420,   421,    -1,
     423,   424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,
     433,   434,   435,   436,    -1,    -1,   439,   440,   441,   442,
     443,    -1,   445,    -1,    -1,   448,    -1,   450,   451,    -1,
     453,    -1,    -1,    -1,   457,    -1,    -1,   460,   461,    -1,
     463,   464,   465,    -1,    -1,   468,    -1,   470,   471,   472,
     473,   474,   475,   476,    -1,   478,   479,    -1,   481,    -1,
      -1,    -1,    -1,   486,   487,   488,    -1,    -1,    -1,    -1,
     493,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,
     503,   504,    -1,   506,    -1,   508,    -1,   510,   511,    -1,
      -1,    -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,
      -1,   524,    -1,    -1,   527,    -1,    -1,    -1,    -1,   532,
      -1,    -1,    -1,   536,    -1,   538,   539,   540,   541,   542,
     543,    -1,    -1,   546,   547,   548,   549,    -1,   551,   552,
      -1,   554,    -1,   556,   557,   558,   559,    -1,    -1,   562,
     563,    -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,
      -1,   574,   575,   576,    -1,    -1,    -1,    -1,   581,   582,
     583,    -1,   585,   586,    -1,   588,   589,    -1,    -1,    -1,
      -1,    -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,
     603,   604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,
      -1,   614,    -1,    -1,    -1,   618,   619,   620,   621,   622,
     623,   624,    -1,    -1,   627,    -1,    -1,    -1,   631,    -1,
      -1,   634,    -1,   636,    -1,     5,   639,     7,     8,     9,
      10,    11,    12,    -1,    -1,    15,    -1,    -1,    -1,    19,
      -1,    -1,    -1,    -1,    24,    25,    26,    27,    28,    29,
      30,    -1,    -1,    33,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    41,    -1,    -1,    44,    45,    46,    -1,    48,    -1,
      -1,    -1,    -1,    -1,    54,    55,    -1,    57,    58,    -1,
      60,    -1,    -1,    -1,    -1,    -1,    66,    67,    68,    69,
      70,    71,    72,    -1,    74,    75,    -1,    -1,    -1,    -1,
      -1,    -1,    82,    -1,    84,    -1,    86,    87,    88,    89,
      -1,    91,    92,    -1,    94,    95,    96,    -1,    98,    -1,
     100,    -1,    -1,   103,    -1,    -1,   106,    -1,   108,    -1,
      -1,   111,    -1,   113,    -1,    -1,    -1,   117,   118,   119,
      -1,    -1,   122,    -1,    -1,    -1,    -1,   127,    -1,    -1,
      -1,    -1,    -1,   133,    -1,   135,    -1,    -1,    -1,   139,
      -1,   141,   142,   143,   144,   145,    -1,    -1,    -1,    -1,
      -1,    -1,   152,   153,   154,    -1,    -1,    -1,   158,    -1,
      -1,   161,    -1,   163,   164,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,    -1,    -1,    -1,    -1,   179,
     180,   181,   182,    -1,    -1,   185,   186,   187,   188,   189,
     190,    -1,    -1,    -1,    -1,    -1,    -1,   197,    -1,   199,
      -1,   201,    -1,   203,   204,   205,   206,   207,    -1,   209,
      -1,   211,    -1,    -1,    -1,   215,   216,    -1,    -1,    -1,
      -1,    -1,    -1,   223,    -1,    -1,    -1,   227,   228,   229,
     230,   231,   232,    -1,   234,   235,   236,    -1,   238,    -1,
     240,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,
     250,    -1,   252,   253,    -1,   255,   256,   257,    -1,    -1,
     260,    -1,    -1,    -1,   264,   265,    -1,    -1,   268,   269,
      -1,   271,   272,    -1,    -1,    -1,    -1,    -1,   278,   279,
      -1,   281,    -1,   283,    -1,   285,   286,    -1,    -1,    -1,
      -1,   291,    -1,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,   304,   305,   306,   307,   308,    -1,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,    -1,
     320,   321,    -1,    -1,    -1,    -1,   326,   327,   328,   329,
     330,   331,    -1,    -1,   334,   335,    -1,   337,    -1,   339,
      -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
     350,    -1,    -1,   353,   354,    -1,    -1,   357,   358,   359,
     360,    -1,    -1,    -1,    -1,   365,    -1,    -1,    -1,   369,
      -1,   371,   372,   373,    -1,   375,   376,   377,   378,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   391,   392,    -1,    -1,    -1,    -1,   397,    -1,   399,
     400,   401,   402,   403,   404,   405,   406,   407,    -1,    -1,
      -1,    -1,   412,   413,    -1,   415,    -1,   417,   418,   419,
     420,   421,    -1,   423,   424,   425,    -1,    -1,   428,    -1,
      -1,    -1,   432,   433,   434,   435,   436,    -1,    -1,   439,
     440,   441,   442,   443,    -1,   445,    -1,    -1,   448,    -1,
     450,   451,    -1,   453,    -1,    -1,    -1,   457,    -1,    -1,
     460,   461,    -1,   463,   464,   465,    -1,    -1,   468,    -1,
     470,   471,   472,   473,   474,   475,   476,    -1,   478,   479,
      -1,   481,    -1,    -1,    -1,    -1,   486,   487,   488,    -1,
      -1,    -1,    -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,
     500,    -1,    -1,   503,   504,    -1,   506,    -1,   508,    -1,
     510,   511,    -1,    -1,    -1,    -1,    -1,    -1,   518,   519,
      -1,   521,    -1,    -1,   524,    -1,    -1,   527,    -1,    -1,
      -1,    -1,   532,    -1,    -1,    -1,   536,    -1,   538,   539,
     540,   541,   542,   543,    -1,    -1,   546,   547,   548,   549,
      -1,   551,   552,    -1,   554,    -1,   556,   557,   558,   559,
      -1,    -1,   562,   563,    -1,   565,   566,   567,   568,    -1,
      -1,    -1,    -1,    -1,   574,   575,   576,    -1,    -1,    -1,
      -1,   581,   582,   583,    -1,   585,   586,    -1,   588,   589,
      -1,    -1,    -1,    -1,    -1,   595,    -1,    -1,   598,    -1,
      -1,    -1,   602,   603,   604,    -1,    -1,    -1,    -1,    -1,
      -1,   611,    -1,    -1,   614,    -1,    -1,    -1,   618,   619,
     620,   621,   622,   623,   624,    -1,    -1,   627,    -1,    -1,
      -1,   631,    -1,    -1,   634,    -1,   636,    -1,     5,   639,
       7,     8,     9,    10,    11,    12,    -1,    -1,    15,    -1,
      -1,    -1,    19,    -1,    -1,    -1,    -1,    24,    25,    26,
      27,    28,    29,    30,    -1,    -1,    33,    -1,    -1,    -1,
      37,    -1,    -1,    -1,    41,    -1,    -1,    44,    45,    46,
      -1,    48,    -1,    -1,    -1,    -1,    -1,    54,    55,    -1,
      57,    58,    -1,    60,    -1,    -1,    -1,    -1,    -1,    66,
      67,    68,    69,    70,    71,    72,    -1,    74,    75,    -1,
      -1,    -1,    -1,    -1,    -1,    82,    -1,    84,    -1,    86,
      87,    88,    89,    -1,    91,    92,    -1,    94,    95,    96,
      -1,    98,    -1,   100,    -1,    -1,   103,    -1,    -1,   106,
      -1,   108,    -1,    -1,   111,    -1,   113,    -1,    -1,    -1,
     117,   118,   119,    -1,    -1,   122,    -1,    -1,    -1,    -1,
     127,    -1,    -1,    -1,    -1,    -1,   133,    -1,   135,    -1,
      -1,    -1,   139,    -1,   141,   142,   143,   144,   145,    -1,
      -1,    -1,    -1,    -1,    -1,   152,   153,   154,    -1,    -1,
      -1,   158,    -1,    -1,   161,    -1,   163,   164,   165,    -1,
     167,   168,    -1,   170,   171,   172,   173,   174,    -1,    -1,
      -1,    -1,   179,   180,   181,   182,    -1,    -1,   185,   186,
     187,   188,   189,   190,    -1,    -1,    -1,    -1,    -1,    -1,
     197,    -1,   199,    -1,   201,    -1,   203,   204,   205,   206,
     207,    -1,   209,    -1,   211,    -1,    -1,    -1,   215,   216,
      -1,    -1,    -1,    -1,    -1,    -1,   223,    -1,    -1,    -1,
     227,   228,   229,   230,   231,   232,    -1,   234,   235,   236,
      -1,   238,    -1,   240,    -1,    -1,    -1,    -1,   245,    -1,
      -1,    -1,    -1,   250,    -1,   252,   253,    -1,   255,   256,
     257,    -1,    -1,   260,    -1,    -1,    -1,   264,   265,    -1,
      -1,   268,   269,    -1,   271,   272,    -1,    -1,    -1,    -1,
      -1,   278,   279,    -1,   281,    -1,   283,    -1,   285,   286,
      -1,    -1,    -1,    -1,   291,    -1,   293,   294,   295,   296,
     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,
     307,   308,    -1,   310,   311,   312,   313,    -1,   315,   316,
     317,   318,    -1,   320,   321,    -1,    -1,    -1,    -1,   326,
     327,   328,   329,   330,   331,    -1,    -1,   334,   335,    -1,
     337,    -1,   339,    -1,   341,   342,   343,   344,   345,   346,
     347,   348,   349,   350,    -1,    -1,   353,   354,    -1,    -1,
     357,   358,   359,   360,    -1,    -1,    -1,    -1,   365,    -1,
      -1,    -1,   369,    -1,   371,   372,   373,    -1,   375,   376,
     377,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   391,   392,    -1,    -1,    -1,    -1,
     397,    -1,   399,   400,   401,   402,   403,   404,   405,   406,
     407,    -1,    -1,    -1,    -1,   412,   413,    -1,   415,    -1,
     417,   418,   419,   420,   421,    -1,   423,   424,   425,    -1,
      -1,   428,    -1,    -1,    -1,   432,   433,   434,   435,   436,
      -1,    -1,   439,   440,   441,   442,   443,    -1,   445,    -1,
      -1,   448,    -1,   450,   451,    -1,   453,    -1,    -1,    -1,
     457,    -1,    -1,   460,   461,    -1,   463,   464,   465,    -1,
      -1,   468,    -1,   470,   471,   472,   473,   474,   475,   476,
      -1,   478,   479,    -1,   481,    -1,    -1,    -1,    -1,   486,
     487,   488,    -1,    -1,    -1,    -1,   493,    -1,    -1,    -1,
      -1,    -1,    -1,   500,    -1,    -1,   503,   504,    -1,   506,
      -1,   508,    -1,   510,   511,    -1,    -1,    -1,    -1,    -1,
      -1,   518,   519,    -1,   521,    -1,    -1,   524,    -1,    -1,
     527,    -1,    -1,    -1,    -1,   532,    -1,    -1,    -1,   536,
      -1,   538,   539,   540,   541,   542,   543,    -1,    -1,   546,
     547,   548,   549,    -1,   551,   552,    -1,   554,    -1,   556,
     557,   558,   559,    -1,    -1,   562,   563,    -1,   565,   566,
     567,   568,    -1,    -1,    -1,    -1,    -1,   574,   575,   576,
      -1,    -1,    -1,    -1,   581,   582,   583,    -1,   585,   586,
      -1,   588,   589,    -1,    -1,    -1,    -1,    -1,   595,    -1,
      -1,   598,    -1,    -1,    -1,   602,   603,   604,    -1,    -1,
      -1,    -1,    -1,    -1,   611,    -1,    -1,   614,    -1,    -1,
      -1,   618,   619,   620,   621,   622,   623,   624,    -1,    -1,
     627,    -1,    -1,    -1,   631,    -1,    -1,   634,    -1,   636,
      -1,     5,   639,     7,     8,     9,    10,    11,    12,    -1,
      -1,    15,    -1,    -1,    -1,    19,    -1,    -1,    -1,    -1,
      24,    25,    26,    27,    28,    29,    30,    -1,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,    -1,
      44,    45,    46,    -1,    48,    -1,    -1,    -1,    -1,    -1,
      54,    -1,    -1,    57,    58,    -1,    60,    -1,    -1,    -1,
      -1,    -1,    66,    67,    68,    69,    -1,    71,    72,    -1,
      74,    75,    -1,    -1,    -1,    -1,    -1,    -1,    82,    -1,
      84,    -1,    86,    87,    88,    89,    -1,    91,    92,    -1,
      94,    95,    96,    -1,    98,    -1,   100,    -1,    -1,   103,
      -1,    -1,   106,    -1,   108,    -1,    -1,   111,    -1,   113,
      -1,    -1,    -1,   117,   118,   119,    -1,    -1,   122,    -1,
      -1,    -1,    -1,   127,    -1,    -1,    -1,    -1,    -1,   133,
      -1,   135,    -1,    -1,    -1,   139,    -1,   141,   142,   143,
     144,   145,    -1,    -1,    -1,    -1,    -1,    -1,   152,   153,
     154,    -1,    -1,    -1,   158,    -1,    -1,   161,    -1,   163,
     164,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,    -1,    -1,    -1,    -1,   179,   180,   181,   182,    -1,
      -1,   185,   186,    -1,   188,   189,   190,    -1,    -1,    -1,
      -1,    -1,    -1,   197,    -1,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
      -1,   215,   216,    -1,    -1,    -1,    -1,    -1,    -1,   223,
      -1,    -1,    -1,   227,   228,   229,   230,   231,    -1,    -1,
     234,   235,   236,    -1,   238,    -1,   240,    -1,    -1,    -1,
      -1,   245,    -1,    -1,    -1,    -1,   250,    -1,   252,   253,
      -1,   255,   256,    -1,    -1,    -1,   260,    -1,    -1,    -1,
     264,   265,    -1,    -1,   268,    -1,    -1,   271,   272,    -1,
      -1,    -1,    -1,    -1,   278,   279,    -1,   281,    -1,   283,
      -1,   285,   286,    -1,    -1,    -1,    -1,    -1,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,    -1,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,    -1,   320,   321,    -1,    -1,
      -1,    -1,   326,   327,   328,   329,   330,   331,    -1,    -1,
     334,   335,    -1,   337,    -1,   339,    -1,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,    -1,    -1,   353,
     354,    -1,    -1,   357,   358,   359,   360,    -1,    -1,    -1,
      -1,   365,    -1,    -1,    -1,   369,    -1,   371,   372,   373,
      -1,   375,   376,   377,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   391,   392,    -1,
      -1,    -1,    -1,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,    -1,    -1,    -1,    -1,   412,   413,
      -1,   415,    -1,   417,   418,   419,   420,   421,    -1,   423,
     424,   425,    -1,    -1,   428,    -1,    -1,    -1,   432,   433,
     434,   435,   436,    -1,    -1,   439,   440,   441,   442,   443,
      -1,   445,    -1,    -1,   448,    -1,   450,    -1,    -1,   453,
      -1,    -1,    -1,   457,    -1,    -1,   460,   461,    -1,   463,
      -1,   465,    -1,    -1,   468,    -1,   470,   471,   472,   473,
     474,   475,   476,    -1,   478,   479,    -1,   481,    -1,    -1,
      -1,    -1,   486,   487,   488,    -1,    -1,    -1,    -1,   493,
      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,   503,
     504,    -1,   506,    -1,   508,    -1,   510,   511,    -1,    -1,
      -1,    -1,    -1,    -1,   518,   519,    -1,   521,    -1,    -1,
     524,    -1,    -1,   527,    -1,    -1,    -1,    -1,   532,    -1,
      -1,    -1,   536,    -1,   538,   539,   540,   541,   542,   543,
      -1,    -1,   546,   547,   548,   549,    -1,   551,   552,    -1,
     554,    -1,   556,   557,   558,   559,    -1,    -1,   562,   563,
      -1,   565,   566,   567,   568,    -1,    -1,    -1,    -1,    -1,
     574,   575,   576,    -1,    -1,    -1,    -1,   581,   582,   583,
      -1,   585,   586,    -1,   588,   589,    -1,    -1,    -1,    -1,
      -1,   595,    -1,    -1,   598,    -1,    -1,    -1,   602,   603,
     604,    -1,    -1,    -1,    -1,    -1,    -1,   611,    -1,    -1,
     614,    -1,    -1,    -1,   618,   619,   620,   621,   622,   623,
     624,    -1,    -1,    -1,    -1,    -1,    -1,   631,    -1,    -1,
     634,    -1,   636,    -1,    -1,   639
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    14,    16,    33,    37,    51,    52,    59,    64,    65,
      85,   104,   128,   136,   137,   138,   149,   150,   162,   176,
     193,   208,   210,   214,   218,   244,   246,   262,   280,   284,
     379,   396,   398,   411,   422,   444,   447,   449,   452,   455,
     456,   466,   469,   477,   483,   491,   496,   497,   498,   528,
     535,   580,   592,   596,   599,   605,   635,   641,   654,   665,
     668,   669,   670,   671,   672,   674,   679,   681,   690,   723,
     751,   758,   759,   878,   934,   970,  1055,  1102,  1105,  1115,
    1120,  1126,  1139,  1142,  1148,  1151,  1156,  1163,  1175,  1176,
    1345,  1347,  1358,  1361,  1386,  1394,  1407,  1414,  1428,  1432,
    1435,  1446,  1452,  1456,  1461,  1462,  1463,  1517,  1544,  1550,
    1552,  1559,  1562,  1596,  1602,  1603,  1604,  1605,  1656,  1664,
    1665,  1666,    12,   115,   133,   201,   285,   416,   489,   552,
    1056,  1627,  1628,  1629,  1630,   281,   366,  1150,  1597,   561,
    1506,   237,     5,     7,     8,     9,    10,    11,    12,    15,
      19,    22,    24,    25,    26,    27,    28,    29,    30,    31,
      33,    37,    41,    44,    45,    46,    48,    50,    51,    54,
      57,    58,    60,    61,    63,    64,    66,    67,    68,    69,
      70,    71,    72,    74,    75,    76,    77,    78,    79,    80,
      82,    83,    84,    85,    86,    87,    88,    89,    91,    92,
      94,    95,    96,    97,    98,   100,   103,   106,   108,   111,
     113,   117,   118,   119,   122,   127,   128,   133,   135,   139,
     141,   142,   143,   144,   145,   149,   152,   153,   154,   158,
     160,   161,   163,   164,   165,   167,   168,   170,   171,   172,
     173,   174,   175,   176,   179,   180,   181,   182,   185,   186,
     188,   189,   190,   193,   197,   199,   201,   203,   204,   205,
     206,   207,   208,   209,   211,   214,   215,   216,   218,   222,
     223,   227,   228,   229,   230,   231,   234,   235,   236,   238,
     240,   245,   246,   250,   252,   253,   255,   256,   260,   263,
     264,   265,   268,   271,   272,   278,   279,   281,   283,   285,
     286,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,   304,   305,   306,   307,   308,   310,   311,   312,
     313,   315,   316,   317,   318,   320,   321,   326,   327,   328,
     329,   330,   331,   334,   335,   337,   339,   341,   342,   343,
     344,   345,   346,   347,   348,   349,   350,   353,   354,   357,
     358,   359,   360,   364,   365,   369,   371,   372,   373,   375,
     376,   377,   378,   380,   381,   390,   391,   392,   395,   397,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     411,   412,   413,   415,   417,   418,   419,   420,   421,   423,
     424,   425,   428,   432,   433,   434,   435,   436,   439,   440,
     441,   442,   443,   445,   446,   448,   449,   450,   453,   455,
     457,   458,   460,   461,   463,   465,   468,   469,   470,   471,
     472,   473,   474,   475,   476,   477,   478,   479,   481,   482,
     486,   487,   488,   489,   493,   497,   499,   500,   501,   502,
     503,   504,   506,   507,   508,   509,   510,   511,   518,   519,
     521,   524,   527,   528,   532,   535,   536,   538,   539,   540,
     541,   542,   543,   546,   547,   548,   549,   551,   552,   554,
     556,   557,   558,   559,   562,   563,   565,   566,   567,   568,
     574,   575,   576,   580,   581,   582,   583,   585,   586,   588,
     589,   591,   592,   595,   598,   600,   602,   603,   604,   611,
     614,   618,   619,   620,   621,   622,   623,   624,   631,   632,
     634,   635,   636,   639,   717,  1505,  1509,  1515,  1516,   310,
     551,   555,  1546,  1143,   631,  1598,   115,   200,   285,   386,
     468,   489,   512,   552,   594,   602,   700,  1032,  1033,  1034,
    1395,  1346,   115,   172,   201,   237,   285,   416,   468,   489,
     552,   558,   577,   602,   619,  1357,  1509,  1150,   108,   760,
     716,   662,  1502,  1504,  1509,   680,  1359,   405,   509,  1457,
     118,   237,   636,  1468,  1546,  1150,   654,   879,  1509,  1453,
     477,   602,  1546,  1150,  1362,  1447,   515,   748,   752,   753,
    1509,   716,  1598,  1509,  1179,  1181,  1182,  1518,  1415,   752,
      13,   501,   574,    13,   501,   555,  1409,   405,   509,  1551,
    1387,  1509,    33,    85,   160,   411,   433,   469,   528,  1658,
     483,   654,  1177,     0,   162,   666,   411,   558,   699,   930,
     931,   932,   181,   399,  1433,  1502,  1509,   642,  1067,  1509,
     642,   717,   212,   717,   273,  1506,  1509,  1511,   824,   825,
     828,   851,  1509,  1094,  1095,   172,  1062,  1627,  1546,  1598,
    1157,   724,   662,   688,   689,  1506,  1116,   619,  1140,  1546,
      18,  1599,   232,   933,   212,   452,   716,  1511,   826,   851,
     716,   237,   237,   237,   233,   292,   425,  1405,  1406,     8,
      22,    30,    36,    38,    39,    40,    42,    55,    56,    61,
      62,    71,    74,    76,    77,    78,    79,    80,    97,   101,
     102,   107,   109,   110,   114,   115,   120,   121,   122,   127,
     129,   132,   177,   183,   184,   191,   205,   207,   213,   219,
     220,   227,   232,   244,   247,   265,   270,   278,   289,   314,
     319,   330,   334,   336,   340,   341,   342,   343,   344,   352,
     361,   362,   363,   367,   368,   373,   394,   401,   406,   407,
     409,   423,   451,   452,   465,   467,   474,   475,   481,   533,
     534,   540,   544,   545,   550,   561,   565,   566,   567,   568,
     578,   579,   580,   584,   587,   602,   607,   608,   609,   610,
     615,   617,   623,   624,   639,   647,   648,   653,   654,   657,
     658,   661,   662,  1198,  1199,  1200,  1201,  1205,  1212,  1213,
    1214,  1215,  1216,  1217,  1225,  1229,  1242,  1487,  1490,  1492,
    1493,  1494,  1498,  1500,  1505,  1509,   232,  1356,  1356,  1356,
    1356,   212,  1356,   716,  1356,   851,  1356,   716,  1356,  1546,
     675,  1436,   141,    13,    14,   104,   110,   136,   150,   172,
     176,   188,   210,   237,   244,   284,   417,   421,   437,   445,
     453,   483,   496,   497,   546,   577,   599,   601,  1511,  1563,
    1567,  1568,  1570,  1572,  1573,  1509,   378,    70,   429,   662,
    1511,   134,   221,   292,  1364,  1509,  1506,   215,   508,  1458,
     248,  1464,  1545,  1546,   971,  1192,    49,   880,   198,    36,
     310,  1420,  1454,  1509,   716,  1152,  1121,   134,   292,  1365,
    1393,   310,   424,   501,  1448,  1449,   611,   749,   491,   754,
       7,    13,   421,  1560,  1561,  1568,  1570,   572,  1599,  1180,
      13,   146,   221,   517,   518,   519,   520,   521,   522,   537,
    1186,  1187,  1188,  1623,    61,    62,   132,   209,   281,   348,
     401,   468,   488,   574,   661,   995,  1509,  1519,  1531,  1535,
    1536,    13,    25,    37,    61,    69,    74,   100,   102,   104,
     116,   164,   168,   171,   199,   201,   209,   211,   236,   237,
     238,   259,   281,   310,   378,   404,   415,   416,   419,   420,
     440,   488,   501,   536,   554,   555,   603,   622,   995,  1031,
    1416,  1420,  1421,  1423,  1432,  1532,   754,   502,   688,   429,
     628,  1106,  1107,  1108,   502,   688,  1408,  1509,  1506,  1546,
    1393,    38,   219,   220,   561,  1488,  1489,  1507,  1657,  1657,
    1657,  1657,  1657,  1181,  1177,   655,   660,  1509,  1624,  1628,
    1629,  1630,   555,   931,  1430,  1429,   328,   559,   586,  1058,
     600,   109,  1511,  1512,  1513,  1567,  1060,   830,   852,  1509,
    1059,   380,     6,    59,   150,   362,   428,   430,   853,   555,
     233,   377,  1096,  1097,  1098,   717,   523,  1631,  1632,  1061,
    1127,  1158,  1159,  1160,  1161,  1502,   654,   725,  1509,   572,
    1351,  1352,  1502,  1141,  1351,    58,   364,   364,   444,  1600,
     361,   362,  1204,  1509,   829,   852,  1566,  1568,   195,     6,
    1512,  1513,  1514,  1583,  1587,   933,   933,   933,   198,  1396,
    1402,  1403,  1509,  1405,   654,   654,   654,  1212,   654,   654,
     654,  1198,  1245,   654,   654,   654,   654,   654,   654,   654,
     654,   654,   654,   654,   654,   654,   654,  1197,  1197,  1197,
     654,  1196,   654,   654,   654,   561,   654,   654,   654,   654,
     654,   654,   654,   654,   654,   654,   654,   654,  1198,   654,
     654,   654,   654,  1243,  1244,  1498,  1509,   654,   654,   654,
     654,   654,   654,   654,   654,   654,  1198,  1196,   654,   654,
     654,   654,   654,   654,   654,   654,   654,   654,   654,   654,
     654,   654,   654,   654,   654,   654,  1196,   561,   654,   654,
     654,   561,   654,   654,   654,   561,  1489,   654,  1197,  1196,
    1196,   654,   654,   654,   654,   654,   654,  1212,  1212,  1212,
    1198,  1618,  1619,  1509,  1230,  1509,    17,    18,   383,   386,
     637,  1202,  1203,   166,   202,   254,   266,   355,   642,   643,
     644,  1206,    34,   147,   251,   274,   340,   438,   494,   495,
     510,   645,   646,   647,   648,   649,   650,   651,   652,  1204,
    1212,    73,   385,   656,  1507,   654,   662,   177,  1509,   717,
    1509,  1509,   852,   717,  1566,  1511,   862,  1421,   717,  1512,
    1514,  1582,  1350,  1356,   606,   676,    36,    69,   139,   164,
     167,   203,   223,   238,   286,   310,   415,   424,   439,   457,
     501,   504,   532,   554,   603,  1437,  1442,  1443,  1546,    90,
     661,   761,   762,   763,   764,  1509,   415,  1571,   471,   471,
     552,   558,   602,   619,  1197,   381,  1575,   551,   374,  1577,
      68,   501,  1574,   116,   619,  1576,   572,   374,   656,    20,
     642,  1297,  1298,  1553,  1509,   233,  1093,   509,    91,   424,
    1459,    51,    89,   292,  1470,  1502,  1547,  1548,  1149,   655,
    1198,   276,   279,   426,   881,   883,   661,   673,  1506,   286,
    1153,  1514,  1154,  1155,  1502,   619,  1118,  1546,   248,  1353,
    1366,  1367,  1502,    51,  1450,   656,  1507,    57,    67,    82,
      94,    95,    96,   113,   329,   347,   479,   539,   557,   755,
     757,   381,  1571,   374,   198,   374,   477,  1601,  1600,   593,
    1606,  1607,   649,  1190,  1191,  1192,  1188,   491,   662,    36,
     132,   492,   642,   996,   997,  1377,  1511,   196,  1377,  1511,
    1521,   661,  1511,    36,   132,   999,  1000,  1511,   662,  1522,
    1520,  1377,   502,   171,   274,   626,  1427,   654,   115,   172,
     201,   416,   555,   577,   619,  1427,    13,   943,  1511,   275,
    1316,  1318,   198,   251,  1422,  1424,    72,   532,   196,   532,
     551,   509,    72,   532,    13,    44,    98,   103,   253,   327,
     392,   511,   548,  1410,  1411,  1412,   688,   223,   532,   689,
     532,  1316,  1427,  1424,   286,   163,    75,   418,   551,   576,
     196,   532,   614,  1109,  1110,  1109,   376,   633,    92,   656,
    1109,  1109,  1352,  1093,   656,   375,  1660,   547,  1661,   258,
     460,  1659,   655,  1607,  1609,  1611,  1612,   162,   667,    11,
     416,   577,   703,  1192,  1626,  1632,  1640,  1644,  1645,  1651,
     703,  1192,  1625,  1632,  1640,  1645,  1651,  1627,   933,  1175,
    1358,  1361,  1386,  1394,  1431,  1434,  1488,  1509,   132,   928,
     929,   940,   941,  1004,   118,  1197,   661,   718,     6,   831,
     718,   654,   117,   848,   848,   848,     4,  1502,  1098,  1063,
     482,   619,  1632,  1128,  1129,  1352,   251,   656,   398,  1169,
    1171,  1172,   726,   727,  1198,   682,   181,   425,   656,  1117,
    1351,    60,   181,   185,   196,   326,   425,  1144,  1145,  1146,
      58,   444,   177,   698,   831,   628,   656,  1564,   118,   848,
     230,   656,  1509,  1509,  1509,  1354,  1355,  1502,  1503,  1509,
     656,  1399,   662,  1404,  1198,  1198,    13,   146,  1237,  1299,
    1237,  1237,  1237,   625,  1247,  1198,  1198,  1242,  1242,  1198,
    1198,  1198,  1198,  1210,  1211,  1198,  1198,  1198,  1198,   146,
    1237,  1299,   655,   129,   191,   219,   289,   368,   584,   655,
    1325,  1328,  1329,   655,  1198,  1198,  1198,  1198,  1498,  1618,
     123,   124,   125,   126,   127,   224,   225,   226,   227,   330,
     332,   333,   334,   341,   423,   480,   481,   623,   638,   639,
    1294,  1295,  1242,   119,   122,   565,   568,  1296,   146,  1232,
    1198,  1198,  1198,  1198,  1294,  1242,  1198,  1242,  1244,    10,
     656,   662,   146,  1237,  1198,  1198,   146,  1237,  1198,  1198,
    1242,  1242,  1242,  1198,  1198,  1198,  1242,  1201,  1198,  1198,
    1198,  1198,  1198,  1198,   655,  1198,  1237,  1237,  1198,  1198,
     146,  1237,  1198,  1295,  1295,  1198,    47,   267,   573,  1198,
    1198,   655,  1499,  1500,  1509,  1237,  1237,  1198,  1198,  1198,
     655,   656,   655,   483,   654,  1615,  1616,  1198,   661,  1231,
    1511,   662,  1198,  1198,  1198,  1200,   184,   367,   579,   595,
    1204,    13,    19,  1200,  1207,  1201,  1201,   654,  1212,  1201,
    1201,  1201,  1201,   274,  1201,  1201,   247,  1201,   247,  1201,
    1201,  1201,  1201,  1201,    34,   251,   274,   438,  1511,  1212,
    1198,  1218,  1509,   662,   374,   862,   365,   621,   863,   864,
     164,   656,  1351,  1348,   661,   677,   678,   286,   286,   286,
     286,    51,   286,   688,   286,   656,  1438,   122,   565,   568,
     756,   766,  1229,  1492,  1498,  1511,   656,   642,   551,   654,
    1588,  1514,  1588,  1588,  1588,  1583,   201,   416,   555,  1569,
     172,   176,   188,   417,   445,   453,   497,   546,  1573,  1509,
     189,   358,  1509,  1554,  1555,  1366,  1506,   228,   602,  1198,
    1460,  1164,   281,  1469,  1298,   656,  1351,  1193,    75,   654,
     888,   889,   888,   889,   399,   891,   216,   261,  1511,    32,
     572,  1455,   656,   572,   656,   572,  1119,  1351,  1367,  1363,
     398,  1261,  1262,   688,  1449,   656,   642,   196,   656,  1514,
    1513,  1584,   201,   416,  1569,  1509,    13,   146,  1614,   656,
    1183,  1198,  1496,  1509,  1509,    73,  1002,  1198,  1514,   373,
     401,   561,  1542,   255,   429,  1537,  1538,  1539,  1540,   209,
     281,   488,  1533,  1377,  1509,   574,  1523,  1534,  1536,   656,
    1525,    13,    36,   132,   374,  1198,  1543,   532,   251,  1425,
    1506,  1198,   649,   933,   717,   717,   717,  1502,   717,  1502,
     286,   345,   532,  1419,  1419,   289,   368,   472,   584,  1319,
    1320,  1490,  1509,  1427,  1509,   717,  1427,  1513,  1422,  1427,
    1506,   717,  1427,   252,   549,   186,   196,  1413,   656,   171,
     532,  1422,  1502,  1424,  1422,  1422,  1198,  1427,  1427,  1104,
     443,   524,  1111,  1112,  1103,   506,  1108,   483,   654,   658,
    1248,  1249,  1250,  1251,  1252,  1263,  1264,  1278,  1488,   403,
    1662,   384,  1312,  1318,  1613,  1192,  1192,  1192,   172,   201,
     201,  1632,  1502,   929,    73,   995,   142,  1511,    83,    97,
     263,   338,   364,   427,   523,   720,   722,   434,   588,   849,
     850,   240,   845,   846,   847,   854,   862,   864,   115,   222,
     390,   401,   408,   507,   602,   701,   702,  1506,    26,   318,
     839,   840,   841,   854,   855,   856,   862,   864,   832,   833,
     839,  1057,   374,   711,  1064,   133,   250,  1502,   656,   402,
    1130,   132,  1162,  1509,  1160,  1502,   877,  1171,   237,   261,
    1029,  1173,   655,   656,   234,   293,   295,   296,   297,   298,
     299,   301,   302,   303,   304,   305,   306,   307,   308,   309,
     311,   312,   313,   441,   442,   683,   684,   687,  1352,   196,
    1147,   600,  1145,   927,   928,    83,   359,   435,   589,   842,
     843,   844,   854,   858,   859,   860,   861,   862,   864,     7,
    1568,   632,   605,   827,    49,   618,   628,  1585,  1587,  1035,
    1036,  1035,  1035,   656,  1400,  1261,   662,  1404,  1403,   198,
     649,  1509,   656,   655,  1237,   655,  1238,   655,   655,   655,
    1198,   156,   625,  1246,    20,   655,   606,   655,   655,   655,
     656,   655,   656,   655,   656,   656,   656,   656,   606,   656,
    1226,   655,   649,   655,   656,   656,   655,   655,   655,   655,
     198,   655,   656,  1228,   655,   656,   656,   656,   648,   655,
     656,   655,   655,   654,  1498,  1509,  1237,   655,   655,   655,
    1237,   655,   656,   655,   655,   655,   655,   655,   655,   656,
     655,   251,   655,   656,   656,   655,   656,   656,   655,   655,
     655,   656,   198,   656,  1237,   655,   655,   656,   656,   656,
     655,   198,  1198,   198,  1198,   198,  1198,   198,   655,   656,
     655,   655,   655,   655,   656,    20,   272,   656,  1019,   655,
    1242,  1268,  1269,  1270,   483,   654,  1178,  1610,  1611,   593,
    1620,   659,  1533,   492,  1509,   184,   367,   579,   595,   654,
      18,  1198,  1618,   170,  1304,  1201,  1198,  1198,  1201,   654,
    1212,  1201,  1192,  1222,  1223,  1224,   654,   662,  1509,  1502,
     863,  1377,  1378,  1514,    53,   459,  1099,  1351,  1511,   656,
     688,  1443,  1351,  1444,   764,   767,   768,   763,   369,   475,
     765,  1509,  1589,  1590,   572,   628,  1565,   649,  1502,  1509,
    1581,  1581,  1581,   189,   202,   264,   266,   358,   413,   642,
     643,   644,  1556,  1558,   626,  1300,  1360,  1514,  1165,  1166,
    1167,  1168,  1502,   239,   292,   429,   633,  1549,  1548,   654,
    1192,  1325,   543,   892,   882,    12,   884,  1198,  1506,  1514,
    1514,  1155,  1502,  1351,   181,   425,   604,  1122,  1123,  1124,
     483,   491,   610,   611,   654,   923,  1368,  1371,   654,    13,
    1451,   757,   756,  1568,   210,   198,   656,  1581,  1581,  1581,
    1608,  1191,   198,   248,  1184,  1185,  1311,  1312,  1340,  1193,
    1193,   662,   132,  1001,  1003,  1511,  1377,   654,   654,   272,
     376,   633,   656,   656,   662,   662,   662,  1536,  1198,  1537,
    1524,  1377,  1526,  1527,  1506,   198,  1426,   655,  1509,   175,
     472,   372,   656,  1427,   424,  1316,  1412,  1425,  1427,  1422,
    1502,  1427,  1427,   656,   598,  1113,  1277,  1509,   105,   241,
     258,   270,   351,   467,   537,  1259,  1260,   491,   656,  1502,
    1277,   656,   196,  1663,    49,  1316,   201,   717,   717,   933,
     717,  1509,   691,  1378,  1378,   349,  1506,   523,   523,   523,
     523,   523,   482,  1506,  1506,  1378,   656,   847,  1506,  1506,
    1506,  1506,   129,   191,   219,   289,   368,   584,  1324,  1506,
    1506,   655,   656,  1378,  1378,   656,   841,   834,   835,   854,
     855,   856,     6,    12,    14,    16,    27,    29,    59,    64,
      65,    71,    83,    91,   101,   118,   135,   143,   144,   150,
     158,   164,   174,   194,   235,   237,   245,   260,   284,   317,
     335,   339,   379,   384,   391,   393,   398,   401,   432,   446,
     447,   448,   449,   473,   529,   530,   531,   536,   552,   556,
     575,   580,   593,   875,   936,   938,   940,   941,  1068,  1072,
    1074,  1077,  1083,  1084,  1085,  1090,  1091,  1308,  1505,    87,
     478,   447,  1065,  1633,  1129,   196,  1170,   654,  1198,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,
     656,   600,  1378,  1378,  1378,  1378,   656,   844,  1513,  1511,
     285,   182,   836,   837,   838,   854,   855,   856,   857,   860,
     861,   862,   864,   401,   561,  1511,   582,   606,  1043,   374,
     374,   374,  1355,  1509,   606,  1397,  1509,  1249,   662,  1404,
     247,  1198,   655,  1198,   564,  1198,  1198,   160,    36,    62,
     119,   122,   130,   148,   249,   353,   499,   568,   597,  1239,
     996,  1211,  1198,  1210,  1242,  1198,  1198,   996,  1239,  1242,
     655,   247,   247,  1198,  1198,  1242,  1198,  1198,  1198,  1198,
    1198,  1201,   655,   655,  1198,  1198,  1198,  1198,  1198,  1198,
    1242,   247,  1198,  1198,  1198,   655,  1198,  1198,  1198,  1198,
     198,  1198,   198,  1198,   198,  1198,  1198,  1198,    36,    62,
    1014,  1015,  1016,  1017,  1018,  1325,  1324,   655,   655,  1621,
    1622,  1623,  1269,  1178,   655,  1614,  1511,  1198,  1618,  1200,
     655,   656,   655,  1212,  1294,  1294,    18,  1198,  1618,  1304,
    1198,   655,   656,  1241,  1242,  1509,  1349,   942,  1511,  1099,
     678,   196,   628,  1439,  1440,   642,   656,   655,   656,  1583,
       7,   662,   662,   572,   572,   572,  1557,  1301,  1317,  1318,
    1368,   656,  1169,  1171,   561,  1508,   633,   281,    89,   885,
     886,   887,  1509,   897,  1201,    49,   654,   899,   889,   642,
     654,   572,   198,  1125,  1123,   924,  1369,   654,  1374,  1379,
    1374,   655,   923,  1370,  1495,  1496,  1499,  1509,  1372,  1293,
    1509,   642,   381,  1582,  1513,   198,   198,   198,  1176,   151,
    1249,  1341,   196,   284,  1189,  1340,  1317,  1185,    20,  1194,
    1506,  1509,   649,  1509,  1542,   561,   561,   429,   450,   486,
    1541,  1539,  1538,  1377,  1525,  1543,   656,  1529,  1531,  1535,
     129,   191,   289,   368,   584,  1326,  1417,   168,   622,  1320,
    1321,   175,  1320,  1320,   368,  1426,  1300,  1422,  1112,   294,
     687,  1114,  1265,  1272,  1277,  1248,   258,   258,   387,  1279,
     270,   467,  1259,  1279,  1248,  1389,  1390,  1499,  1250,  1261,
    1274,  1275,  1324,   331,  1313,  1509,  1652,     9,    32,   822,
     717,   654,   463,   274,   654,   866,   869,   935,   937,   938,
    1003,   997,   118,   118,   133,   250,   219,   289,   368,   584,
     865,  1327,  1328,  1505,   847,   702,   865,   865,   841,   656,
     835,    81,    93,   398,   952,   959,   960,  1027,  1029,  1033,
    1034,  1092,  1378,  1092,   398,  1378,  1378,  1092,  1378,   398,
     398,  1378,  1378,   572,   142,  1378,   259,   552,   195,   398,
     414,  1029,  1092,   259,  1378,   398,   552,   142,  1378,  1378,
    1378,  1378,  1378,  1092,   398,    49,  1378,  1378,   877,  1378,
     398,   400,    20,   572,   642,  1101,   398,   398,  1378,  1378,
    1378,  1378,   145,   327,  1509,  1378,  1378,   398,  1378,   936,
     656,   874,   875,  1072,   654,   662,   951,   961,  1501,  1509,
    1377,   362,   412,    24,   173,   705,   572,   143,   158,   707,
     654,  1634,    13,    75,  1131,   654,   414,  1290,  1291,  1292,
    1509,   654,  1324,  1506,  1506,  1326,  1506,  1324,  1506,  1506,
    1506,  1506,  1506,  1506,  1506,  1324,  1324,  1506,   111,   364,
     503,  1493,  1506,  1324,   684,  1506,  1325,   865,   865,   844,
     380,   212,  1378,   656,   838,   561,    20,   606,  1586,    48,
     216,   476,  1048,  1048,  1502,  1502,  1502,   662,  1249,  1300,
    1404,  1300,  1198,   655,  1198,   564,   654,   987,   988,   988,
     988,   654,   982,   983,   987,  1240,   988,   249,   988,   249,
     655,   655,   655,    20,  1208,   655,    20,   655,   655,   655,
    1227,  1198,  1198,   655,   655,   384,  1234,   656,   656,   655,
     656,   655,   251,  1219,  1220,   655,   655,   655,   655,   656,
     655,   655,  1198,   655,   196,   655,   655,   656,   655,   656,
     656,   655,  1198,   655,  1198,   655,  1198,   655,   655,   655,
     654,  1009,  1009,    21,   137,   465,   647,  1011,  1012,  1013,
     656,   656,  1190,  1623,   655,  1617,   662,  1053,   655,  1242,
    1200,   655,   656,   655,  1193,  1224,   655,  1441,   429,    57,
      67,    82,    94,    95,    96,   113,   329,   347,   461,   479,
     539,   557,   769,   768,  1590,   628,  1593,   381,   649,   649,
    1583,  1583,  1583,   654,  1198,   374,  1384,  1167,  1502,  1171,
     233,  1174,  1465,   655,   656,  1193,   883,   398,   900,   901,
    1325,   885,  1514,   346,  1186,  1375,  1376,  1499,  1380,   656,
     654,  1371,   655,   655,   656,   662,  1606,   655,   656,   756,
     198,  1584,  1584,  1584,  1300,  1300,   152,   388,  1336,  1337,
    1342,   599,   251,  1506,  1509,   662,   655,   655,    84,   585,
     429,  1543,  1528,  1530,  1316,  1321,  1418,  1427,   642,   656,
     593,   655,  1610,  1273,   659,   258,  1279,  1279,  1263,   258,
     374,   606,   656,  1388,  1377,  1298,  1186,  1198,  1314,  1497,
     463,   654,   136,   244,   599,   823,   704,  1646,   130,   249,
     431,   538,   947,  1502,   274,   923,   948,   949,   950,   951,
     952,   873,   874,   656,   937,   835,  1051,  1501,   933,    65,
     195,   414,   594,   958,  1028,   933,  1052,  1029,  1030,  1030,
     933,   132,  1509,  1501,  1150,  1326,  1324,  1356,  1324,    13,
    1073,  1081,  1082,  1509,  1150,  1506,  1506,   995,  1378,  1324,
     261,  1356,   261,  1356,  1356,   942,  1082,  1378,   189,   264,
     364,   945,  1324,   132,  1509,  1326,  1326,  1356,  1150,  1309,
    1310,  1499,   132,  1324,   132,  1324,  1330,   876,  1506,  1150,
    1502,  1150,  1150,    86,    88,   132,   154,   190,   392,   436,
     944,   132,  1324,   132,  1324,   132,  1324,  1324,  1330,  1073,
     939,     6,   150,  1085,   948,  1509,     9,   189,  1100,   437,
     957,   958,  1021,   962,   662,   132,  1327,  1506,  1509,   412,
    1198,  1198,   374,   711,   717,   374,    83,   712,  1509,  1635,
      20,    13,   654,  1132,  1073,   655,   656,   685,   686,  1324,
     654,  1509,   865,   838,  1506,   692,   694,   696,  1509,  1300,
    1311,  1294,  1198,   129,   289,   368,   584,    22,    36,    50,
     591,   995,  1005,  1006,  1007,   368,   654,   983,   989,    62,
     119,   122,   130,   148,   192,   249,   350,   353,   431,   568,
     597,   976,   977,  1209,  1239,   655,  1294,  1294,    49,   485,
    1233,  1198,  1198,  1242,    45,   351,   655,   628,  1221,  1198,
    1294,  1198,  1198,  1198,  1198,   655,   655,   655,  1325,   655,
    1019,  1014,  1012,  1014,  1015,  1324,  1271,  1615,  1509,   655,
    1242,  1194,   180,   284,   210,   454,  1591,  1591,  1591,   132,
    1198,  1382,  1383,   153,  1174,   268,   233,   452,  1471,   887,
     655,   216,   261,   902,   655,   656,   655,  1190,   656,  1377,
    1381,  1382,  1379,  1373,  1371,  1495,  1509,   877,  1509,  1584,
    1317,   212,  1305,  1508,  1508,   661,  1338,  1339,  1511,   493,
     649,  1529,  1534,  1316,  1506,   687,  1614,  1298,  1251,  1248,
    1263,   258,   258,  1248,  1263,  1253,  1254,  1390,  1300,  1383,
    1288,  1289,  1190,   656,    21,   137,  1315,   947,  1653,   374,
     374,   728,   729,   731,  1509,   509,  1502,   655,   655,   656,
     870,  1471,   937,  1150,   654,   261,   261,  1030,  1052,  1051,
    1036,  1052,  1052,   150,   491,  1073,  1501,  1070,   656,  1325,
     997,  1506,  1356,  1081,  1501,  1501,   628,  1506,  1501,  1073,
     656,  1315,   880,  1073,  1078,  1073,   654,   655,  1509,  1502,
      35,    36,    41,    43,    45,    46,   119,   122,   130,   148,
     165,   190,   192,   205,   206,   249,   278,   287,   288,   290,
     323,   324,   325,   342,   343,   344,   350,   353,   370,   371,
     406,   407,   431,   487,   491,   505,   562,   565,   568,   569,
     570,   571,   612,   613,   639,   963,   972,   975,   976,   977,
     978,   979,   980,   981,  1509,  1294,   501,  1506,   149,  1066,
     655,   656,  1636,  1637,  1133,   236,   655,  1291,   655,   656,
     701,   654,   654,   654,   275,  1322,   655,   655,   655,   655,
     655,    36,    22,   591,   995,    36,   996,   656,   368,   988,
     982,    62,   988,   249,  1007,   655,   655,   655,  1235,  1488,
     655,   655,   656,   655,   337,   263,   424,   655,   655,   655,
     655,   655,   655,  1010,   655,   656,   946,  1185,  1317,  1610,
     655,    18,  1445,   381,    66,   256,   360,   525,   541,   634,
    1579,  1580,   628,  1592,  1592,  1592,   655,   656,  1385,   248,
     654,   890,   884,   903,  1509,   901,   925,  1376,  1383,   655,
    1609,    49,   217,  1302,  1343,  1511,   656,   337,  1266,   374,
    1256,  1263,  1263,   374,  1258,  1198,   654,  1311,  1286,  1287,
    1276,  1497,   509,   242,   251,   389,   732,   733,   734,   735,
    1192,   478,   655,   656,   730,  1506,   655,   868,   867,   950,
      20,   926,  1075,  1198,  1052,  1036,   654,  1035,  1035,   132,
     132,  1086,  1144,  1082,  1002,  1501,  1099,   555,  1087,  1069,
    1310,  1079,  1081,  1071,  1444,   654,  1022,   987,   987,   988,
     988,   982,   410,   973,   982,   982,  1007,    62,   612,   976,
     978,  1007,  1007,    62,   613,   613,   616,   982,   974,   988,
     988,   988,  1007,   987,   988,    27,    73,    83,   132,   204,
     367,   374,   414,   487,   594,   965,   990,   991,   992,  1020,
    1204,  1505,   616,   987,  1007,    36,   987,  1008,   987,   987,
     988,   989,   662,   706,   713,   714,  1509,   483,   654,  1638,
    1136,  1509,    13,   654,  1134,   686,   655,  1049,  1050,  1509,
    1049,  1049,   472,  1320,  1398,   996,  1008,   368,  1236,  1497,
    1198,   337,   179,   655,  1324,  1189,  1189,   143,   561,   561,
     561,    18,  1578,   210,   315,   316,   320,   321,  1594,  1595,
    1383,   261,   555,  1192,   893,   654,   610,   904,   946,  1306,
    1497,  1303,  1311,   995,   998,  1339,  1615,  1255,   606,  1257,
     606,  1293,  1322,   194,   233,   605,  1281,  1282,  1285,   946,
    1315,  1506,   655,   656,   730,  1641,   705,  1647,   731,   972,
     993,  1609,   935,   654,   923,   399,   654,  1076,   655,   654,
     654,  1049,   654,   654,   122,   565,   568,   647,   648,  1491,
    1492,   961,  1502,   963,  1150,  1080,  1122,   655,  1023,  1509,
     314,  1024,   499,   597,   640,   984,   985,   986,   654,   984,
     984,  1007,   616,   984,   654,  1007,   984,  1001,  1506,   363,
     994,  1491,    15,   599,   132,   261,    20,   992,   261,   367,
    1377,  1007,  1008,  1007,  1008,   984,   984,  1509,   527,   708,
      55,    70,   187,   232,   257,   269,   378,   464,   715,   773,
     775,   776,   777,   779,   780,   781,   782,   783,   784,   786,
     794,   795,   798,   809,   812,   814,   815,  1505,  1510,  1516,
    1179,  1177,   628,  1639,   655,   656,  1135,   655,   656,  1315,
     654,   655,   655,   175,   472,   462,  1401,   655,   656,  1315,
     655,   655,    63,  1579,   381,  1324,  1324,  1324,   368,   647,
    1323,  1595,   599,  1502,   897,   542,   898,   895,   896,  1509,
     251,   271,    83,    91,   118,   237,   317,   335,   359,   552,
     920,   921,   922,  1421,   629,   630,   656,  1307,  1315,  1198,
    1317,   997,  1344,  1267,  1198,   654,  1198,   654,   655,  1029,
    1029,  1282,  1654,   734,  1509,  1502,   710,   711,   463,  1002,
     873,   923,   871,  1325,   900,  1049,  1049,   655,  1049,  1049,
    1493,  1493,  1100,   877,  1088,   248,   655,   656,   199,   397,
     500,   374,  1025,   986,  1054,  1488,  1054,   654,  1195,   363,
     611,   964,   132,  1327,  1506,  1509,  1198,   161,   709,   796,
     799,  1509,   198,   358,   787,   774,  1510,  1510,  1509,   778,
     669,   291,   451,   627,   818,    33,   816,   663,   655,    54,
      65,   281,  1509,   414,  1137,  1138,  1509,    83,   260,  1037,
    1040,  1043,  1044,  1045,  1505,  1050,   368,   628,  1038,  1042,
    1044,  1047,  1039,  1041,  1044,  1046,   175,  1190,  1497,   289,
     368,  1391,  1392,  1499,  1261,  1193,  1325,   655,   656,   906,
     563,  1378,  1378,   142,   142,  1378,  1378,  1378,  1378,   654,
     915,   922,   164,  1497,   416,  1331,    75,  1472,  1610,  1293,
    1293,   196,  1280,  1280,   719,   993,   196,   707,  1648,   870,
     655,  1606,   655,   655,   655,   953,   655,   655,  1100,   654,
    1509,   136,   599,   655,   656,   655,   655,  1325,  1195,   654,
    1198,  1198,   625,   801,   805,   198,  1509,   789,   790,  1198,
     737,   772,   773,   775,   777,   779,   781,   782,   783,   784,
     786,   794,   809,   812,   814,   737,   819,   817,   810,   813,
    1609,    65,   381,    65,   655,   656,  1506,  1378,   693,  1045,
    1377,  1315,   655,   395,   695,  1047,   697,  1046,  1315,   656,
    1377,  1466,   655,   894,   896,   654,   908,   910,   905,  1506,
    1506,  1378,  1378,  1327,  1327,  1325,  1511,   543,   916,   917,
    1378,  1315,  1509,   159,   169,   382,   560,  1473,  1474,   277,
    1475,   655,   655,   212,   258,   384,  1284,  1283,   140,   720,
     721,  1204,  1655,  1192,   712,   993,   872,  1021,   956,  1037,
     954,   955,   900,    53,   364,   459,   491,  1026,  1026,  1007,
    1488,  1007,   655,   971,   797,   806,   156,   805,   808,   248,
     160,  1198,   160,   772,   660,   598,  1198,   738,   818,   816,
     381,   381,  1138,  1324,  1089,  1090,  1091,   132,  1327,  1506,
    1509,  1505,  1089,  1089,  1392,  1383,   998,   898,   654,   909,
     910,   911,   322,   907,   910,  1506,  1506,   918,   655,   656,
     942,  1332,    49,    49,   159,    49,  1474,   526,   560,  1476,
    1477,    49,    49,   654,   654,   140,   772,  1642,   149,  1649,
    1609,  1037,  1038,  1039,   655,     5,   132,   367,   374,   374,
     655,   625,   800,   802,  1198,   737,   160,   785,   232,   564,
     291,   660,   821,   149,   131,   736,   739,   811,  1510,   811,
    1091,  1090,  1467,   655,   656,   322,   913,   914,  1201,   919,
    1511,   917,   654,  1488,  1488,    49,  1488,    49,    49,  1477,
    1290,  1292,   155,   713,   719,   599,   136,   402,   620,   966,
     803,   802,   808,   807,    55,   788,  1509,   791,  1198,   820,
      99,   178,   744,   770,  1509,   160,   772,   660,   472,  1478,
     910,   656,   912,   920,  1192,  1333,  1334,  1335,  1488,  1488,
    1488,   655,   655,   474,  1650,  1026,  1026,    83,   594,   967,
     968,   969,  1198,   160,   564,   656,   737,   160,   737,   214,
     656,   740,    90,   112,   660,   230,  1472,   914,   655,  1198,
     655,   656,  1643,   772,  1506,   261,   969,   804,    55,   737,
    1509,   792,   451,   160,   196,  1509,   993,   196,   196,    49,
    1475,  1193,  1335,   772,   564,   156,   157,   793,   627,   741,
     132,   771,   747,   748,  1324,   742,   743,  1488,   233,  1479,
     737,   737,   789,   514,   516,   745,   746,   747,   750,  1204,
    1509,  1198,  1175,   368,   654,  1481,   656,   772,   197,   277,
     472,  1480,   655,   661,  1482,  1483,  1499,   491,  1484,   746,
    1511,   655,   656,  1485,  1486,  1499,  1483,   656,  1377,  1486,
    1192,  1383,  1193
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   664,   665,   666,   665,   665,   667,   667,   668,   668,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   669,   669,   669,   669,   669,
     669,   669,   669,   669,   669,   670,   671,   671,   672,   673,
     673,   675,   674,   676,   676,   677,   677,   678,   680,   679,
     682,   681,   683,   683,   684,   684,   684,   684,   684,   684,
     684,   684,   684,   684,   684,   684,   684,   684,   684,   684,
     684,   685,   685,   685,   686,   687,   687,   687,   687,   687,
     687,   687,   688,   688,   689,   691,   690,   692,   693,   690,
     694,   695,   690,   696,   697,   690,   698,   690,   699,   690,
     690,   690,   690,   690,   690,   700,   701,   701,   702,   702,
     702,   702,   702,   702,   702,   704,   703,   706,   705,   705,
     707,   707,   707,   707,   708,   708,   709,   709,   710,   710,
     711,   711,   712,   712,   714,   713,   715,   715,   715,   715,
     715,   715,   715,   715,   715,   715,   715,   715,   715,   716,
     717,   717,   718,   718,   719,   719,   720,   720,   720,   720,
     720,   720,   720,   721,   721,   721,   722,   722,   724,   723,
     725,   725,   726,   726,   727,   727,   728,   728,   729,   729,
     730,   731,   732,   732,   733,   733,   734,   735,   735,   735,
     735,   736,   736,   737,   737,   738,   738,   740,   739,   739,
     741,   739,   739,   743,   742,   744,   744,   745,   745,   746,
     747,   747,   748,   749,   749,   750,   750,   750,   750,   750,
     751,   752,   752,   753,   753,   754,   754,   755,   755,   756,
     756,   756,   757,   757,   757,   757,   757,   757,   757,   757,
     757,   757,   757,   757,   758,   759,   760,   760,   761,   761,
     762,   762,   763,   764,   764,   765,   765,   766,   767,   767,
     768,   769,   769,   769,   769,   769,   769,   769,   769,   769,
     769,   769,   769,   769,   770,   770,   771,   771,   772,   772,
     772,   772,   772,   772,   772,   772,   772,   772,   772,   772,
     772,   774,   773,   776,   775,   778,   777,   780,   779,   781,
     782,   783,   785,   784,   786,   787,   787,   787,   788,   788,
     790,   791,   792,   789,   793,   793,   793,   794,   794,   796,
     797,   795,   799,   798,   800,   800,   801,   801,   803,   804,
     802,   806,   807,   805,   808,   808,   810,   809,   811,   811,
     813,   812,   815,   814,   817,   816,   818,   819,   820,   818,
     821,   818,   822,   822,   823,   823,   823,   824,   825,   826,
     827,   827,   828,   828,   829,   830,   831,   831,   833,   832,
     834,   834,   834,   835,   835,   835,   836,   837,   837,   837,
     838,   838,   838,   838,   838,   838,   838,   838,   839,   840,
     840,   840,   841,   841,   841,   841,   841,   842,   843,   843,
     843,   844,   844,   844,   844,   844,   844,   844,   845,   846,
     846,   846,   847,   847,   847,   848,   849,   850,   851,   852,
     853,   853,   853,   854,   855,   856,   857,   858,   859,   860,
     861,   862,   863,   863,   864,   864,   865,   865,   867,   866,
     866,   868,   866,   866,   869,   869,   870,   871,   870,   872,
     870,   873,   874,   874,   876,   875,   877,   879,   878,   880,
     881,   882,   881,   881,   881,   881,   881,   883,   883,   884,
     884,   885,   885,   886,   886,   887,   888,   889,   890,   891,
     891,   892,   893,   892,   894,   892,   895,   895,   896,   897,
     898,   898,   899,   899,   900,   900,   902,   901,   903,   904,
     905,   904,   906,   904,   907,   907,   908,   908,   909,   909,
     911,   912,   910,   913,   913,   914,   914,   915,   915,   916,
     916,   918,   917,   919,   920,   920,   921,   921,   922,   922,
     922,   922,   922,   922,   922,   922,   922,   924,   925,   923,
     926,   926,   927,   927,   928,   928,   929,   929,   930,   930,
     931,   931,   932,   933,   933,   934,   934,   935,   935,   936,
     936,   937,   937,   937,   938,   938,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,
     938,   938,   938,   938,   939,   938,   938,   938,   938,   938,
     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,
     938,   940,   941,   942,   943,   944,   944,   944,   944,   944,
     944,   944,   945,   945,   945,   946,   946,   947,   947,   947,
     947,   948,   949,   949,   950,   950,   951,   951,   953,   952,
     954,   952,   955,   952,   956,   952,   952,   952,   957,   957,
     958,   959,   959,   960,   962,   961,   963,   964,   963,   965,
     965,   966,   966,   966,   967,   967,   968,   968,   969,   969,
     969,   970,   971,   972,   972,   972,   972,   972,   972,   972,
     972,   972,   972,   972,   972,   972,   972,   972,   972,   972,
     972,   972,   972,   972,   972,   972,   972,   972,   972,   972,
     972,   972,   972,   972,   972,   972,   972,   972,   973,   972,
     974,   972,   972,   972,   975,   975,   975,   975,   975,   975,
     975,   975,   976,   977,   977,   978,   978,   979,   979,   979,
     979,   979,   980,   980,   980,   980,   980,   981,   981,   981,
     982,   982,   982,   983,   984,   984,   985,   985,   986,   986,
     986,   987,   987,   987,   987,   988,   988,   989,   989,   990,
     990,   991,   991,   992,   992,   992,   992,   992,   992,   992,
     992,   992,   992,   992,   992,   992,   992,   992,   993,   994,
     994,   995,   995,   996,   996,   997,   997,   998,   998,   999,
     999,  1000,  1000,  1001,  1002,  1002,  1003,  1003,  1004,  1004,
    1005,  1005,  1005,  1006,  1006,  1006,  1007,  1007,  1007,  1007,
    1007,  1007,  1007,  1008,  1008,  1010,  1009,  1011,  1011,  1012,
    1013,  1013,  1013,  1013,  1014,  1015,  1016,  1016,  1017,  1018,
    1018,  1019,  1019,  1020,  1020,  1021,  1022,  1022,  1023,  1023,
    1024,  1024,  1024,  1024,  1025,  1025,  1025,  1025,  1025,  1026,
    1026,  1026,  1026,  1026,  1027,  1028,  1028,  1029,  1029,  1030,
    1030,  1031,  1031,  1031,  1032,  1032,  1033,  1034,  1035,  1036,
    1036,  1037,  1037,  1038,  1038,  1039,  1039,  1040,  1040,  1041,
    1041,  1042,  1042,  1043,  1043,  1044,  1044,  1044,  1044,  1044,
    1044,  1045,  1045,  1046,  1047,  1047,  1048,  1048,  1048,  1049,
    1049,  1050,  1050,  1051,  1051,  1052,  1053,  1053,  1054,  1054,
    1056,  1057,  1055,  1058,  1055,  1055,  1059,  1055,  1060,  1055,
    1061,  1055,  1062,  1055,  1063,  1055,  1055,  1055,  1055,  1055,
    1055,  1064,  1064,  1064,  1064,  1065,  1065,  1066,  1066,  1067,
    1067,  1068,  1068,  1068,  1068,  1068,  1068,  1068,  1068,  1068,
    1068,  1069,  1068,  1068,  1070,  1068,  1071,  1068,  1068,  1068,
    1068,  1068,  1072,  1073,  1073,  1075,  1074,  1076,  1076,  1076,
    1078,  1077,  1079,  1080,  1079,  1081,  1081,  1082,  1083,  1083,
    1084,  1085,  1085,  1085,  1086,  1085,  1087,  1088,  1085,  1085,
    1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,  1085,
    1085,  1085,  1085,  1085,  1089,  1089,  1089,  1089,  1089,  1090,
    1090,  1091,  1091,  1092,  1092,  1093,  1093,  1095,  1094,  1096,
    1096,  1097,  1097,  1098,  1098,  1099,  1099,  1099,  1100,  1100,
    1100,  1101,  1101,  1101,  1101,  1103,  1102,  1104,  1102,  1102,
    1102,  1105,  1106,  1106,  1107,  1107,  1108,  1108,  1108,  1110,
    1109,  1111,  1111,  1112,  1112,  1112,  1113,  1113,  1113,  1114,
    1114,  1116,  1115,  1117,  1117,  1117,  1118,  1119,  1118,  1121,
    1120,  1122,  1122,  1123,  1123,  1124,  1124,  1124,  1125,  1125,
    1127,  1126,  1128,  1128,  1129,  1130,  1130,  1131,  1131,  1132,
    1133,  1132,  1134,  1135,  1134,  1136,  1136,  1136,  1137,  1137,
    1137,  1138,  1138,  1139,  1140,  1141,  1140,  1143,  1142,  1144,
    1144,  1145,  1145,  1146,  1146,  1146,  1146,  1146,  1146,  1147,
    1147,  1149,  1148,  1150,  1150,  1150,  1152,  1151,  1151,  1153,
    1153,  1154,  1154,  1155,  1157,  1156,  1158,  1158,  1159,  1159,
    1160,  1161,  1162,  1162,  1164,  1163,  1165,  1165,  1166,  1166,
    1167,  1168,  1170,  1169,  1172,  1171,  1173,  1173,  1174,  1174,
    1175,  1176,  1176,  1177,  1177,  1178,  1178,  1180,  1179,  1182,
    1183,  1181,  1184,  1184,  1184,  1184,  1184,  1185,  1185,  1186,
    1186,  1187,  1187,  1188,  1188,  1188,  1189,  1189,  1189,  1190,
    1190,  1190,  1191,  1191,  1192,  1193,  1194,  1194,  1194,  1194,
    1194,  1195,  1195,  1195,  1196,  1196,  1196,  1197,  1197,  1198,
    1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,  1198,
    1199,  1199,  1199,  1199,  1199,  1199,  1200,  1200,  1200,  1200,
    1200,  1200,  1200,  1200,  1200,  1200,  1200,  1200,  1200,  1200,
    1201,  1201,  1201,  1201,  1201,  1201,  1201,  1201,  1201,  1201,
    1201,  1201,  1201,  1201,  1201,  1202,  1202,  1203,  1203,  1204,
    1204,  1205,  1205,  1206,  1206,  1206,  1206,  1206,  1206,  1207,
    1207,  1208,  1208,  1209,  1209,  1209,  1209,  1209,  1209,  1209,
    1209,  1209,  1209,  1209,  1210,  1211,  1211,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,  1212,
    1212,  1212,  1212,  1212,  1212,  1212,  1212,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,  1213,
    1213,  1213,  1213,  1213,  1213,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,  1214,
    1214,  1214,  1215,  1215,  1215,  1215,  1215,  1215,  1215,  1215,
    1215,  1215,  1215,  1215,  1215,  1215,  1215,  1215,  1215,  1215,
    1215,  1215,  1215,  1215,  1215,  1215,  1216,  1216,  1216,  1216,
    1216,  1216,  1216,  1216,  1218,  1217,  1217,  1219,  1219,  1220,
    1220,  1221,  1221,  1222,  1222,  1223,  1223,  1224,  1225,  1225,
    1225,  1225,  1225,  1225,  1225,  1226,  1227,  1225,  1225,  1225,
    1225,  1225,  1225,  1225,  1225,  1225,  1225,  1225,  1228,  1225,
    1230,  1229,  1231,  1231,  1231,  1232,  1232,  1233,  1233,  1234,
    1235,  1234,  1236,  1236,  1238,  1237,  1239,  1239,  1239,  1239,
    1239,  1239,  1239,  1239,  1239,  1239,  1239,  1239,  1240,  1239,
    1241,  1241,  1242,  1242,  1243,  1243,  1244,  1244,  1245,  1245,
    1246,  1246,  1247,  1247,  1248,  1248,  1249,  1250,  1250,  1251,
    1251,  1252,  1253,  1252,  1254,  1252,  1252,  1255,  1252,  1256,
    1252,  1252,  1257,  1252,  1258,  1252,  1252,  1259,  1259,  1259,
    1260,  1260,  1261,  1261,  1262,  1264,  1263,  1263,  1263,  1265,
    1266,  1267,  1265,  1268,  1270,  1271,  1269,  1273,  1272,  1275,
    1276,  1274,  1277,  1278,  1279,  1279,  1280,  1280,  1280,  1280,
    1281,  1281,  1283,  1282,  1284,  1282,  1285,  1285,  1286,  1287,
    1286,  1289,  1288,  1290,  1290,  1291,  1291,  1292,  1292,  1293,
    1293,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,  1294,
    1294,  1294,  1294,  1295,  1295,  1295,  1295,  1295,  1295,  1295,
    1295,  1295,  1296,  1296,  1296,  1296,  1297,  1297,  1297,  1298,
    1298,  1299,  1299,  1300,  1301,  1300,  1302,  1303,  1302,  1304,
    1304,  1305,  1305,  1306,  1306,  1307,  1307,  1307,  1308,  1309,
    1309,  1310,  1311,  1311,  1313,  1312,  1314,  1314,  1315,  1315,
    1315,  1316,  1316,  1317,  1317,  1318,  1318,  1318,  1319,  1319,
    1319,  1320,  1320,  1320,  1320,  1320,  1321,  1322,  1322,  1322,
    1322,  1323,  1323,  1323,  1324,  1324,  1324,  1324,  1324,  1324,
    1325,  1325,  1325,  1325,  1325,  1326,  1326,  1326,  1326,  1326,
    1327,  1327,  1327,  1327,  1327,  1328,  1329,  1329,  1330,  1330,
    1331,  1332,  1331,  1333,  1333,  1334,  1334,  1335,  1337,  1336,
    1338,  1338,  1339,  1339,  1341,  1340,  1343,  1344,  1342,  1342,
    1342,  1346,  1345,  1348,  1347,  1349,  1347,  1347,  1347,  1347,
    1347,  1347,  1347,  1350,  1347,  1347,  1347,  1347,  1347,  1347,
    1351,  1351,  1352,  1353,  1354,  1354,  1355,  1356,  1356,  1357,
    1357,  1359,  1360,  1358,  1362,  1363,  1361,  1364,  1364,  1364,
    1364,  1365,  1365,  1366,  1366,  1367,  1368,  1368,  1368,  1369,
    1368,  1370,  1370,  1371,  1371,  1372,  1371,  1373,  1371,  1374,
    1374,  1375,  1375,  1376,  1377,  1377,  1378,  1378,  1380,  1379,
    1381,  1381,  1382,  1382,  1383,  1383,  1384,  1385,  1384,  1387,
    1388,  1386,  1389,  1389,  1390,  1391,  1391,  1392,  1393,  1393,
    1395,  1394,  1397,  1398,  1396,  1399,  1396,  1400,  1396,  1401,
    1401,  1402,  1402,  1403,  1403,  1404,  1404,  1405,  1405,  1406,
    1406,  1406,  1408,  1407,  1409,  1409,  1410,  1410,  1411,  1411,
    1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,  1412,  1413,
    1413,  1415,  1414,  1416,  1416,  1416,  1416,  1416,  1416,  1416,
    1416,  1416,  1416,  1416,  1416,  1416,  1416,  1417,  1416,  1418,
    1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,
    1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,
    1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,
    1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1416,  1419,
    1419,  1419,  1420,  1420,  1421,  1421,  1422,  1422,  1423,  1423,
    1424,  1424,  1425,  1425,  1426,  1426,  1427,  1427,  1427,  1429,
    1428,  1430,  1428,  1431,  1431,  1431,  1431,  1431,  1432,  1432,
    1433,  1433,  1433,  1434,  1434,  1434,  1436,  1435,  1438,  1437,
    1437,  1439,  1439,  1440,  1441,  1440,  1442,  1442,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,  1443,
    1443,  1443,  1443,  1443,  1443,  1443,  1443,  1444,  1444,  1445,
    1445,  1447,  1446,  1448,  1448,  1450,  1449,  1449,  1449,  1451,
    1451,  1453,  1452,  1454,  1455,  1455,  1457,  1456,  1458,  1458,
    1458,  1459,  1459,  1459,  1459,  1460,  1460,  1461,  1462,  1464,
    1465,  1466,  1467,  1463,  1468,  1468,  1469,  1469,  1470,  1470,
    1470,  1471,  1471,  1471,  1472,  1472,  1473,  1473,  1474,  1474,
    1474,  1474,  1475,  1475,  1476,  1476,  1477,  1477,  1478,  1478,
    1479,  1479,  1480,  1480,  1481,  1481,  1481,  1482,  1482,  1483,
    1483,  1484,  1484,  1485,  1485,  1486,  1487,  1487,  1487,  1487,
    1488,  1488,  1489,  1489,  1489,  1490,  1491,  1491,  1491,  1492,
    1492,  1492,  1492,  1492,  1492,  1492,  1492,  1492,  1492,  1493,
    1493,  1493,  1493,  1493,  1494,  1494,  1494,  1495,  1495,  1496,
    1496,  1497,  1498,  1498,  1499,  1499,  1500,  1500,  1500,  1501,
    1501,  1501,  1501,  1502,  1502,  1502,  1503,  1503,  1504,  1505,
    1505,  1506,  1507,  1508,  1509,  1509,  1510,  1510,  1511,  1511,
    1511,  1512,  1512,  1512,  1513,  1513,  1514,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,  1515,
    1515,  1515,  1515,  1515,  1515,  1515,  1515,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,
    1516,  1516,  1516,  1516,  1516,  1516,  1516,  1516,  1518,  1517,
    1520,  1519,  1521,  1519,  1522,  1519,  1524,  1523,  1523,  1525,
    1525,  1527,  1526,  1528,  1526,  1530,  1529,  1529,  1531,  1531,
    1531,  1532,  1532,  1532,  1532,  1533,  1533,  1533,  1533,  1534,
    1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1535,  1536,
    1536,  1536,  1537,  1537,  1537,  1537,  1538,  1539,  1540,  1540,
    1541,  1541,  1541,  1541,  1542,  1542,  1542,  1543,  1543,  1543,
    1543,  1543,  1545,  1544,  1546,  1546,  1547,  1547,  1548,  1549,
    1549,  1549,  1549,  1549,  1551,  1550,  1552,  1552,  1553,  1552,
    1554,  1554,  1555,  1555,  1556,  1556,  1556,  1556,  1557,  1556,
    1558,  1558,  1558,  1558,  1558,  1559,  1560,  1560,  1560,  1560,
    1560,  1560,  1561,  1561,  1562,  1563,  1563,  1563,  1563,  1563,
    1564,  1564,  1565,  1565,  1566,  1566,  1567,  1568,  1568,  1569,
    1569,  1570,  1570,  1571,  1571,  1572,  1572,  1574,  1573,  1575,
    1573,  1576,  1573,  1577,  1573,  1573,  1573,  1573,  1573,  1573,
    1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,
    1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,  1573,
    1573,  1578,  1578,  1579,  1579,  1580,  1580,  1580,  1581,  1581,
    1581,  1581,  1582,  1582,  1583,  1583,  1584,  1584,  1585,  1585,
    1586,  1586,  1587,  1587,  1587,  1587,  1587,  1588,  1588,  1589,
    1589,  1590,  1591,  1591,  1591,  1591,  1591,  1592,  1592,  1593,
    1593,  1594,  1594,  1595,  1595,  1595,  1595,  1595,  1597,  1596,
    1598,  1598,  1599,  1599,  1599,  1600,  1600,  1600,  1601,  1601,
    1602,  1603,  1603,  1604,  1605,  1606,  1606,  1608,  1607,  1609,
    1609,  1609,  1610,  1610,  1612,  1611,  1613,  1613,  1614,  1614,
    1614,  1615,  1615,  1616,  1617,  1616,  1618,  1619,  1620,  1621,
    1621,  1622,  1622,  1623,  1623,  1623,  1623,  1623,  1623,  1623,
    1623,  1624,  1624,  1624,  1625,  1625,  1625,  1625,  1625,  1626,
    1626,  1626,  1626,  1626,  1626,  1627,  1627,  1628,  1629,  1630,
    1630,  1630,  1631,  1631,  1631,  1633,  1632,  1634,  1634,  1635,
    1635,  1637,  1636,  1638,  1638,  1639,  1639,  1639,  1639,  1641,
    1642,  1643,  1640,  1644,  1644,  1646,  1647,  1648,  1649,  1650,
    1645,  1652,  1653,  1654,  1655,  1651,  1656,  1656,  1656,  1656,
    1656,  1656,  1657,  1657,  1657,  1658,  1658,  1659,  1659,  1659,
    1660,  1660,  1661,  1662,  1661,  1663,  1663,  1664,  1664,  1665,
    1665,  1666
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     0,     4,     2,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     1,     1,     4,     1,
       2,     0,     4,     0,     2,     3,     1,     2,     0,     3,
       0,     6,     1,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     5,
       1,     0,     1,     3,     1,     3,     3,     3,     3,     3,
       3,     3,     0,     1,     1,     0,     7,     0,     0,    15,
       0,     0,    15,     0,     0,    15,     0,     6,     0,     3,
       4,     5,     4,     3,     2,    10,     1,     3,     2,     2,
       2,     2,     2,     2,     2,     0,    13,     0,     6,     2,
       0,     1,     3,     1,     0,     2,     0,     2,     0,     1,
       3,     4,     0,     2,     0,     2,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
       3,     1,     0,     2,     0,     2,     2,     2,     2,     2,
       3,     3,     1,     1,     1,     2,     3,     3,     0,     4,
       0,     3,     0,     1,     3,     1,     0,     1,     3,     1,
       0,     3,     0,     1,     3,     1,     4,     0,     1,     1,
       1,     0,     3,     2,     3,     0,     3,     0,     5,     5,
       0,     7,     5,     0,     2,     1,     1,     1,     3,     1,
       1,     1,     3,     0,     1,     1,     1,     1,     2,     1,
       3,     1,     1,     0,     1,     0,     2,     3,     5,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     4,     0,     1,     1,     3,
       1,     3,     3,     1,     2,     1,     1,     1,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     3,     0,     2,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     5,     0,     2,     0,     3,     0,     2,     2,
       2,     2,     0,     6,     2,     0,     2,     1,     1,     3,
       0,     0,     0,     7,     0,     2,     2,     1,     1,     0,
       0,     8,     0,     6,     1,     2,     1,     2,     0,     0,
       6,     0,     0,     6,     0,     2,     0,     5,     0,     1,
       0,     5,     0,     2,     0,     5,     4,     0,     0,     8,
       0,     7,     1,     1,     1,     1,     1,     2,     4,     5,
       0,     4,     4,     4,     3,     3,     2,     2,     0,     2,
       1,     2,     3,     1,     1,     1,     1,     1,     2,     3,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     1,     1,     1,     1,     2,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       2,     3,     1,     1,     1,     2,     2,     2,     1,     1,
       1,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     4,     0,     1,     1,     1,     1,     1,     0,     7,
       3,     0,     5,     1,     2,     4,     0,     0,     5,     0,
       7,     1,     0,     1,     0,     4,     0,     0,     3,     5,
       6,     0,     4,     2,     2,     2,     2,     0,     1,     0,
       3,     0,     1,     1,     3,     1,     4,     5,     5,     0,
       2,     0,     0,     7,     0,    10,     1,     3,     1,     1,
       0,     2,     0,     3,     1,     3,     0,     6,     1,     0,
       0,     5,     0,     4,     1,     1,     1,     3,     1,     3,
       0,     0,     5,     1,     3,     1,     1,     0,     3,     1,
       3,     0,     4,     1,     0,     1,     2,     1,     3,     4,
       3,     3,     3,     3,     4,     4,     3,     0,     0,     6,
       0,     1,     0,     1,     1,     2,     1,     1,     0,     1,
       1,     2,     1,     0,     3,     1,     3,     0,     1,     1,
       2,     1,     2,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     0,     6,     1,     1,     3,     4,
       4,     2,     2,     2,     3,     3,     3,     3,     3,     3,
       3,     4,     4,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     1,
       1,     1,     1,     3,     1,     1,     2,     2,     0,     8,
       0,     9,     0,     9,     0,     9,     8,     2,     0,     1,
       4,     0,     1,     2,     0,     3,     2,     0,     9,     0,
       2,     0,     1,     1,     0,     1,     2,     1,     1,     2,
       2,     4,     3,     3,     3,     3,     1,     2,     1,     1,
       3,     2,     3,     2,     2,     1,     3,     3,     2,     3,
       1,     2,     2,     2,     1,     2,     1,     1,     1,     2,
       3,     2,     3,     2,     2,     3,     3,     3,     0,     6,
       0,     6,     2,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     2,     2,     1,     2,     1,     2,
       3,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       0,     1,     1,     5,     0,     1,     2,     1,     1,     1,
       1,     3,     3,     3,     3,     0,     1,     0,     1,     0,
       1,     2,     1,     1,     2,     2,     4,     1,     3,     2,
       1,     2,     2,     2,     3,     3,     3,     3,     2,     2,
       1,     2,     1,     1,     1,     1,     1,     0,     2,     1,
       1,     1,     1,     1,     0,     2,     1,     1,     0,     1,
       1,     2,     2,     1,     2,     2,     0,     1,     1,     1,
       3,     1,     3,     0,     1,     0,     4,     1,     1,     1,
       0,     1,     2,     1,     1,     2,     1,     3,     3,     1,
       1,     0,     2,     0,     1,     5,     0,     3,     3,     1,
       0,     2,     2,     2,     0,     3,     3,     6,     6,     1,
       1,     2,     2,     2,     1,     2,     2,     1,     1,     0,
       1,     1,     1,     1,     0,     1,     1,     1,     0,     1,
       2,     0,     1,     0,     1,     0,     1,     1,     2,     1,
       2,     1,     2,     2,     2,     3,     2,     3,     3,     3,
       3,     1,     1,     1,     1,     3,     1,     1,     1,     4,
       2,     1,     4,     0,     1,     2,     0,     2,     1,     3,
       0,     0,     7,     0,     5,     7,     0,     5,     0,     5,
       0,     5,     0,     4,     0,    10,     3,     4,     3,     3,
       7,     0,     3,     1,     4,     0,     3,     0,     2,     0,
       1,     0,     2,     2,     2,     2,     1,     1,     1,     4,
       4,     0,     6,     4,     0,     5,     0,     6,     4,     3,
       1,     7,     2,     1,     1,     0,     6,     0,     3,     2,
       0,     5,     0,     0,     6,     1,     3,     1,     1,     3,
       3,     3,     2,     4,     0,     7,     0,     0,     8,     5,
       5,     3,     4,     2,     2,     6,     5,     3,     5,     1,
       1,     1,     1,     1,     0,     1,     1,     2,     2,     3,
       3,     3,     3,     0,     1,     0,     1,     0,     2,     0,
       1,     2,     1,     1,     1,     0,     1,     1,     0,     2,
       1,     0,     1,     1,     1,     0,     6,     0,     5,     4,
       4,     3,     0,     1,     1,     3,     3,     2,     2,     0,
       2,     1,     3,     0,     1,     1,     0,     2,     4,     1,
       3,     0,     5,     0,     1,     1,     3,     0,     4,     0,
       4,     0,     1,     1,     2,     1,     1,     1,     0,     2,
       0,     5,     1,     3,     2,     0,     3,     1,     4,     1,
       0,     4,     1,     0,     4,     0,     1,     3,     0,     1,
       3,     1,     1,     2,     3,     0,     4,     0,     3,     0,
       1,     1,     2,     1,     1,     1,     1,     1,     2,     0,
       2,     0,     5,     0,     1,     1,     0,     4,     4,     3,
       5,     1,     3,     3,     0,     6,     1,     1,     1,     3,
       2,     3,     1,     1,     0,     6,     1,     1,     1,     3,
       3,     4,     0,     6,     0,     2,     0,     4,     0,     2,
       1,     2,     4,     2,     3,     2,     3,     0,     3,     0,
       0,     6,     2,     1,     1,     2,     2,     8,     4,     0,
       1,     2,     1,     1,     1,     1,     0,     2,     4,     3,
       1,     1,     3,     4,     0,     0,     0,     2,     2,     1,
       1,     0,     2,     3,     0,     2,     3,     0,     2,     3,
       3,     3,     2,     3,     4,     3,     4,     3,     4,     1,
       3,     4,     3,     3,     6,     1,     5,     6,     5,     7,
       6,     8,     5,     6,     4,     4,     5,     3,     4,     1,
       3,     3,     3,     3,     3,     3,     5,     5,     3,     3,
       3,     3,     3,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     0,     2,     1,     2,     1,     1,     1,     2,     2,
       1,     1,     2,     2,     4,     1,     3,     1,     1,     1,
       1,     1,     3,     1,     1,     1,     1,     3,     2,     2,
       2,     2,     3,     3,     5,     6,     4,     4,     7,     2,
       6,     5,     6,     6,     4,     4,     5,     4,     6,     2,
       2,     4,     4,     4,    10,     6,     8,     6,     4,     4,
       6,     4,     4,     4,     6,     4,     7,     7,     7,     6,
       6,     6,     6,     3,     4,     6,     8,     2,     2,     8,
       8,     6,     6,     2,     6,     6,     8,     8,     6,     8,
       6,     2,     8,     8,     2,     2,     2,     6,     6,     4,
       4,     8,     4,     4,     4,     4,     3,     8,     4,     4,
       6,     4,     4,     4,     6,     8,     4,     3,     6,     4,
       6,     5,     8,     7,    10,     1,     6,     4,     4,     4,
       4,     4,     6,     4,     0,     5,     6,     2,     3,     0,
       4,     0,     3,     0,     1,     1,     3,     4,     4,     5,
       4,     4,     4,     5,     4,     0,     0,     7,     4,     5,
       4,     5,     4,     4,     4,     4,     4,     5,     0,     8,
       0,     3,     3,     1,     4,     0,     1,     0,     2,     0,
       0,     4,     4,     2,     0,     3,     2,     3,     2,     1,
       1,     2,     1,     2,     1,     2,     2,     2,     0,     3,
       0,     1,     1,     3,     1,     3,     1,     3,     0,     1,
       0,     2,     4,     5,     1,     1,     1,     1,     4,     1,
       3,     3,     0,     6,     0,     8,     4,     0,     8,     0,
      10,     6,     0,     8,     0,    10,     6,     1,     2,     1,
       1,     2,     0,     1,     5,     0,     5,     3,     5,     2,
       0,     0,     7,     1,     0,     0,     6,     0,     3,     0,
       0,     5,     0,     1,     0,     1,     0,     2,     3,     3,
       1,     1,     0,     7,     0,     7,     1,     2,     0,     0,
       2,     0,     2,     0,     1,     1,     1,     1,     3,     1,
       3,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     0,     1,     1,     0,
       2,     0,     1,     0,     0,     3,     0,     0,     3,     2,
       0,     0,     4,     4,     2,     0,     1,     1,     3,     3,
       1,     2,     0,     1,     0,     4,     4,     2,     0,     1,
       1,     0,     1,     0,     1,     2,     5,     4,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     0,     2,     3,
       4,     1,     2,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     0,     6,     0,     1,     3,     1,     3,     0,     2,
       3,     1,     2,     1,     0,     3,     0,     0,     7,     2,
       1,     0,     3,     0,     7,     0,     7,     4,     6,     4,
       4,     4,     4,     0,     6,     4,     4,     5,     6,     4,
       1,     3,     1,     2,     1,     3,     1,     0,     2,     0,
       1,     0,     0,     8,     0,     0,     6,     0,     1,     1,
       1,     1,     1,     2,     1,     1,     1,     3,     4,     0,
       3,     3,     1,     2,     2,     0,     3,     0,     5,     3,
       1,     3,     1,     3,     1,     1,     0,     1,     0,     4,
       0,     1,     3,     1,     1,     1,     0,     0,     6,     0,
       0,    11,     3,     1,     3,     3,     1,     3,     0,     1,
       0,     4,     0,     0,     9,     0,     5,     0,     6,     0,
       2,     1,     3,     2,     4,     0,     2,     0,     2,     1,
       1,     1,     0,     4,     0,     1,     0,     1,     1,     3,
       1,     1,     2,     2,     2,     1,     1,     1,     1,     0,
       3,     0,     3,     2,     4,     4,     3,     4,     4,     1,
       3,     3,     3,     3,     6,     2,     2,     0,     6,     0,
       7,     5,     2,     1,     1,     1,     5,     5,     2,     2,
       1,     4,     3,     2,     3,     2,     2,     1,     3,     4,
       3,     3,     2,     3,     2,     3,     1,     1,     1,     1,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     1,
       1,     1,     1,     1,     0,     1,     0,     2,     0,     1,
       1,     1,     0,     2,     0,     2,     0,     2,     2,     0,
       4,     0,     4,     1,     1,     1,     1,     1,     1,     1,
       0,     1,     1,     0,     1,     1,     0,     4,     0,     4,
       1,     0,     1,     4,     0,     3,     3,     1,     2,     2,
       2,     2,     2,     3,     2,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     1,     1,     0,     1,     0,
       3,     0,     3,     3,     1,     0,     4,     1,     2,     0,
       1,     0,     3,     3,     2,     2,     0,     5,     0,     1,
       1,     0,     1,     1,     2,     1,     2,     1,     2,     0,
       0,     0,     0,    22,     1,     1,     0,     1,     0,     1,
       1,     0,     1,     1,     0,     2,     2,     1,     3,     4,
       3,     3,     0,     2,     2,     1,     3,     3,     0,     4,
       0,     3,     1,     1,     0,     3,     2,     3,     1,     1,
       2,     0,     2,     3,     1,     5,     1,     1,     2,     2,
       1,     1,     1,     1,     1,     1,     1,     2,     2,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     2,     1,
       1,     1,     1,     1,     2,     2,     2,     1,     1,     3,
       5,     1,     1,     1,     1,     1,     3,     4,     5,     1,
       5,     3,     2,     1,     3,     2,     2,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     3,     2,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     0,     3,
       0,     3,     0,     3,     0,     3,     0,     3,     2,     0,
       2,     0,     2,     0,     4,     0,     3,     1,     1,     1,
       1,     0,     1,     1,     1,     0,     2,     2,     2,     3,
       3,     4,     6,     2,     3,     3,     2,     3,     5,     1,
       3,     3,     1,     1,     3,     3,     1,     3,     2,     2,
       2,     2,     2,     1,     1,     4,     4,     1,     1,     1,
       1,     1,     0,     4,     1,     1,     1,     3,     3,     1,
       1,     2,     2,     2,     0,     3,     4,     3,     0,     7,
       1,     2,     1,     1,     1,     1,     1,     1,     0,     5,
       1,     1,     1,     1,     1,     3,     6,     6,     6,     7,
       5,     3,     4,     1,     3,     8,     8,     8,     6,     4,
       0,     3,     0,     3,     1,     3,     2,     1,     1,     0,
       1,     1,     2,     0,     1,     1,     3,     0,     3,     0,
       3,     0,     3,     0,     3,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     1,     3,
       2,     2,     2,     2,     2,     2,     2,     2,     1,     1,
       2,     0,     1,     3,     1,     2,     2,     2,     1,     3,
       3,     1,     1,     3,     1,     3,     1,     3,     1,     1,
       1,     1,     4,     5,     4,     6,     1,     0,     3,     3,
       1,     1,     0,     2,     2,     2,     2,     0,     2,     0,
       3,     2,     1,     2,     2,     2,     2,     2,     0,     3,
       0,     1,     0,     3,     2,     0,     1,     2,     0,     1,
       4,     4,     5,     2,     3,     0,     1,     0,     4,     0,
       1,     1,     0,     1,     0,     2,     2,     1,     0,     1,
       1,     2,     3,     2,     0,     6,     3,     0,     0,     0,
       1,     2,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     2,     2,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     0,     3,     3,
       3,     3,     0,     3,     3,     0,     7,     0,     3,     1,
       3,     0,     3,     2,     4,     0,     3,     4,     4,     0,
       0,     0,    16,     8,     7,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,    12,     4,     4,     3,     4,
       3,     2,     1,     3,     5,     1,     1,     0,     1,     1,
       0,     2,     0,     0,     3,     0,     2,     5,     3,     3,
       3,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (thd, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, thd); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (thd);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, THD *thd)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, thd);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule, THD *thd)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                                              , thd);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule, thd); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, THD *thd)
{
  YYUSE (yyvaluep);
  YYUSE (thd);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (THD *thd)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yystacksize);

        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, thd);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 1938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!thd->bootstrap &&
              (!(thd->lex->select_lex.options & OPTION_FOUND_COMMENT)))
            {
              my_message(ER_EMPTY_QUERY, ER(ER_EMPTY_QUERY), MYF(0));
              MYSQL_YYABORT;
            }
            thd->lex->sql_command= SQLCOM_EMPTY_QUERY;
            YYLIP->found_semicolon= NULL;
          }
#line 19587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 3:
#line 1949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip = YYLIP;

            if ((thd->client_capabilities & CLIENT_MULTI_QUERIES) &&
                lip->multi_statements &&
                ! lip->eof())
            {
              /*
                We found a well formed query, and multi queries are allowed:
                - force the parser to stop after the ';'
                - mark the start of the next query for the next invocation
                  of the parser.
              */
              lip->next_state= MY_LEX_END;
              lip->found_semicolon= lip->get_ptr();
            }
            else
            {
              /* Single query, terminated. */
              lip->found_semicolon= NULL;
            }
          }
#line 19614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 5:
#line 1974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Single query, not terminated. */
            YYLIP->found_semicolon= NULL;
          }
#line 19623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 65:
#line 2051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_DEALLOCATE_PREPARE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 19633 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 68:
#line 2065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_PREPARE;
            lex->prepared_stmt_name= (yyvsp[-2].lex_str);
          }
#line 19643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 69:
#line 2074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[0].lex_str);
            lex->prepared_stmt_code_is_varref= FALSE;
          }
#line 19653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 70:
#line 2080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->prepared_stmt_code= (yyvsp[0].lex_str);
            lex->prepared_stmt_code_is_varref= TRUE;
          }
#line 19663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 71:
#line 2089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_EXECUTE;
            lex->prepared_stmt_name= (yyvsp[0].lex_str);
          }
#line 19673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 72:
#line 2095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 19679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 77:
#line 2110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            LEX_STRING *lexstr= (LEX_STRING*)sql_memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING));
            if (!lexstr || lex->prepared_stmt_params.push_back(lexstr))
              MYSQL_YYABORT;
          }
#line 19690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 78:
#line 2122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HELP");
              MYSQL_YYABORT;
            }
          }
#line 19702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 79:
#line 2130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_HELP;
            lex->help_arg= (yyvsp[0].lex_str).str;
          }
#line 19712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 80:
#line 2141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CHANGE_MASTER;
          }
#line 19720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 81:
#line 2145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 19726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 84:
#line 2155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.host = (yyvsp[0].lex_str).str;
          }
#line 19734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 85:
#line 2159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.user = (yyvsp[0].lex_str).str;
          }
#line 19742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 86:
#line 2163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.password = (yyvsp[0].lex_str).str;
          }
#line 19750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 87:
#line 2167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.port = (yyvsp[0].ulong_num);
          }
#line 19758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 88:
#line 2171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.connect_retry = (yyvsp[0].ulong_num);
          }
#line 19766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 89:
#line 2175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl= (yyvsp[0].ulong_num) ? 
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 19775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 90:
#line 2180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_ca= (yyvsp[0].lex_str).str;
          }
#line 19783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 91:
#line 2184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_capath= (yyvsp[0].lex_str).str;
          }
#line 19791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 92:
#line 2188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cert= (yyvsp[0].lex_str).str;
          }
#line 19799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 93:
#line 2192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_cipher= (yyvsp[0].lex_str).str;
          }
#line 19807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 94:
#line 2196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_key= (yyvsp[0].lex_str).str;
          }
#line 19815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 95:
#line 2200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_verify_server_cert= (yyvsp[0].ulong_num) ?
              LEX_MASTER_INFO::LEX_MI_ENABLE : LEX_MASTER_INFO::LEX_MI_DISABLE;
          }
#line 19824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 96:
#line 2205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crl= (yyvsp[0].lex_str).str;
          }
#line 19832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 97:
#line 2209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.ssl_crlpath= (yyvsp[0].lex_str).str;
          }
#line 19840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 98:
#line 2214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.heartbeat_period= (float) (yyvsp[0].item_num)->val_real();
            if (Lex->mi.heartbeat_period > SLAVE_MAX_HEARTBEAT_PERIOD ||
                Lex->mi.heartbeat_period < 0.0)
            {
               const char format[]= "%d";
               char buf[4*sizeof(SLAVE_MAX_HEARTBEAT_PERIOD) + sizeof(format)];
               sprintf(buf, format, SLAVE_MAX_HEARTBEAT_PERIOD);
               my_error(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE, MYF(0), buf);
               MYSQL_YYABORT;
            }
            if (Lex->mi.heartbeat_period > slave_net_timeout)
            {
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX,
                                  ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MAX));
            }
            if (Lex->mi.heartbeat_period < 0.001)
            {
              if (Lex->mi.heartbeat_period != 0.0)
              {
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                    ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN,
                                    ER(ER_SLAVE_HEARTBEAT_VALUE_OUT_OF_RANGE_MIN));
                Lex->mi.heartbeat_period= 0.0;
              }
              Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_DISABLE;
            }
            Lex->mi.heartbeat_opt=  LEX_MASTER_INFO::LEX_MI_ENABLE;
          }
#line 19875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 99:
#line 2245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.repl_ignore_server_ids_opt= LEX_MASTER_INFO::LEX_MI_ENABLE;
           }
#line 19883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 104:
#line 2260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            insert_dynamic(&Lex->mi.repl_ignore_server_ids, (uchar*) &((yyvsp[0].ulong_num)));
          }
#line 19891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 105:
#line 2266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.log_file_name = (yyvsp[0].lex_str).str;
          }
#line 19899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 106:
#line 2270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.pos = (yyvsp[0].ulonglong_number);
            /* 
               If the user specified a value < BIN_LOG_HEADER_SIZE, adjust it
               instead of causing subsequent errors. 
               We need to do it in this file, because only there we know that 
               MASTER_LOG_POS has been explicitely specified. On the contrary
               in change_master() (sql_repl.cc) we cannot distinguish between 0
               (MASTER_LOG_POS explicitely specified as 0) and 0 (unspecified),
               whereas we want to distinguish (specified 0 means "read the binlog
               from 0" (4 in fact), unspecified means "don't change the position
               (keep the preceding value)").
            */
            Lex->mi.pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.pos);
          }
#line 19919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 107:
#line 2286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_name = (yyvsp[0].lex_str).str;
          }
#line 19927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 108:
#line 2290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.relay_log_pos = (yyvsp[0].ulong_num);
            /* Adjust if < BIN_LOG_HEADER_SIZE (same comment as Lex->mi.pos) */
            Lex->mi.relay_log_pos= MY_MAX(BIN_LOG_HEADER_SIZE, Lex->mi.relay_log_pos);
          }
#line 19937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 109:
#line 2296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_CURRENT_POS;
          }
#line 19950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 110:
#line 2306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_SLAVE_POS;
          }
#line 19963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 111:
#line 2316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->mi.use_gtid_opt != LEX_MASTER_INFO::LEX_GTID_UNCHANGED)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "MASTER_use_gtid");
              MYSQL_YYABORT;
            }
            Lex->mi.use_gtid_opt= LEX_MASTER_INFO::LEX_GTID_NO;
          }
#line 19976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 112:
#line 2328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
          }
#line 19985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 114:
#line 2337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->mi.connection_name= (yyvsp[0].lex_str);
#ifdef HAVE_REPLICATION
           if (check_master_connection_name(&(yyvsp[0].lex_str)))
           {
              my_error(ER_WRONG_ARGUMENTS, MYF(0), "MASTER_CONNECTION_NAME");
              MYSQL_YYABORT;
           }
#endif
         }
#line 20000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 115:
#line 2352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_TABLE;
            if ((yyvsp[-4].num) && (yyvsp[-1].num))
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE", "IF NOT EXISTS");
               MYSQL_YYABORT;
            }
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_WRITE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->alter_info.reset();
            lex->col_list.empty();
            lex->change=NullS;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
            /*
              For CREATE TABLE we should not open the table even if it exists.
              If the table exists, we should either not create it or replace it
            */
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
            lex->create_info.options= ((yyvsp[-4].num) | (yyvsp[-3].num) | (yyvsp[-1].num));
            lex->create_info.default_table_charset= NULL;
            lex->name.str= 0;
            lex->name.length= 0;
            lex->create_last_non_select_table= lex->last_table();
          }
#line 20032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 116:
#line 2380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->current_select= &lex->select_lex; 
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.db_type= ha_default_handlerton(thd);
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_WARN_USING_OTHER_HANDLER,
                                  ER(ER_WARN_USING_OTHER_HANDLER),
                                  hton_name(lex->create_info.db_type)->str,
                                  (yyvsp[-2].table)->table.str);
            }
            create_table_set_open_action_and_adjust_tables(lex);
          }
#line 20052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 117:
#line 2396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
          }
#line 20061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 118:
#line 2401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index(Lex, (yyvsp[-11].key_type), (yyvsp[-8].lex_str)))
              MYSQL_YYABORT;
          }
#line 20070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 119:
#line 2405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 120:
#line 2408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
          }
#line 20085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 121:
#line 2413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index(Lex, (yyvsp[-11].key_type), (yyvsp[-8].lex_str)))
              MYSQL_YYABORT;
          }
#line 20094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 122:
#line 2417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 123:
#line 2420 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index_prepare(Lex, (yyvsp[0].table)))
              MYSQL_YYABORT;
          }
#line 20109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 124:
#line 2425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index(Lex, (yyvsp[-11].key_type), (yyvsp[-8].lex_str)))
              MYSQL_YYABORT;
          }
#line 20118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 125:
#line 2429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 126:
#line 2431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 20133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 127:
#line 2436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CREATE_DB;
            lex->name= (yyvsp[-2].lex_str);
            lex->create_info.options=(yyvsp[-3].num);
          }
#line 20144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 128:
#line 2443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_view_mode= ((yyvsp[0].num) == 0 ? VIEW_CREATE_NEW :
                                    VIEW_CREATE_OR_REPLACE);
            Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED;
            Lex->create_view_suid= TRUE;
          }
#line 20155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 129:
#line 2450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].num) && Lex->sql_command != SQLCOM_CREATE_VIEW)
            {
               my_error(ER_WRONG_USAGE, MYF(0), "OR REPLACE",
                       "TRIGGERS / SP / EVENT");
               MYSQL_YYABORT;
            }
          }
#line 20168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 130:
#line 2459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CREATE_USER;
          }
#line 20176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 131:
#line 2463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_CREATE_ROLE;
          }
#line 20184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 132:
#line 2467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_LOGFILE_GROUP;
          }
#line 20192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 133:
#line 2471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_tablespace_info->ts_cmd_type= CREATE_TABLESPACE;
          }
#line 20200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 134:
#line 2475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_CREATE_SERVER;
          }
#line 20208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 135:
#line 2486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.server_name= (yyvsp[-8].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[-8].lex_str).length;
            Lex->server_options.scheme= (yyvsp[-4].lex_str).str;
          }
#line 20218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 138:
#line 2500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.username= (yyvsp[0].lex_str).str;
          }
#line 20226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 139:
#line 2504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.host= (yyvsp[0].lex_str).str;
          }
#line 20234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 140:
#line 2508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.db= (yyvsp[0].lex_str).str;
          }
#line 20242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 141:
#line 2512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.owner= (yyvsp[0].lex_str).str;
          }
#line 20250 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 142:
#line 2516 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.password= (yyvsp[0].lex_str).str;
          }
#line 20258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 143:
#line 2520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.socket= (yyvsp[0].lex_str).str;
          }
#line 20266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 144:
#line 2524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->server_options.port= (yyvsp[0].ulong_num);
          }
#line 20274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 145:
#line 2531 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->stmt_definition_begin= (yyvsp[-3].simple_string);
            lex->create_info.options= (yyvsp[-1].num);
            if (!(lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            lex->event_parse_data->identifier= (yyvsp[0].spname);
            lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;

            lex->sql_command= SQLCOM_CREATE_EVENT;
            /* We need that for disallowing subqueries */
          }
#line 20293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 146:
#line 2550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_CREATE_EVENT;
          }
#line 20305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 147:
#line 2561 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_expression= (yyvsp[-1].item);
            Lex->event_parse_data->interval= (yyvsp[0].interval);
          }
#line 20314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 149:
#line 2568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_execute_at= (yyvsp[0].item);
          }
#line 20322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 150:
#line 2574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 151:
#line 2576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::ENABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 20338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 152:
#line 2582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::SLAVESIDE_DISABLED;
            Lex->event_parse_data->status_changed= true; 
            (yyval.num)= 1;
          }
#line 20348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 153:
#line 2588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->status= Event_parse_data::DISABLED;
            Lex->event_parse_data->status_changed= true;
            (yyval.num)= 1;
          }
#line 20358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 154:
#line 2597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local(0);
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->event_parse_data->item_starts= item;
          }
#line 20369 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 155:
#line 2604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_starts= (yyvsp[0].item);
          }
#line 20377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 157:
#line 2612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->item_ends= (yyvsp[0].item);
          }
#line 20385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 158:
#line 2618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 160:
#line 2624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_PRESERVE;
            (yyval.num)= 1;
          }
#line 20401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 161:
#line 2630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->event_parse_data->on_completion=
                                  Event_parse_data::ON_COMPLETION_DROP;
            (yyval.num)= 1;
          }
#line 20411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 162:
#line 2638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 20417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 163:
#line 2640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->comment= Lex->event_parse_data->comment= (yyvsp[0].lex_str);
            (yyval.num)= 1;
          }
#line 20426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 164:
#line 2647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            /*
              This stops the following :
              - CREATE EVENT ... DO CREATE EVENT ...;
              - ALTER  EVENT ... DO CREATE EVENT ...;
              - CREATE EVENT ... DO ALTER EVENT DO ....;
              - CREATE PROCEDURE ... BEGIN CREATE EVENT ... END|
              This allows:
              - CREATE EVENT ... DO DROP EVENT yyy;
              - CREATE EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO ALTER EVENT yyy;
                (the nested ALTER EVENT can have anything but DO clause)
              - ALTER  EVENT ... DO DROP EVENT yyy;
              - CREATE PROCEDURE ... BEGIN ALTER EVENT ... END|
                (the nested ALTER EVENT can have anything but DO clause)
              - CREATE PROCEDURE ... BEGIN DROP EVENT ... END|
            */
            if (lex->sphead)
            {
              my_error(ER_EVENT_RECURSION_FORBIDDEN, MYF(0));
              MYSQL_YYABORT;
            }
              
            if (!(lex->sphead= new sp_head()))
              MYSQL_YYABORT;

            lex->sphead->reset_thd_mem_root(thd);
            lex->sphead->init(lex);
            lex->sphead->init_sp_name(thd, lex->event_parse_data->identifier);

            lex->sphead->m_type= TYPE_ENUM_PROCEDURE;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;

            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 20472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 165:
#line 2689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /* return back to the original memory root ASAP */
            lex->sphead->set_stmt_end(thd);
            lex->sphead->restore_thd_mem_root(thd);

            lex->sp_chistics.suid= SP_IS_SUID;  //always the definer!

            lex->event_parse_data->body_changed= TRUE;
          }
#line 20488 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 179:
#line 2720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           LEX *lex=Lex;
           lex->users_list.empty();
           lex->columns.empty();
           lex->grant= lex->grant_tot_col= 0;
           lex->all_privileges= 0;
           lex->select_lex.db= 0;
           lex->ssl_type= SSL_TYPE_NOT_SPECIFIED;
           lex->ssl_cipher= lex->x509_subject= lex->x509_issuer= 0;
           bzero((char *)&(lex->mqh),sizeof(lex->mqh));
         }
#line 20504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 180:
#line 2735 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-2].lex_str).str || check_db_name(&(yyvsp[-2].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[0].lex_str)))
            {
              MYSQL_YYABORT;
            }
            (yyval.spname)= new sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 20524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 181:
#line 2751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db;
            if (check_routine_name(&(yyvsp[0].lex_str)))
            {
              MYSQL_YYABORT;
            }
            if (lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            (yyval.spname)= new sp_name(db, (yyvsp[0].lex_str), false);
            if ((yyval.spname) == NULL)
              MYSQL_YYABORT;
            (yyval.spname)->init_qname(thd);
          }
#line 20543 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 182:
#line 2768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 183:
#line 2769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 184:
#line 2773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 185:
#line 2774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 186:
#line 2780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.comment= (yyvsp[0].lex_str); }
#line 20573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 187:
#line 2782 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Just parse it, we only have one language for now. */ }
#line 20579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 188:
#line 2784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_NO_SQL; }
#line 20585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 189:
#line 2786 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_CONTAINS_SQL; }
#line 20591 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 190:
#line 2788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_READS_SQL_DATA; }
#line 20597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 191:
#line 2790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.daccess= SP_MODIFIES_SQL_DATA; }
#line 20603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 192:
#line 2792 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20609 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 193:
#line 2797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 20615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 194:
#line 2798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.detistic= TRUE; }
#line 20621 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 195:
#line 2799 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sp_chistics.detistic= FALSE; }
#line 20627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 196:
#line 2804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_SUID;
          }
#line 20635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 197:
#line 2808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sp_chistics.suid= SP_IS_NOT_SUID;
          }
#line 20643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 198:
#line 2815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;

            lex->sql_command= SQLCOM_CALL;
            lex->spname= (yyvsp[0].spname);
            lex->value_list.empty();
            sp_add_used_routine(lex, thd, (yyvsp[0].spname), TYPE_ENUM_PROCEDURE);
          }
#line 20656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 199:
#line 2823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 204:
#line 2839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           Lex->value_list.push_back((yyvsp[0].item));
          }
#line 20670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 205:
#line 2843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->value_list.push_back((yyvsp[0].item));
          }
#line 20678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 210:
#line 2861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->length= 0;
            lex->dec= 0;
            lex->type= 0;

            lex->default_value= 0;
            lex->on_update_value= 0;

            lex->comment= null_lex_str;
            lex->charset= NULL;

            lex->interval_list.empty();
            lex->uint_geom_type= 0;
            lex->vcol_info= 0;
          }
#line 20700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 211:
#line 2882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[-2].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[-2].lex_str).str);
              MYSQL_YYABORT;
            }

            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[-2].lex_str),
                                                  (enum enum_field_types) (yyvsp[0].num),
                                                  sp_variable::MODE_IN);

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[0].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
#line 20729 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 216:
#line 2921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[-1].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_PARAM, MYF(0), (yyvsp[-1].lex_str).str);
              MYSQL_YYABORT;
            }
            sp_variable *spvar= spc->add_variable(thd,
                                                  (yyvsp[-1].lex_str),
                                                  (enum enum_field_types) (yyvsp[0].num),
                                                  (sp_variable::enum_mode) (yyvsp[-3].num));

            if (lex->sphead->fill_field_definition(thd, lex,
                                                   (enum enum_field_types) (yyvsp[0].num),
                                                   &spvar->field_def))
            {
              MYSQL_YYABORT;
            }
            spvar->field_def.field_name= spvar->name.str;
            spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
          }
#line 20757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 217:
#line 2947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_variable::MODE_IN; }
#line 20763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 218:
#line 2948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_variable::MODE_IN; }
#line 20769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 219:
#line 2949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_variable::MODE_OUT; }
#line 20775 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 220:
#line 2950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_variable::MODE_INOUT; }
#line 20781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 221:
#line 2954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 223:
#line 2959 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 20793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 225:
#line 2965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 20801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 226:
#line 2969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* We check for declarations out of (standard) order this way
              because letting the grammar rules reflect it caused tricky
               shift/reduce conflicts with the wrong result. (And we get
               better error handling this way.) */
            if (((yyvsp[-1].spblock).vars || (yyvsp[-1].spblock).conds) && ((yyvsp[-2].spblock).curs || (yyvsp[-2].spblock).hndlrs))
            { /* Variable or condition following cursor or handler */
              my_message(ER_SP_VARCOND_AFTER_CURSHNDLR,
                         ER(ER_SP_VARCOND_AFTER_CURSHNDLR), MYF(0));
              MYSQL_YYABORT;
            }
            if ((yyvsp[-1].spblock).curs && (yyvsp[-2].spblock).hndlrs)
            { /* Cursor following handler */
              my_message(ER_SP_CURSOR_AFTER_HANDLER,
                         ER(ER_SP_CURSOR_AFTER_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spblock).vars= (yyvsp[-2].spblock).vars + (yyvsp[-1].spblock).vars;
            (yyval.spblock).conds= (yyvsp[-2].spblock).conds + (yyvsp[-1].spblock).conds;
            (yyval.spblock).hndlrs= (yyvsp[-2].spblock).hndlrs + (yyvsp[-1].spblock).hndlrs;
            (yyval.spblock).curs= (yyvsp[-2].spblock).curs + (yyvsp[-1].spblock).curs;
          }
#line 20828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 227:
#line 2995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->reset_lex(thd);
            lex->spcont->declare_var_boundary((yyvsp[0].num));
          }
#line 20839 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 228:
#line 3003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *pctx= lex->spcont;
            uint num_vars= pctx->context_var_count();
            enum enum_field_types var_type= (enum enum_field_types) (yyvsp[-1].num);
            Item *dflt_value_item= (yyvsp[0].item);
            
            if (!dflt_value_item)
            {
              dflt_value_item= new (thd->mem_root) Item_null();
              if (dflt_value_item == NULL)
                MYSQL_YYABORT;
              /* QQ Set to the var_type with null_value? */
            }
            
            for (uint i = num_vars-(yyvsp[-3].num) ; i < num_vars ; i++)
            {
              uint var_idx= pctx->var_context2runtime(i);
              sp_variable *spvar= pctx->find_variable(var_idx);
            
              if (!spvar)
                MYSQL_YYABORT;
            
              spvar->type= var_type;
              spvar->default_value= dflt_value_item;
            
              if (lex->sphead->fill_field_definition(thd, lex, var_type,
                                                     &spvar->field_def))
              {
                MYSQL_YYABORT;
              }
            
              spvar->field_def.field_name= spvar->name.str;
              spvar->field_def.pack_flag |= FIELDFLAG_MAYBE_NULL;
            
              /* The last instruction is responsible for freeing LEX. */

              sp_instr_set *is= new sp_instr_set(lex->sphead->instructions(),
                                                 pctx,
                                                 var_idx,
                                                 dflt_value_item,
                                                 var_type,
                                                 lex,
                                                 (i == num_vars - 1));
              if (is == NULL ||
                  lex->sphead->add_instr(is))
                MYSQL_YYABORT;
            }

            pctx->declare_var_boundary(0);
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyvsp[-3].num);
            (yyval.spblock).conds= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
          }
#line 20899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 229:
#line 3059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_condition((yyvsp[-3].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_COND, MYF(0), (yyvsp[-3].lex_str).str);
              MYSQL_YYABORT;
            }
            if(spc->add_condition(thd, (yyvsp[-3].lex_str), (yyvsp[0].spcondvalue)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).hndlrs= (yyval.spblock).curs= 0;
            (yyval.spblock).conds= 1;
          }
#line 20918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 230:
#line 3074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp_handler *h= lex->spcont->add_handler(thd,
                                                    (sp_handler::enum_type) (yyvsp[-2].num));

            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::HANDLER_SCOPE);

            sp_pcontext *ctx= lex->spcont;
            sp_instr_hpush_jump *i=
              new sp_instr_hpush_jump(sp->instructions(), ctx, h);

            if (i == NULL || sp->add_instr(i))
              MYSQL_YYABORT;

            /* For continue handlers, mark end of handler scope. */
            if ((yyvsp[-2].num) == sp_handler::CONTINUE &&
                sp->push_backpatch(i, ctx->last_label()))
              MYSQL_YYABORT;

            if (sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)))
              MYSQL_YYABORT;
          }
#line 20948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 231:
#line 3100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *hlab= lex->spcont->pop_label(); /* After this hdlr */
            sp_instr_hreturn *i;

            if ((yyvsp[-5].num) == sp_handler::CONTINUE)
            {
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            else
            {  /* EXIT or UNDO handler, just jump to the end of the block */
              i= new sp_instr_hreturn(sp->instructions(), ctx);
              if (i == NULL ||
                  sp->add_instr(i) ||
                  sp->push_backpatch(i, lex->spcont->last_label())) /* Block end */
                MYSQL_YYABORT;
            }
            lex->sphead->backpatch(hlab);

            lex->spcont= ctx->pop_context();

            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).curs= 0;
            (yyval.spblock).hndlrs= 1;
          }
#line 20982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 232:
#line 3130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint offp;
            sp_instr_cpush *i;

            if (ctx->find_cursor((yyvsp[-3].lex_str), &offp, TRUE))
            {
              my_error(ER_SP_DUP_CURS, MYF(0), (yyvsp[-3].lex_str).str);
              delete (yyvsp[0].lex);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cpush(sp->instructions(), ctx, (yyvsp[0].lex),
                                  ctx->current_cursor_count());
            if (i == NULL ||
                sp->add_instr(i) ||
                ctx->add_cursor((yyvsp[-3].lex_str)))
              MYSQL_YYABORT;
            (yyval.spblock).vars= (yyval.spblock).conds= (yyval.spblock).hndlrs= 0;
            (yyval.spblock).curs= 1;
          }
#line 21009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 233:
#line 3155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd);
          }
#line 21017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 234:
#line 3159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            DBUG_ASSERT(lex->sql_command == SQLCOM_SELECT);

            if (lex->result)
            {
              my_message(ER_SP_BAD_CURSOR_SELECT, ER(ER_SP_BAD_CURSOR_SELECT),
                         MYF(0));
              MYSQL_YYABORT;
            }
            lex->sp_lex_in_use= TRUE;
            (yyval.lex)= lex;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 235:
#line 3178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::EXIT; }
#line 21044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 236:
#line 3179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= sp_handler::CONTINUE; }
#line 21050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 237:
#line 3185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 21056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 238:
#line 3187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)+= 1; }
#line 21062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 239:
#line 3192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont->parent_context();

            if (ctx->check_duplicate_handler((yyvsp[0].spcondvalue)))
            {
              my_message(ER_SP_DUP_HANDLER, ER(ER_SP_DUP_HANDLER), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_hpush_jump *i=
                (sp_instr_hpush_jump *)sp->last_instruction();

              i->add_condition((yyvsp[0].spcondvalue));
            }
          }
#line 21085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 240:
#line 3214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* mysql errno */
            if ((yyvsp[0].ulong_num) == 0)
            {
              my_error(ER_WRONG_VALUE, MYF(0), "CONDITION", "0");
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].ulong_num));
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 242:
#line 3229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* SQLSTATE */

            /*
              An error is triggered:
                - if the specified string is not a valid SQLSTATE,
                - or if it represents the completion condition -- it is not
                  allowed to SIGNAL, or declare a handler for the completion
                  condition.
            */
            if (!is_sqlstate_valid(&(yyvsp[0].lex_str)) || is_sqlstate_completion((yyvsp[0].lex_str).str))
            {
              my_error(ER_SP_BAD_SQLSTATE, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value((yyvsp[0].lex_str).str);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21123 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 243:
#line 3250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 244:
#line 3251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 245:
#line 3256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= (yyvsp[0].spcondvalue);
          }
#line 21143 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 246:
#line 3260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= Lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if ((yyval.spcondvalue) == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 21156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 247:
#line 3269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::WARNING);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 248:
#line 3275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::NOT_FOUND);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 249:
#line 3281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.spcondvalue)= new (thd->mem_root) sp_condition_value(sp_condition_value::EXCEPTION);
            if ((yyval.spcondvalue) == NULL)
              MYSQL_YYABORT;
          }
#line 21186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 250:
#line 3290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_SIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_signal((yyvsp[-1].spcondvalue), state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 251:
#line 3304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_condition_value *cond;
            if (lex->spcont == NULL)
            {
              /* SIGNAL foo cannot be used outside of stored programs */
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            cond= lex->spcont->find_condition((yyvsp[0].lex_str), false);
            if (cond == NULL)
            {
              my_error(ER_SP_COND_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            if (cond->type != sp_condition_value::SQLSTATE)
            {
              my_error(ER_SIGNAL_BAD_CONDITION_TYPE, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.spcondvalue)= cond;
          }
#line 21228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 252:
#line 3327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 21234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 253:
#line 3332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= NULL; }
#line 21240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 254:
#line 3334 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.spcondvalue)= (yyvsp[0].spcondvalue); }
#line 21246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 255:
#line 3339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->m_parser_state->m_yacc.m_set_signal_info.clear();
          }
#line 21254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 257:
#line 3347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            info->clear();
            info->m_item[index]= (yyvsp[0].item);
          }
#line 21266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 258:
#line 3356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Set_signal_information *info;
            info= &thd->m_parser_state->m_yacc.m_set_signal_info;
            int index= (int) (yyvsp[-2].diag_condition_item_name);
            if (info->m_item[index] != NULL)
            {
              my_error(ER_DUP_SIGNAL_SET, MYF(0),
                       Diag_condition_item_names[index].str);
              MYSQL_YYABORT;
            }
            info->m_item[index]= (yyvsp[0].item);
          }
#line 21283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 259:
#line 3375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 260:
#line 3377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[0].item)->type() == Item::FUNC_ITEM)
            {
              Item_func *item= (Item_func*) (yyvsp[0].item);
              if (item->functype() == Item_func::SUSERVAR_FUNC)
              {
                /*
                  Don't allow the following syntax:
                    SIGNAL/RESIGNAL ...
                    SET <signal condition item name> = @foo := expr
                */
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            (yyval.item)= (yyvsp[0].item);
          }
#line 21311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 261:
#line 3395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 262:
#line 3401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CLASS_ORIGIN; }
#line 21323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 263:
#line 3403 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SUBCLASS_ORIGIN; }
#line 21329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 264:
#line 3405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_CATALOG; }
#line 21335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 265:
#line 3407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_SCHEMA; }
#line 21341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 266:
#line 3409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CONSTRAINT_NAME; }
#line 21347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 267:
#line 3411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CATALOG_NAME; }
#line 21353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 268:
#line 3413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_SCHEMA_NAME; }
#line 21359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 269:
#line 3415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_TABLE_NAME; }
#line 21365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 270:
#line 3417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_COLUMN_NAME; }
#line 21371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 271:
#line 3419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_CURSOR_NAME; }
#line 21377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 272:
#line 3421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MESSAGE_TEXT; }
#line 21383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 273:
#line 3423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_condition_item_name)= DIAG_MYSQL_ERRNO; }
#line 21389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 274:
#line 3428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Yacc_state *state= & thd->m_parser_state->m_yacc;

            lex->sql_command= SQLCOM_RESIGNAL;
            lex->m_sql_cmd=
              new (thd->mem_root) Sql_cmd_resignal((yyvsp[-1].spcondvalue),
                                                   state->m_set_signal_info);
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 275:
#line 3443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Diagnostics_information *info= (yyvsp[0].diag_info);

            info->set_which_da((yyvsp[-2].diag_area));

            Lex->sql_command= SQLCOM_GET_DIAGNOSTICS;
            Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_get_diagnostics(info);

            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 21421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 276:
#line 3458 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 21427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 277:
#line 3460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.diag_area)= Diagnostics_information::CURRENT_AREA; }
#line 21433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 278:
#line 3465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Statement_information((yyvsp[0].stmt_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 21443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 279:
#line 3471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.diag_info)= new (thd->mem_root) Condition_information((yyvsp[-1].item), (yyvsp[0].cond_info_list));
            if ((yyval.diag_info) == NULL)
              MYSQL_YYABORT;
          }
#line 21453 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 280:
#line 3480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_list)= new (thd->mem_root) List<Statement_information_item>;
            if ((yyval.stmt_info_list) == NULL || (yyval.stmt_info_list)->push_back((yyvsp[0].stmt_info_item)))
              MYSQL_YYABORT;
          }
#line 21463 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 281:
#line 3486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].stmt_info_list)->push_back((yyvsp[0].stmt_info_item)))
              MYSQL_YYABORT;
            (yyval.stmt_info_list)= (yyvsp[-2].stmt_info_list);
          }
#line 21473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 282:
#line 3495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.stmt_info_item)= new (thd->mem_root) Statement_information_item((yyvsp[0].stmt_info_item_name), (yyvsp[-2].item));
            if ((yyval.stmt_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 21483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 283:
#line 3503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex_input_stream *lip= &thd->m_parser_state->m_lip;
            (yyval.item)= create_item_for_sp_var(thd, (yyvsp[0].lex_str), NULL,
                                       lip->get_tok_start(), lip->get_ptr());

            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 21496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 284:
#line 3512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 21506 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 285:
#line 3521 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::NUMBER; }
#line 21512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 286:
#line 3523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.stmt_info_item_name)= Statement_information_item::ROW_COUNT; }
#line 21518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 287:
#line 3532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 21524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 288:
#line 3537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_list)= new (thd->mem_root) List<Condition_information_item>;
            if ((yyval.cond_info_list) == NULL || (yyval.cond_info_list)->push_back((yyvsp[0].cond_info_item)))
              MYSQL_YYABORT;
          }
#line 21534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 289:
#line 3543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-2].cond_info_list)->push_back((yyvsp[0].cond_info_item)))
              MYSQL_YYABORT;
            (yyval.cond_info_list)= (yyvsp[-2].cond_info_list);
          }
#line 21544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 290:
#line 3552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cond_info_item)= new (thd->mem_root) Condition_information_item((yyvsp[0].cond_info_item_name), (yyvsp[-2].item));
            if ((yyval.cond_info_item) == NULL)
              MYSQL_YYABORT;
          }
#line 21554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 291:
#line 3560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CLASS_ORIGIN; }
#line 21560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 292:
#line 3562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SUBCLASS_ORIGIN; }
#line 21566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 293:
#line 3564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_CATALOG; }
#line 21572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 294:
#line 3566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_SCHEMA; }
#line 21578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 295:
#line 3568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CONSTRAINT_NAME; }
#line 21584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 296:
#line 3570 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CATALOG_NAME; }
#line 21590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 297:
#line 3572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::SCHEMA_NAME; }
#line 21596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 298:
#line 3574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::TABLE_NAME; }
#line 21602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 299:
#line 3576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::COLUMN_NAME; }
#line 21608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 300:
#line 3578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::CURSOR_NAME; }
#line 21614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 301:
#line 3580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MESSAGE_TEXT; }
#line 21620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 302:
#line 3582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::MYSQL_ERRNO; }
#line 21626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 303:
#line 3584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cond_info_item_name)= Condition_information_item::RETURNED_SQLSTATE; }
#line 21632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 304:
#line 3589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[0].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= 1;
          }
#line 21654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 305:
#line 3607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* NOTE: field definition is filled in sp_decl section. */

            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;

            if (spc->find_variable((yyvsp[0].lex_str), TRUE))
            {
              my_error(ER_SP_DUP_VAR, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            spc->add_variable(thd,
                              (yyvsp[0].lex_str),
                              MYSQL_TYPE_DECIMAL,
                              sp_variable::MODE_IN);
            (yyval.num)= (yyvsp[-2].num) + 1;
          }
#line 21676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 306:
#line 3627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = NULL; }
#line 21682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 307:
#line 3628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 21688 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 321:
#line 3649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->new_cont_backpatch(NULL); }
#line 21694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 322:
#line 3651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->do_cont_backpatch(); }
#line 21700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 323:
#line 3655 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->reset_lex(thd);
            lex->sphead->m_tmp_query= lip->get_tok_start();
          }
#line 21712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 324:
#line 3663 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp= lex->sphead;

            sp->m_flags|= sp_get_flags_for_command(lex);
            if (lex->sql_command == SQLCOM_CHANGE_DB)
            { /* "USE db" doesn't work in a procedure */
              my_error(ER_SP_BADSTATEMENT, MYF(0), "USE");
              MYSQL_YYABORT;
            }
            /*
              Don't add an instruction for SET statements, since all
              instructions for them were already added during processing
              of "set" rule.
            */
            DBUG_ASSERT(lex->sql_command != SQLCOM_SET_OPTION ||
                        lex->var_list.is_empty());
            if (lex->sql_command != SQLCOM_SET_OPTION)
            {
              sp_instr_stmt *i=new sp_instr_stmt(sp->instructions(),
                                                 lex->spcont, lex);
              if (i == NULL)
                MYSQL_YYABORT;

              /*
                Extract the query statement from the tokenizer.  The
                end is either lex->ptr, if there was no lookahead,
                lex->tok_end otherwise.
              */
              if (yychar == YYEMPTY)
                i->m_query.length= lip->get_ptr() - sp->m_tmp_query;
              else
                i->m_query.length= lip->get_tok_start() - sp->m_tmp_query;;
              if (!(i->m_query.str= strmake_root(thd->mem_root,
                                                 sp->m_tmp_query,
                                                 i->m_query.length)) ||
                    sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21760 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 325:
#line 3710 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 21766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 326:
#line 3712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            if (sp->m_type != TYPE_ENUM_FUNCTION)
            {
              my_message(ER_SP_BADRETURN, ER(ER_SP_BADRETURN), MYF(0));
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_freturn *i;

              i= new sp_instr_freturn(sp->instructions(), lex->spcont, (yyvsp[0].item),
                                      sp->m_return_field_def.sql_type, lex);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
              sp->m_flags|= sp_head::HAS_RETURN;
            }
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 21794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 327:
#line 3738 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Unlabeled controls get a secret label. */
            LEX *lex= Lex;

            lex->spcont->push_label(thd, empty_lex_str,
                                    lex->sphead->instructions());
          }
#line 21805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 328:
#line 3745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
#line 21815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 329:
#line 3754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp = lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "LEAVE", (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;
              /*
                When jumping to a BEGIN-END block end, the target jump
                points to the block hpop/cpop cleanup instructions,
                so we should exclude the block context here.
                When jumping to something else (i.e., SP_LAB_ITER),
                there are no hpop/cpop at the jump destination,
                so we should include the block context here for cleanup.
              */
              bool exclusive= (lab->type == sp_label::BEGIN);

              n= ctx->diff_handlers(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(hpop);
              }
              n= ctx->diff_cursors(lab->ctx, exclusive);
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL)
                  MYSQL_YYABORT;
                sp->add_instr(cpop);
              }
              i= new sp_instr_jump(ip, ctx);
              if (i == NULL)
                MYSQL_YYABORT;
              sp->push_backpatch(i, lab);  /* Jumping forward */
              sp->add_instr(i);
            }
          }
#line 21869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 330:
#line 3807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[0].lex_str));

            if (! lab || lab->type != sp_label::ITERATION)
            {
              my_error(ER_SP_LILABEL_MISMATCH, MYF(0), "ITERATE", (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              sp_instr_jump *i;
              uint ip= sp->instructions();
              uint n;

              n= ctx->diff_handlers(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_hpop *hpop= new sp_instr_hpop(ip++, ctx, n);
                if (hpop == NULL ||
                    sp->add_instr(hpop))
                  MYSQL_YYABORT;
              }
              n= ctx->diff_cursors(lab->ctx, FALSE);  /* Inclusive the dest. */
              if (n)
              {
                sp_instr_cpop *cpop= new sp_instr_cpop(ip++, ctx, n);
                if (cpop == NULL ||
                    sp->add_instr(cpop))
                  MYSQL_YYABORT;
              }
              i= new sp_instr_jump(ip, ctx, lab->ip); /* Jump back */
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
          }
#line 21913 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 331:
#line 3850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_copen *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_copen(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 21934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 332:
#line 3870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cfetch *i;

            if (! lex->spcont->find_cursor((yyvsp[-1].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[-1].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cfetch(sp->instructions(), lex->spcont, offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 21955 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 333:
#line 3887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 21961 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 334:
#line 3892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint offset;
            sp_instr_cclose *i;

            if (! lex->spcont->find_cursor((yyvsp[0].lex_str), &offset, false))
            {
              my_error(ER_SP_CURSOR_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            i= new sp_instr_cclose(sp->instructions(), lex->spcont,  offset);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 21982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 338:
#line 3918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
#line 22006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 339:
#line 3938 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *spc= lex->spcont;
            sp_variable *spv;

            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              /* An SP local variable */
              sp_instr_cfetch *i= (sp_instr_cfetch *)sp->last_instruction();

              i->add_to_varlist(spv);
            }
          }
#line 22030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 340:
#line 3960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 341:
#line 3962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, ctx,
                                                               (yyvsp[-1].item), lex);
            if (i == NULL ||
                sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0)) ||
                sp->add_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 342:
#line 3978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_head *sp= Lex->sphead;
            sp_pcontext *ctx= Lex->spcont;
            uint ip= sp->instructions();
            sp_instr_jump *i = new sp_instr_jump(ip, ctx);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            sp->backpatch(ctx->pop_label());
            sp->push_backpatch(i, ctx->push_label(thd, empty_lex_str, 0));
          }
#line 22072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 343:
#line 3990 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sphead->backpatch(lex->spcont->pop_label());
          }
#line 22082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 349:
#line 4010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
            lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 350:
#line 4016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_expr(lex, (yyvsp[0].item)))
              MYSQL_YYABORT;

            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 351:
#line 4029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, true);
          }
#line 22115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 352:
#line 4037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            case_stmt_action_case(lex);
          }
#line 22124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 353:
#line 4045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            case_stmt_action_end_case(lex, false);
          }
#line 22133 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 358:
#line 4063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 359:
#line 4067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Simple case: <caseval> = <whenval> */

            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), true))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 360:
#line 4079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 22166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 361:
#line 4088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sphead->reset_lex(thd); /* For expr $3 */
          }
#line 22174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 362:
#line 4092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_when(lex, (yyvsp[0].item), false))
              MYSQL_YYABORT;
            /* For expr $3 */
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22187 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 363:
#line 4102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (case_stmt_action_then(lex))
              MYSQL_YYABORT;
          }
#line 22197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 364:
#line 4111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_error *i= new sp_instr_error(ip, lex->spcont,
                                                  ER_SP_CASE_NOT_FOUND);
            if (i == NULL ||
                sp->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 366:
#line 4126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[-1].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[-1].lex_str).str);
              MYSQL_YYABORT;
            }
            else
            {
              lab= lex->spcont->push_label(thd, (yyvsp[-1].lex_str), lex->sphead->instructions());
              lab->type= sp_label::ITERATION;
            }
          }
#line 22233 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 367:
#line 4143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
                MYSQL_YYABORT;
              }
            }
            lex->sphead->backpatch(lab);
          }
#line 22252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 368:
#line 4160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 22258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 369:
#line 4161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 22264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 370:
#line 4166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *ctx= lex->spcont;
            sp_label *lab= ctx->find_label((yyvsp[-1].lex_str));

            if (lab)
            {
              my_error(ER_SP_LABEL_REDEFINE, MYF(0), (yyvsp[-1].lex_str).str);
              MYSQL_YYABORT;
            }

            lab= lex->spcont->push_label(thd, (yyvsp[-1].lex_str), lex->sphead->instructions());
            lab->type= sp_label::BEGIN;
          }
#line 22283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 371:
#line 4181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_label *lab= lex->spcont->pop_label();

            if ((yyvsp[0].lex_str).str)
            {
              if (my_strcasecmp(system_charset_info, (yyvsp[0].lex_str).str, lab->name.str) != 0)
              {
                my_error(ER_SP_LABEL_MISMATCH, MYF(0), (yyvsp[0].lex_str).str);
                MYSQL_YYABORT;
              }
            }
          }
#line 22301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 372:
#line 4197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* Unlabeled blocks get a secret label. */
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->push_label(thd, empty_lex_str, ip);
            lab->type= sp_label::BEGIN;
          }
#line 22312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 373:
#line 4204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->spcont->pop_label();
          }
#line 22321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 374:
#line 4212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* QQ This is just a dummy for grouping declarations and statements
              together. No [[NOT] ATOMIC] yet, and we need to figure out how
              make it coexist with the existing BEGIN COMMIT/ROLLBACK. */
            LEX *lex= Lex;
            lex->spcont= lex->spcont->push_context(thd,
                                                   sp_pcontext::REGULAR_SCOPE);
          }
#line 22333 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 375:
#line 4222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            sp_pcontext *ctx= lex->spcont;
            sp_instr *i;

            sp->backpatch(ctx->last_label()); /* We always have a label */
            if ((yyvsp[-2].spblock).hndlrs)
            {
              i= new sp_instr_hpop(sp->instructions(), ctx, (yyvsp[-2].spblock).hndlrs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            if ((yyvsp[-2].spblock).curs)
            {
              i= new sp_instr_cpop(sp->instructions(), ctx, (yyvsp[-2].spblock).curs);
              if (i == NULL ||
                  sp->add_instr(i))
                MYSQL_YYABORT;
            }
            lex->spcont= ctx->pop_context();
          }
#line 22361 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 376:
#line 4250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
          }
#line 22375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 377:
#line 4260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 378:
#line 4262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            uint ip= sp->instructions();
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[-1].item), lex);
            if (i == NULL ||
                /* Jumping forward */
                sp->push_backpatch(i, lex->spcont->last_label()) ||
                sp->new_cont_backpatch(i) ||
                sp->add_instr(i))
              MYSQL_YYABORT;
            if (sp->restore_lex(thd))
              MYSQL_YYABORT;
          }
#line 22401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 379:
#line 4278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump *i = new sp_instr_jump(ip, lex->spcont, lab->ip);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            lex->sphead->do_cont_backpatch();
          }
#line 22416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 380:
#line 4289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sphead->reset_lex(thd); }
#line 22422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 381:
#line 4291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint ip= lex->sphead->instructions();
            sp_label *lab= lex->spcont->last_label();  /* Jumping back */
            sp_instr_jump_if_not *i = new sp_instr_jump_if_not(ip, lex->spcont,
                                                               (yyvsp[-2].item), lab->ip,
                                                               lex);
            if (i == NULL ||
                lex->sphead->add_instr(i))
              MYSQL_YYABORT;
            if (lex->sphead->restore_lex(thd))
              MYSQL_YYABORT;
            /* We can shortcut the cont_backpatch here */
            i->m_cont_dest= ip+1;
          }
#line 22442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 382:
#line 4310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_BEFORE; }
#line 22448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 383:
#line 4312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.action_time= TRG_ACTION_AFTER; }
#line 22454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 384:
#line 4317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_INSERT; }
#line 22460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 385:
#line 4319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_UPDATE; }
#line 22466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 386:
#line 4321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->trg_chistics.event= TRG_EVENT_DELETE; }
#line 22472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 390:
#line 4355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 391:
#line 4357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
          }
#line 22487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 392:
#line 4367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_ADD_FILE; 
          }
#line 22495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 393:
#line 4373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->alter_tablespace_info->ts_alter_tablespace_type= ALTER_TABLESPACE_DROP_FILE; 
          }
#line 22503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 398:
#line 4396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 445:
#line 4490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->data_file_name= (yyvsp[0].lex_str).str;
          }
#line 22518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 446:
#line 4498 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_file_name= (yyvsp[0].lex_str).str;
          }
#line 22527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 447:
#line 4506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_file_name= (yyvsp[0].lex_str).str;
          }
#line 22536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 448:
#line 4514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->tablespace_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 22549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 449:
#line 4526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info= new st_alter_tablespace();
            if (lex->alter_tablespace_info == NULL)
              MYSQL_YYABORT;
            lex->alter_tablespace_info->logfile_group_name= (yyvsp[0].lex_str).str;
            lex->sql_command= SQLCOM_ALTER_TABLESPACE;
          }
#line 22562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 450:
#line 4538 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_ONLY;
          }
#line 22571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 451:
#line 4543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_READ_WRITE;
          }
#line 22580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 452:
#line 4548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_access_mode= TS_NOT_ACCESSIBLE;
          }
#line 22589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 453:
#line 4556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->initial_size= (yyvsp[0].ulonglong_number);
          }
#line 22598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 454:
#line 4564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->autoextend_size= (yyvsp[0].ulonglong_number);
          }
#line 22607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 455:
#line 4572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->max_size= (yyvsp[0].ulonglong_number);
          }
#line 22616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 456:
#line 4580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->extent_size= (yyvsp[0].ulonglong_number);
          }
#line 22625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 457:
#line 4588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->undo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 22634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 458:
#line 4596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->redo_buffer_size= (yyvsp[0].ulonglong_number);
          }
#line 22643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 459:
#line 4604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->nodegroup_id != UNDEF_NODEGROUP)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NODEGROUP");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->nodegroup_id= (yyvsp[0].ulong_num);
          }
#line 22657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 460:
#line 4617 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->ts_comment != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"COMMENT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->ts_comment= (yyvsp[0].lex_str).str;
          }
#line 22671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 461:
#line 4630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->alter_tablespace_info->storage_engine != NULL)
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),
                       "STORAGE ENGINE");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->storage_engine= (yyvsp[0].db_type);
          }
#line 22686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 464:
#line 4649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->wait_until_completed= TRUE;
          }
#line 22695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 465:
#line 4654 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!(lex->alter_tablespace_info->wait_until_completed))
            {
              my_error(ER_FILEGROUP_OPTION_ONLY_ONCE,MYF(0),"NO_WAIT");
              MYSQL_YYABORT;
            }
            lex->alter_tablespace_info->wait_until_completed= FALSE;
          }
#line 22709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 466:
#line 4666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= (yyvsp[0].ulonglong_number);}
#line 22715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 467:
#line 4668 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            ulonglong number;
            uint text_shift_number= 0;
            longlong prefix_number;
            char *start_ptr= (yyvsp[0].lex_str).str;
            uint str_len= (yyvsp[0].lex_str).length;
            char *end_ptr= start_ptr + str_len;
            int error;
            prefix_number= my_strtoll10(start_ptr, &end_ptr, &error);
            if ((start_ptr + str_len - 1) == end_ptr)
            {
              switch (end_ptr[0])
              {
                case 'g':
                case 'G':
                  text_shift_number+=10;
                  /* fall through */
                case 'm':
                case 'M':
                  text_shift_number+=10;
                  /* fall through */
                case 'k':
                case 'K':
                  text_shift_number+=10;
                  break;
                default:
                {
                  my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
                  MYSQL_YYABORT;
                }
              }
              if (prefix_number >> 31)
              {
                my_error(ER_SIZE_OVERFLOW_ERROR, MYF(0));
                MYSQL_YYABORT;
              }
              number= prefix_number << text_shift_number;
            }
            else
            {
              my_error(ER_WRONG_SIZE_NUMBER, MYF(0));
              MYSQL_YYABORT;
            }
            (yyval.ulonglong_number)= number;
          }
#line 22765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 468:
#line 4721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.option_list= NULL; }
#line 22771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 469:
#line 4722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 470:
#line 4723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 471:
#line 4729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 22789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 472:
#line 4729 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 473:
#line 4731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {

            Lex->create_info.options|= HA_LEX_CREATE_TABLE_LIKE;
            TABLE_LIST *src_table= Lex->select_lex.add_table_to_list(thd,
                                        (yyvsp[0].table), NULL, 0, TL_READ, MDL_SHARED_READ);
            if (! src_table)
              MYSQL_YYABORT;
            /* CREATE TABLE ... LIKE is not allowed for views. */
            src_table->required_type= FRMTYPE_TABLE;
          }
#line 22810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 474:
#line 4744 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[0].table); }
#line 22816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 475:
#line 4745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table)= (yyvsp[-1].table); }
#line 22822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 476:
#line 4749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 477:
#line 4751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(0);}
#line 22834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 478:
#line 4752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 479:
#line 4754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 22846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 480:
#line 4755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 481:
#line 4760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove all tables used in PARTITION clause from the global table
              list. Partitioning with subqueries is not allowed anyway.
            */
            TABLE_LIST *last_non_sel_table= Lex->create_last_non_select_table;
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;
          }
#line 22866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 482:
#line 4796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 484:
#line 4802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            if (lex->sql_command == SQLCOM_ALTER_TABLE)
            {
              lex->alter_info.flags|= Alter_info::ALTER_PARTITION;
            }
          }
#line 22890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 486:
#line 4820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef WITH_PARTITION_STORAGE_ENGINE
            LEX_STRING partition_name={C_STRING_WITH_LEN("partition")};
            if (!plugin_is_ready(&partition_name, MYSQL_STORAGE_ENGINE_PLUGIN))
            {
              my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0),
                      "--skip-partition");
              MYSQL_YYABORT;
            }
#else
            my_error(ER_FEATURE_DISABLED, MYF(0), "partitioning",
                    "--with-plugin-partition");
            MYSQL_YYABORT;
#endif
          }
#line 22910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 487:
#line 4839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!lex->part_info)
            {
              my_parse_error(ER(ER_PARTITION_ENTRY_ERROR));
              MYSQL_YYABORT;
            }
            /*
              We enter here when opening the frm file to translate
              partition info string into part_info data structure.
            */
          }
#line 22927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 488:
#line 4851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 490:
#line 4860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->list_of_part_fields= TRUE;
            part_info->column_list= FALSE;
            part_info->part_type= HASH_PARTITION;
          }
#line 22944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 491:
#line 4867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= HASH_PARTITION; }
#line 22950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 492:
#line 4868 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 493:
#line 4870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 22962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 494:
#line 4872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= RANGE_PARTITION; }
#line 22968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 495:
#line 4874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 22974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 496:
#line 4876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->part_type= LIST_PARTITION; }
#line 22980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 497:
#line 4880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 22986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 498:
#line 4882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->linear_hash_ind= TRUE;}
#line 22992 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 499:
#line 4887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_NONE;}
#line 22998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 500:
#line 4889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch ((yyvsp[0].ulong_num)) {
            case 1:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_51;
              break;
            case 2:
              Lex->part_info->key_algorithm= partition_info::KEY_ALGORITHM_55;
              break;
            default:
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 23016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 501:
#line 4905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 502:
#line 4906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23028 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 503:
#line 4910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 504:
#line 4911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23040 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 505:
#line 4916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_columns++;
            if (part_info->part_field_list.push_back((yyvsp[0].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->num_columns > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of partition fields");
              MYSQL_YYABORT;
            }
          }
#line 23060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 506:
#line 4935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->column_list= TRUE;
            part_info->list_of_part_fields= TRUE;
          }
#line 23070 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 507:
#line 4945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->set_part_expr((yyvsp[-3].simple_string)+1, (yyvsp[-2].item), (yyvsp[-1].simple_string), FALSE))
            { MYSQL_YYABORT; }
            part_info->num_columns= 1;
            part_info->column_list= FALSE;
          }
#line 23082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 508:
#line 4956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->part_info->set_part_expr((yyvsp[-3].simple_string)+1, (yyvsp[-2].item), (yyvsp[-1].simple_string), TRUE))
            { MYSQL_YYABORT; }
          }
#line 23091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 509:
#line 4964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23097 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 510:
#line 4966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            uint num_parts= (yyvsp[0].ulong_num);
            partition_info *part_info= Lex->part_info;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "partitions");
              MYSQL_YYABORT;
            }

            part_info->num_parts= num_parts;
            part_info->use_default_num_partitions= FALSE;
          }
#line 23114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 511:
#line 4981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 512:
#line 4983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->subpart_type= HASH_PARTITION; }
#line 23126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 513:
#line 4984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 514:
#line 4987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->subpart_type= HASH_PARTITION;
            part_info->list_of_subpart_fields= TRUE;
          }
#line 23142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 515:
#line 4992 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 516:
#line 4996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 517:
#line 4997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 518:
#line 5002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->subpart_field_list.push_back((yyvsp[0].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
            if (part_info->subpart_field_list.elements > MAX_REF_PARTS)
            {
              my_error(ER_TOO_MANY_PARTITION_FUNC_FIELDS_ERROR, MYF(0),
                       "list of subpartition fields");
              MYSQL_YYABORT;
            }
          }
#line 23179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 519:
#line 5020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            bool not_corr_func;
            not_corr_func= !lex->safe_to_cache_query;
            lex->safe_to_cache_query= 1;
            if (not_corr_func)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            (yyval.item)=(yyvsp[0].item);
          }
#line 23196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 520:
#line 5035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 521:
#line 5037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint num_parts= (yyvsp[0].ulong_num);
            LEX *lex= Lex;
            if (num_parts == 0)
            {
              my_error(ER_NO_PARTS_ERROR, MYF(0), "subpartitions");
              MYSQL_YYABORT;
            }
            lex->part_info->num_subparts= num_parts;
            lex->part_info->use_default_num_subpartitions= FALSE;
          }
#line 23218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 522:
#line 5052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == RANGE_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "RANGE");
              MYSQL_YYABORT;
            }
            else if (part_info->part_type == LIST_PARTITION)
            {
              my_error(ER_PARTITIONS_MUST_BE_DEFINED_ERROR, MYF(0),
                       "LIST");
              MYSQL_YYABORT;
            }
          }
#line 23238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 523:
#line 5068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            uint count_curr_parts= part_info->partitions.elements;
            if (part_info->num_parts != 0)
            {
              if (part_info->num_parts !=
                  count_curr_parts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_PART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (count_curr_parts > 0)
            {
              part_info->num_parts= count_curr_parts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 23261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 524:
#line 5089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 525:
#line 5090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 526:
#line 5095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= new partition_element();

            if (!p_elem || part_info->partitions.push_back(p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            p_elem->part_state= PART_NORMAL;
            part_info->curr_part_elem= p_elem;
            part_info->current_partition= p_elem;
            part_info->use_default_partitions= FALSE;
            part_info->use_default_num_partitions= FALSE;
          }
#line 23293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 527:
#line 5114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 528:
#line 5119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *p_elem= part_info->curr_part_elem;
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            p_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 23311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 529:
#line 5130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type == RANGE_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
              if (part_info->part_type == LIST_PARTITION)
              {
                my_error(ER_PARTITION_REQUIRES_VALUES_ERROR, MYF(0),
                         "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= HASH_PARTITION;
          }
#line 23337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 530:
#line 5152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != RANGE_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                         "RANGE", "LESS THAN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= RANGE_PARTITION;
          }
#line 23357 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 531:
#line 5167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 532:
#line 5169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            if (! lex->is_partition_management())
            {
              if (part_info->part_type != LIST_PARTITION)
              {
                my_error(ER_PARTITION_WRONG_VALUES_ERROR, MYF(0),
                               "LIST", "IN");
                MYSQL_YYABORT;
              }
            }
            else
              part_info->part_type= LIST_PARTITION;
          }
#line 23383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 533:
#line 5184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 534:
#line 5189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;

            if (part_info->num_columns &&
                part_info->num_columns != 1U)
            {
              part_info->print_debug("Kilroy II", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            else
              part_info->num_columns= 1U;
            if (part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
#line 23415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 535:
#line 5210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 536:
#line 5215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            part_info->print_debug("part_values_in: part_value_item", NULL);

            if (part_info->num_columns != 1U)
            {
              if (!lex->is_partition_management() ||
                  part_info->num_columns == 0 ||
                  part_info->num_columns > MAX_REF_PARTS)
              {
                part_info->print_debug("Kilroy III", NULL);
                my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
                MYSQL_YYABORT;
              }
              /*
                Reorganize the current large array into a list of small
                arrays with one entry in each array. This can happen
                in the first partition of an ALTER TABLE statement where
                we ADD or REORGANIZE partitions. Also can only happen
                for LIST partitions.
              */
              if (part_info->reorganize_into_single_field_col_val())
              {
                MYSQL_YYABORT;
              }
            }
          }
#line 23454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 537:
#line 5244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_columns < 2U)
            {
              my_parse_error(ER(ER_ROW_SINGLE_PARTITION_FIELD_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 23467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 538:
#line 5255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 539:
#line 5256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 540:
#line 5261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug("( part_value_item", NULL);
            /* Initialisation code needed for each list of value expressions */
            if (!(part_info->part_type == LIST_PARTITION &&
                  part_info->num_columns == 1U) &&
                 part_info->init_column_part())
            {
              MYSQL_YYABORT;
            }
          }
#line 23495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 541:
#line 5272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23501 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 542:
#line 5274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->print_debug(") part_value_item", NULL);
            if (part_info->num_columns == 0)
              part_info->num_columns= part_info->curr_list_object;
            if (part_info->num_columns != part_info->curr_list_object)
            {
              /*
                All value items lists must be of equal length, in some cases
                which is covered by the above if-statement we don't know yet
                how many columns is in the partition so the assignment above
                ensures that we only report errors when we know we have an
                error.
              */
              part_info->print_debug("Kilroy I", NULL);
              my_parse_error(ER(ER_PARTITION_COLUMN_LIST_ERROR));
              MYSQL_YYABORT;
            }
            part_info->curr_list_object= 0;
          }
#line 23526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 543:
#line 5297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 544:
#line 5298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 545:
#line 5303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->part_type == LIST_PARTITION)
            {
              my_parse_error(ER(ER_MAXVALUE_IN_VALUES_IN));
              MYSQL_YYABORT;
            }
            if (part_info->add_max_value())
            {
              MYSQL_YYABORT;
            }
          }
#line 23555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 546:
#line 5316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            partition_info *part_info= lex->part_info;
            Item *part_expr= (yyvsp[0].item);

            if (!lex->safe_to_cache_query)
            {
              my_parse_error(ER(ER_WRONG_EXPR_IN_PARTITION_FUNC_ERROR));
              MYSQL_YYABORT;
            }
            if (part_info->add_column_list_value(thd, part_expr))
            {
              MYSQL_YYABORT;
            }
          }
#line 23575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 547:
#line 5336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0 &&
                !part_info->use_default_subpartitions)
            {
              /*
                We come here when we have defined subpartitions on the first
                partition but not on all the subsequent partitions. 
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 23593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 548:
#line 5350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            if (part_info->num_subparts != 0)
            {
              if (part_info->num_subparts !=
                  part_info->count_curr_subparts)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
            }
            else if (part_info->count_curr_subparts > 0)
            {
              if (part_info->partitions.elements > 1)
              {
                my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
                MYSQL_YYABORT;
              }
              part_info->num_subparts= part_info->count_curr_subparts;
            }
            part_info->count_curr_subparts= 0;
          }
#line 23620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 549:
#line 5375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 550:
#line 5376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 551:
#line 5381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            partition_element *curr_part= part_info->current_partition;
            partition_element *sub_p_elem= new partition_element(curr_part);
            if (part_info->use_default_subpartitions &&
                part_info->partitions.elements >= 2)
            {
              /*
                create table t1 (a int)
                partition by list (a) subpartition by hash (a)
                (partition p0 values in (1),
                 partition p1 values in (2) subpartition sp11);
                causes use to arrive since we are on the second
                partition, but still use_default_subpartitions
                is set. When we come here we're processing at least
                the second partition (the current partition processed
                have already been put into the partitions list.
              */
              my_parse_error(ER(ER_PARTITION_WRONG_NO_SUBPART_ERROR));
              MYSQL_YYABORT;
            }
            if (!sub_p_elem ||
             curr_part->subpartitions.push_back(sub_p_elem))
            {
              mem_alloc_error(sizeof(partition_element));
              MYSQL_YYABORT;
            }
            part_info->curr_part_elem= sub_p_elem;
            part_info->use_default_subpartitions= FALSE;
            part_info->use_default_num_subpartitions= FALSE;
            part_info->count_curr_subparts++;
          }
#line 23669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 552:
#line 5413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 553:
#line 5418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_ident_length(&(yyvsp[0].lex_str)))
              MYSQL_YYABORT;
            Lex->part_info->curr_part_elem->partition_name= (yyvsp[0].lex_str).str;
          }
#line 23685 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 554:
#line 5426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23691 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 555:
#line 5427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23697 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 556:
#line 5431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 557:
#line 5432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23709 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 558:
#line 5437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->tablespace_name= (yyvsp[0].lex_str).str; }
#line 23715 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 559:
#line 5439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->curr_part_elem->engine_type= (yyvsp[0].db_type);
            part_info->default_engine_type= (yyvsp[0].db_type);
          }
#line 23725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 560:
#line 5445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->curr_part_elem->connect_string.str= (yyvsp[0].lex_str).str;
            lex->part_info->curr_part_elem->connect_string.length= (yyvsp[0].lex_str).length;
          }
#line 23735 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 561:
#line 5451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->nodegroup_id= (uint16) (yyvsp[0].ulong_num); }
#line 23741 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 562:
#line 5453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_max_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 23747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 563:
#line 5455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_min_rows= (ha_rows) (yyvsp[0].ulonglong_number); }
#line 23753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 564:
#line 5457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->data_file_name= (yyvsp[0].lex_str).str; }
#line 23759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 565:
#line 5459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->index_file_name= (yyvsp[0].lex_str).str; }
#line 23765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 566:
#line 5461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->part_info->curr_part_elem->part_comment= (yyvsp[0].lex_str).str; }
#line 23771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 567:
#line 5470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sql_command == SQLCOM_INSERT)
              lex->sql_command= SQLCOM_INSERT_SELECT;
            else if (lex->sql_command == SQLCOM_REPLACE)
              lex->sql_command= SQLCOM_REPLACE_SELECT;
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            lex->current_select->table_list.save_and_clear(&lex->save_list);
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 23790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 568:
#line 5485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 23798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 569:
#line 5489 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              The following work only with the local list, the global list
              is created correctly in this case
            */
            Lex->current_select->table_list.push_front(&Lex->save_list);
          }
#line 23810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 570:
#line 5499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 571:
#line 5500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 572:
#line 5504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 573:
#line 5505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 574:
#line 5509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 575:
#line 5510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 576:
#line 5514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 577:
#line 5515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 23858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 578:
#line 5519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 23864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 579:
#line 5520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[0].num);}
#line 23870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 580:
#line 5524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=(yyvsp[0].num); }
#line 23876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 581:
#line 5525 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].num) | (yyvsp[0].num); }
#line 23882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 582:
#line 5529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=HA_LEX_CREATE_TMP_TABLE; }
#line 23888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 583:
#line 5534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= FALSE;
            (yyval.num)= 0;
          }
#line 23897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 584:
#line 5539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= TRUE;
            (yyval.num)=HA_LEX_CREATE_IF_NOT_EXISTS;
          }
#line 23906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 585:
#line 5547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= 0;
          }
#line 23914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 586:
#line 5551 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= HA_LEX_CREATE_REPLACE;
          }
#line 23922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 594:
#line 5574 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.db_type= (yyvsp[0].db_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ENGINE;
          }
#line 23931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 595:
#line 5579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.max_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MAX_ROWS;
          }
#line 23940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 596:
#line 5584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.min_rows= (yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_MIN_ROWS;
          }
#line 23949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 597:
#line 5589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.avg_row_length=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_AVG_ROW_LENGTH;
          }
#line 23958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 598:
#line 5594 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.password=(yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_PASSWORD;
          }
#line 23967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 599:
#line 5599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.comment=(yyvsp[0].lex_str);
            Lex->create_info.used_fields|= HA_CREATE_USED_COMMENT;
          }
#line 23976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 600:
#line 5604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.auto_increment_value=(yyvsp[0].ulonglong_number);
            Lex->create_info.used_fields|= HA_CREATE_USED_AUTO;
          }
#line 23985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 601:
#line 5609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_PACK_KEYS;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_PACK_KEYS;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 24004 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 602:
#line 5624 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_PACK_KEYS | HA_OPTION_NO_PACK_KEYS);
            Lex->create_info.used_fields|= HA_CREATE_USED_PACK_KEYS;
          }
#line 24014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 603:
#line 5630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_OFF;
                break;
            case 1:
                Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_ON;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 24033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 604:
#line 5645 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_auto_recalc= HA_STATS_AUTO_RECALC_DEFAULT;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_AUTO_RECALC;
          }
#line 24042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 605:
#line 5650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            switch((yyvsp[0].ulong_num)) {
            case 0:
                Lex->create_info.table_options|= HA_OPTION_NO_STATS_PERSISTENT;
                break;
            case 1:
                Lex->create_info.table_options|= HA_OPTION_STATS_PERSISTENT;
                break;
            default:
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
            }
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 24061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 606:
#line 5665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options&=
              ~(HA_OPTION_STATS_PERSISTENT | HA_OPTION_NO_STATS_PERSISTENT);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_PERSISTENT;
          }
#line 24071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 607:
#line 5671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* From user point of view STATS_SAMPLE_PAGES can be specified as
            STATS_SAMPLE_PAGES=N (where 0<N<=65535, it does not make sense to
            scan 0 pages) or STATS_SAMPLE_PAGES=default. Internally we record
            =default as 0. See create_frm() in sql/table.cc, we use only two
            bytes for stats_sample_pages and this is why we do not allow
            larger values. 65535 pages, 16kb each means to sample 1GB, which
            is impractical. If at some point this needs to be extended, then
            we can store the higher bits from stats_sample_pages in .frm too. */
            if ((yyvsp[0].ulong_num) == 0 || (yyvsp[0].ulong_num) > 0xffff)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            Lex->create_info.stats_sample_pages=(yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 24093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 608:
#line 5689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.stats_sample_pages=0;
            Lex->create_info.used_fields|= HA_CREATE_USED_STATS_SAMPLE_PAGES;
          }
#line 24102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 609:
#line 5694 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
            Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 24111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 610:
#line 5699 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_CHECKSUM : HA_OPTION_NO_CHECKSUM;
             Lex->create_info.used_fields|= HA_CREATE_USED_CHECKSUM;
          }
#line 24120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 611:
#line 5704 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_PAGE_CHECKSUM;
            Lex->create_info.page_checksum= (yyvsp[0].choice);
          }
#line 24129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 612:
#line 5709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.table_options|= (yyvsp[0].ulong_num) ? HA_OPTION_DELAY_KEY_WRITE : HA_OPTION_NO_DELAY_KEY_WRITE;
            Lex->create_info.used_fields|= HA_CREATE_USED_DELAY_KEY_WRITE;
          }
#line 24138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 613:
#line 5714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.row_type= (yyvsp[0].row_type);
            Lex->create_info.used_fields|= HA_CREATE_USED_ROW_FORMAT;
          }
#line 24147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 614:
#line 5719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.table_list.save_and_clear(&Lex->save_list);
          }
#line 24155 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 615:
#line 5723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Move the union list to the merge_list and exclude its tables
              from the global list.
            */
            LEX *lex=Lex;
            lex->create_info.merge_list= lex->select_lex.table_list;
            lex->select_lex.table_list= lex->save_list;
            /*
              When excluding union list from the global list we assume that
              elements of the former immediately follow elements which represent
              table being created/altered and parent tables.
            */
            TABLE_LIST *last_non_sel_table= lex->create_last_non_select_table;
            DBUG_ASSERT(last_non_sel_table->next_global ==
                        lex->create_info.merge_list.first);
            last_non_sel_table->next_global= 0;
            Lex->query_tables_last= &last_non_sel_table->next_global;

            lex->create_info.used_fields|= HA_CREATE_USED_UNION;
          }
#line 24181 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 618:
#line 5747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.merge_insert_method= (yyvsp[0].ulong_num);
            Lex->create_info.used_fields|= HA_CREATE_USED_INSERT_METHOD;
          }
#line 24190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 619:
#line 5752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.data_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_DATADIR;
          }
#line 24199 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 620:
#line 5757 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.index_file_name= (yyvsp[0].lex_str).str;
            Lex->create_info.used_fields|= HA_CREATE_USED_INDEXDIR;
          }
#line 24208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 621:
#line 5762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.tablespace= (yyvsp[0].lex_str).str;}
#line 24214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 622:
#line 5764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_DISK;}
#line 24220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 623:
#line 5766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->create_info.storage_media= HA_SM_MEMORY;}
#line 24226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 624:
#line 5768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.connect_string.str= (yyvsp[0].lex_str).str;
            Lex->create_info.connect_string.length= (yyvsp[0].lex_str).length;
            Lex->create_info.used_fields|= HA_CREATE_USED_CONNECTION;
          }
#line 24236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 625:
#line 5774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.used_fields|= HA_CREATE_USED_KEY_BLOCK_SIZE;
            Lex->create_info.key_block_size= (yyvsp[0].ulong_num);
          }
#line 24245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 626:
#line 5779 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    Lex->create_info.used_fields|= HA_CREATE_USED_TRANSACTIONAL;
            Lex->create_info.transactional= (yyvsp[0].choice);
          }
#line 24254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 627:
#line 5784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 628:
#line 5790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 629:
#line 5796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->create_info.option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 24284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 630:
#line 5802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->create_info.option_list,
                                  &Lex->option_list_last);
          }
#line 24294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 631:
#line 5811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->create_info.add_table_option_default_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
          }
#line 24303 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 632:
#line 5819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            HA_CREATE_INFO *cinfo= &Lex->create_info;
            if ((cinfo->used_fields & HA_CREATE_USED_DEFAULT_CHARSET) &&
                 cinfo->default_table_charset && (yyvsp[0].charset) &&
                 !((yyvsp[0].charset)= merge_charset_and_collation(cinfo->default_table_charset,
                                                   (yyvsp[0].charset))))
            {
              MYSQL_YYABORT;
            }

            Lex->create_info.default_table_charset= (yyvsp[0].charset);
            Lex->create_info.used_fields|= HA_CREATE_USED_DEFAULT_CHARSET;
          }
#line 24321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 633:
#line 5836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str));

            if (plugin)
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              if (thd->variables.sql_mode & MODE_NO_ENGINE_SUBSTITUTION)
              {
                my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyval.db_type)= 0;
              push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,
                                  ER_UNKNOWN_STORAGE_ENGINE,
                                  ER(ER_UNKNOWN_STORAGE_ENGINE),
                                  (yyvsp[0].lex_str).str);
            }
          }
#line 24345 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 634:
#line 5859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            plugin_ref plugin;
            if ((plugin= ha_resolve_by_name(thd, &(yyvsp[0].lex_str))))
              (yyval.db_type)= plugin_hton(plugin);
            else
            {
              my_error(ER_UNKNOWN_STORAGE_ENGINE, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 24360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 635:
#line 5872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DEFAULT; }
#line 24366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 636:
#line 5873 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_FIXED; }
#line 24372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 637:
#line 5874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_DYNAMIC; }
#line 24378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 638:
#line 5875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPRESSED; }
#line 24384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 639:
#line 5876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_REDUNDANT; }
#line 24390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 640:
#line 5877 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_COMPACT; }
#line 24396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 641:
#line 5878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.row_type)= ROW_TYPE_PAGE; }
#line 24402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 642:
#line 5882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_DISABLED; }
#line 24408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 643:
#line 5883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_FIRST; }
#line 24414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 644:
#line 5884 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= MERGE_INSERT_TO_LAST; }
#line 24420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 645:
#line 5888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 647:
#line 5893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) STRING_RESULT; }
#line 24432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 648:
#line 5894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) REAL_RESULT; }
#line 24438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 649:
#line 5895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) DECIMAL_RESULT; }
#line 24444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 650:
#line 5896 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num) = (int) INT_RESULT; }
#line 24450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 651:
#line 5902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->create_last_non_select_table= Lex->last_table();
        }
#line 24458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 657:
#line 5920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
#line 24466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 658:
#line 5927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->option_list= NULL; }
#line 24472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 659:
#line 5929 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index (Lex, (yyvsp[-7].key_type), (yyvsp[-6].lex_str)))
              MYSQL_YYABORT;
          }
#line 24481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 660:
#line 5935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->option_list= NULL; }
#line 24487 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 661:
#line 5937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index (Lex, (yyvsp[-8].key_type), (yyvsp[-6].lex_str)))
              MYSQL_YYABORT;
          }
#line 24496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 662:
#line 5943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->option_list= NULL; }
#line 24502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 663:
#line 5945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index (Lex, (yyvsp[-8].key_type), (yyvsp[-6].lex_str)))
              MYSQL_YYABORT;
          }
#line 24511 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 664:
#line 5951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->option_list= NULL; }
#line 24517 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 665:
#line 5953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_create_index (Lex, (yyvsp[-7].key_type), (yyvsp[-6].lex_str).str ? (yyvsp[-6].lex_str) : (yyvsp[-8].lex_str)))
              MYSQL_YYABORT;
          }
#line 24526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 666:
#line 5958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Key *key= new Foreign_key((yyvsp[-4].lex_str).str ? (yyvsp[-4].lex_str) : (yyvsp[-7].lex_str), lex->col_list,
                                      (yyvsp[0].table)->db,
                                      (yyvsp[0].table)->table,
                                      lex->ref_list,
                                      lex->fk_delete_opt,
                                      lex->fk_update_opt,
                                      lex->fk_match_option,
                                      lex->check_exists);
            if (key == NULL)
              MYSQL_YYABORT;
            lex->alter_info.key_list.push_back(key);
            lex->option_list= NULL;
            if (add_create_index (lex, Key::MULTIPLE, (yyvsp[-7].lex_str).str ? (yyvsp[-7].lex_str) : (yyvsp[-4].lex_str),
                                  &default_key_create_info, 1))
              MYSQL_YYABORT;
            /* Only used for ALTER TABLE. Ignored otherwise. */
            lex->alter_info.flags|= Alter_info::ADD_FOREIGN_KEY;
          }
#line 24551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 667:
#line 5979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->col_list.empty(); /* Alloced by sql_alloc */
          }
#line 24559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 671:
#line 5994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 24565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 672:
#line 5995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 24571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 673:
#line 5999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 24577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 674:
#line 6004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0;
            lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset=NULL;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
#line 24592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 675:
#line 6015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd, &(yyvsp[-2].lex_str), (yyvsp[0].lex_type).type,
                                  (yyvsp[0].lex_type).length, (yyvsp[0].lex_type).dec, lex->type,
                                  lex->default_value, lex->on_update_value, 
                                  &lex->comment,
                                  lex->change, &lex->interval_list, (yyvsp[0].lex_type).charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
#line 24608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 676:
#line 6030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_type).set((yyvsp[-1].num), Lex->length, Lex->dec, Lex->charset); }
#line 24614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 677:
#line 6032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_type).set((yyvsp[-2].num), Lex->length, Lex->dec, Lex->charset); }
#line 24620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 678:
#line 6034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_type)= (yyvsp[-5].lex_type);
            Lex->vcol_info->set_field_type((yyval.lex_type).type);
            (yyval.lex_type).type= (enum enum_field_types)MYSQL_TYPE_VIRTUAL;
          }
#line 24630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 680:
#line 6043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 681:
#line 6048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 24644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 682:
#line 6052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->vcol_info->set_stored_in_db_flag(FALSE);
          }
#line 24652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 683:
#line 6056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->vcol_info->set_stored_in_db_flag(TRUE);
          }
#line 24660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 684:
#line 6062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 685:
#line 6063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 686:
#line 6067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 24678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 688:
#line 6073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 24688 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 689:
#line 6079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 24698 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 690:
#line 6084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->comment= (yyvsp[0].lex_str); }
#line 24704 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 691:
#line 6089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              "PARSE_VCOL_EXPR" can only be used by the SQL server
              when reading a '*.frm' file.
              Prevent the end user from invoking this command.
            */
            if (!Lex->parse_vcol_expr)
            {
              my_message(ER_SYNTAX_ERROR, ER(ER_SYNTAX_ERROR), MYF(0));
              MYSQL_YYABORT;
            }
          }
#line 24721 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 692:
#line 6105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->vcol_info= new Virtual_column_info();
            if (!Lex->vcol_info)
            {
              mem_alloc_error(sizeof(Virtual_column_info));
              MYSQL_YYABORT;
            }
            uint expr_len= (uint)((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)) - 1;
            Lex->vcol_info->expr_str.str= (char* ) sql_memdup((yyvsp[-2].simple_string) + 1, expr_len);
            Lex->vcol_info->expr_str.length= expr_len;
            Lex->vcol_info->expr_item= (yyvsp[-1].item);
          }
#line 24738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 693:
#line 6120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=(yyvsp[-2].num); }
#line 24744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 694:
#line 6121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=(yyvsp[-2].num); }
#line 24750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 695:
#line 6122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_FLOAT; }
#line 24756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 696:
#line 6124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_BIT;
          }
#line 24765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 697:
#line 6129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)=MYSQL_TYPE_BIT;
          }
#line 24773 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 698:
#line 6133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
#line 24782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 699:
#line 6138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_TINY;
          }
#line 24791 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 700:
#line 6143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)=MYSQL_TYPE_STRING;
          }
#line 24799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 701:
#line 6147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
          }
#line 24808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 702:
#line 6152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
#line 24817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 703:
#line 6157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            (yyval.num)=MYSQL_TYPE_STRING;
            Lex->charset=national_charset_info;
          }
#line 24827 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 704:
#line 6163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
#line 24836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 705:
#line 6168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= (char*) "1";
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_STRING;
          }
#line 24846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 706:
#line 6174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
#line 24854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 707:
#line 6178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_TYPE_VARCHAR;
            Lex->charset=national_charset_info;
          }
#line 24863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 708:
#line 6183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)= MYSQL_TYPE_VARCHAR;
          }
#line 24872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 709:
#line 6188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->length)
            {
              errno= 0;
              ulong length= strtoul(Lex->length, NULL, 10);
              if (errno == 0 && length <= MAX_FIELD_BLOBLENGTH && length != 4)
              {
                char buff[sizeof("YEAR()") + MY_INT64_NUM_DECIMAL_DIGITS + 1];
                my_snprintf(buff, sizeof(buff), "YEAR(%lu)", length);
                push_warning_printf(thd, Sql_condition::WARN_LEVEL_NOTE,
                                    ER_WARN_DEPRECATED_SYNTAX,
                                    ER(ER_WARN_DEPRECATED_SYNTAX),
                                    buff, "YEAR(4)");
              }
            }
            (yyval.num)=MYSQL_TYPE_YEAR;
          }
#line 24894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 710:
#line 6206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_DATE; }
#line 24900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 711:
#line 6208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_TIME; }
#line 24906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 712:
#line 6210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->variables.sql_mode & MODE_MAXDB)
              (yyval.num)=MYSQL_TYPE_DATETIME;
            else
            {
              /* 
                Unlike other types TIMESTAMP fields are NOT NULL by default.
              */
              Lex->type|= NOT_NULL_FLAG;
              (yyval.num)=MYSQL_TYPE_TIMESTAMP;
            }
          }
#line 24923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 713:
#line 6223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_DATETIME; }
#line 24929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 714:
#line 6225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_TINY_BLOB;
          }
#line 24938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 715:
#line 6230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_BLOB;
          }
#line 24947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 716:
#line 6235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            Lex->charset=&my_charset_bin;
            Lex->uint_geom_type= (uint)(yyvsp[0].num);
            (yyval.num)=MYSQL_TYPE_GEOMETRY;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
#line 24963 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 717:
#line 6247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
#line 24972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 718:
#line 6252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_LONG_BLOB;
          }
#line 24981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 719:
#line 6257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset=&my_charset_bin;
            (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB;
          }
#line 24990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 720:
#line 6262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 24996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 721:
#line 6264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_TINY_BLOB; }
#line 25002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 722:
#line 6266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_BLOB; }
#line 25008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 723:
#line 6268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 724:
#line 6270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_LONG_BLOB; }
#line 25020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 725:
#line 6272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
#line 25026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 726:
#line 6274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
#line 25032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 727:
#line 6276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_NEWDECIMAL;}
#line 25038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 728:
#line 6278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {Lex->interval_list.empty();}
#line 25044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 729:
#line 6280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_ENUM; }
#line 25050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 730:
#line 6282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->interval_list.empty();}
#line 25056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 731:
#line 6284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_SET; }
#line 25062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 732:
#line 6286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_MEDIUM_BLOB; }
#line 25068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 733:
#line 6288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)=MYSQL_TYPE_LONGLONG;
            Lex->type|= (AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNSIGNED_FLAG |
              UNIQUE_FLAG);
          }
#line 25078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 734:
#line 6296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_GEOMETRY; }
#line 25084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 735:
#line 6297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_GEOMETRYCOLLECTION; }
#line 25090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 736:
#line 6299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->length= const_cast<char*>(STRINGIFY_ARG
                                           (MAX_LEN_GEOM_POINT_FIELD));
            (yyval.num)= Field::GEOM_POINT;
          }
#line 25100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 737:
#line 6304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_MULTIPOINT; }
#line 25106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 738:
#line 6305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_LINESTRING; }
#line 25112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 739:
#line 6306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_MULTILINESTRING; }
#line 25118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 740:
#line 6307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_POLYGON; }
#line 25124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 741:
#line 6308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= Field::GEOM_MULTIPOLYGON; }
#line 25130 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 742:
#line 6312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 743:
#line 6316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 744:
#line 6317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 745:
#line 6321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 746:
#line 6322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 747:
#line 6326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 748:
#line 6327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 749:
#line 6328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 750:
#line 6329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 751:
#line 6330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 752:
#line 6334 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_LONG; }
#line 25196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 753:
#line 6335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_TINY; }
#line 25202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 754:
#line 6336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_SHORT; }
#line 25208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 755:
#line 6337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_INT24; }
#line 25214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 756:
#line 6338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_LONGLONG; }
#line 25220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 757:
#line 6343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= thd->variables.sql_mode & MODE_REAL_AS_FLOAT ?
              MYSQL_TYPE_FLOAT : MYSQL_TYPE_DOUBLE;
          }
#line 25229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 758:
#line 6348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
#line 25235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 759:
#line 6350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=MYSQL_TYPE_DOUBLE; }
#line 25241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 760:
#line 6355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->dec=Lex->length= (char*)0; }
#line 25247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 761:
#line 6357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->dec= (char*)0; }
#line 25253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 762:
#line 6359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 763:
#line 6364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->length=(yyvsp[-3].lex_str).str;
            lex->dec=(yyvsp[-1].lex_str).str;
          }
#line 25269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 764:
#line 6372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 765:
#line 6373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 766:
#line 6377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25287 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 767:
#line 6378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25293 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 768:
#line 6382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25299 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 769:
#line 6383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= UNSIGNED_FLAG;}
#line 25305 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 770:
#line 6384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= UNSIGNED_FLAG | ZEROFILL_FLAG; }
#line 25311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 771:
#line 6388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 772:
#line 6389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25323 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 773:
#line 6390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 774:
#line 6391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length= (yyvsp[-1].lex_str).str; }
#line 25335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 775:
#line 6394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->length=(char*) 0; /* use default length */ }
#line 25341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 776:
#line 6395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 25347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 777:
#line 6399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 778:
#line 6400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 779:
#line 6404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 780:
#line 6405 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 781:
#line 6409 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 783:
#line 6414 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type&= ~ NOT_NULL_FLAG; }
#line 25383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 784:
#line 6415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= NOT_NULL_FLAG; }
#line 25389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 785:
#line 6416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->default_value=(yyvsp[0].item); }
#line 25395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 786:
#line 6418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_now_local((yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            Lex->on_update_value= item;
          }
#line 25406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 787:
#line 6424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG; }
#line 25412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 788:
#line 6426 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->type|= AUTO_INCREMENT_FLAG | NOT_NULL_FLAG | UNIQUE_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25422 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 789:
#line 6432 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type|= PRI_KEY_FLAG | NOT_NULL_FLAG;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 790:
#line 6438 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 25442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 791:
#line 6444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type|= UNIQUE_KEY_FLAG; 
            lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX; 
          }
#line 25452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 792:
#line 6449 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->comment= (yyvsp[0].lex_str); }
#line 25458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 793:
#line 6451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->charset && !my_charset_same(Lex->charset,(yyvsp[0].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[0].charset)->name,Lex->charset->csname);
              MYSQL_YYABORT;
            }
            else
            {
              Lex->charset=(yyvsp[0].charset);
            }
          }
#line 25475 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 794:
#line 6464 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 25485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 795:
#line 6470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 25495 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 796:
#line 6476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 25505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 797:
#line 6482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
#line 25514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 798:
#line 6491 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.num)= (yyvsp[-1].num);

          if (Lex->charset) /* Lex->charset is scanned in "type" */
          {
            if (!(Lex->charset= merge_charset_and_collation(Lex->charset, (yyvsp[0].charset))))
              MYSQL_YYABORT;
          }
          else if ((yyvsp[0].charset))
          {
            my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                     "COLLATE with no CHARACTER SET "
                     "in SP parameters, RETURNS, DECLARE");
            MYSQL_YYABORT;
          }
        }
#line 25535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 799:
#line 6512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 25545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 800:
#line 6518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 25551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 801:
#line 6522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 802:
#line 6523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 803:
#line 6528 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 25575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 804:
#line 6535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 25581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 805:
#line 6539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 25587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 806:
#line 6540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 807:
#line 6544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= NULL; }
#line 25599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 808:
#line 6545 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= (yyvsp[0].charset); }
#line 25605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 809:
#line 6550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)=get_charset_by_csname((yyvsp[0].lex_str).str,MY_CS_PRIMARY,MYF(0))) &&
                !((yyval.charset)=get_old_charset_by_name((yyvsp[0].lex_str).str)))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 25618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 810:
#line 6558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)= &my_charset_bin; }
#line 25624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 811:
#line 6562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset);   }
#line 25630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 812:
#line 6563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 813:
#line 6568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.charset)= mysqld_collation_get_by_name((yyvsp[0].lex_str).str)))
              MYSQL_YYABORT;
          }
#line 25645 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 814:
#line 6575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 815:
#line 6576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 25657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 816:
#line 6580 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=(yyvsp[0].charset); }
#line 25663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 817:
#line 6581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.charset)=NULL; }
#line 25669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 818:
#line 6585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 819:
#line 6586 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 25681 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 820:
#line 6591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= &my_charset_latin1; }
#line 25687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 821:
#line 6593 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= &my_charset_latin1_bin;
          }
#line 25695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 822:
#line 6597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= &my_charset_latin1_bin;
          }
#line 25703 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 823:
#line 6604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(Lex->charset=get_charset_by_csname("ucs2",
                                                     MY_CS_PRIMARY,MYF(0))))
            {
              my_error(ER_UNKNOWN_CHARACTER_SET, MYF(0), "ucs2");
              MYSQL_YYABORT;
            }
          }
#line 25716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 824:
#line 6613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
#line 25725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 825:
#line 6618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(Lex->charset= mysqld_collation_get_by_name("ucs2_bin")))
              MYSQL_YYABORT;
          }
#line 25734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 826:
#line 6625 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset=NULL; }
#line 25740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 829:
#line 6628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset=&my_charset_bin; }
#line 25746 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 830:
#line 6629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset=(yyvsp[-1].charset); }
#line 25752 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 831:
#line 6631 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= NULL;
            Lex->type|= BINCMP_FLAG;
          }
#line 25761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 832:
#line 6636 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->charset= (yyvsp[0].charset);
            Lex->type|= BINCMP_FLAG;
          }
#line 25770 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 833:
#line 6643 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 25776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 834:
#line 6644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= BINCMP_FLAG; }
#line 25782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 835:
#line 6649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          if ((yyvsp[0].ulong_num) == 0)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
        }
#line 25794 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 836:
#line 6657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-2].ulong_num); }
#line 25800 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 837:
#line 6661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 25806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 838:
#line 6662 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_DESC_SHIFT; }
#line 25812 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 839:
#line 6666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 1 << MY_STRXFRM_REVERSE_SHIFT; }
#line 25818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 840:
#line 6669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 25824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 841:
#line 6670 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 25830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 842:
#line 6671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[-1].ulong_num) | (yyvsp[0].ulong_num); }
#line 25836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 843:
#line 6672 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num) ; }
#line 25842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 844:
#line 6677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (yyvsp[0].ulong_num) < 1 ? 1 : ((yyvsp[0].ulong_num) > MY_STRXFRM_NLEVELS ? MY_STRXFRM_NLEVELS : (yyvsp[0].ulong_num));
          (yyval.ulong_num)--;
        }
#line 25851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 845:
#line 6685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          (yyval.ulong_num)= (1 | (yyvsp[0].ulong_num)) << (yyvsp[-1].ulong_num);
        }
#line 25859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 846:
#line 6691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 25865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 847:
#line 6692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)|= (yyvsp[0].ulong_num); }
#line 25871 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 848:
#line 6697 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          uint start= (yyvsp[-2].ulong_num);
          uint end= (yyvsp[0].ulong_num);
          for ((yyval.ulong_num)= 0; start <= end; start++)
            (yyval.ulong_num)|= (1 << start);
        }
#line 25882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 849:
#line 6706 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 25888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 850:
#line 6707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 25894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 851:
#line 6711 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= 0; }
#line 25900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 852:
#line 6712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (yyvsp[0].ulong_num); }
#line 25906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 855:
#line 6726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)=(yyvsp[-3].table);
          }
#line 25914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 856:
#line 6733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ref_list.empty(); }
#line 25920 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 858:
#line 6739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            Lex->ref_list.push_back(key);
          }
#line 25931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 859:
#line 6746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Key_part_spec *key= new Key_part_spec((yyvsp[0].lex_str), 0);
            if (key == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->ref_list.empty();
            lex->ref_list.push_back(key);
          }
#line 25944 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 860:
#line 6758 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_UNDEF; }
#line 25950 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 861:
#line 6760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_FULL; }
#line 25956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 862:
#line 6762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_PARTIAL; }
#line 25962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 863:
#line 6764 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->fk_match_option= Foreign_key::FK_MATCH_SIMPLE; }
#line 25968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 864:
#line 6769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
#line 25978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 865:
#line 6775 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= Foreign_key::FK_OPTION_UNDEF;
          }
#line 25988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 866:
#line 6781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= Foreign_key::FK_OPTION_UNDEF;
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 25998 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 867:
#line 6788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[-3].m_fk_option);
            lex->fk_delete_opt= (yyvsp[0].m_fk_option);
          }
#line 26008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 868:
#line 6795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->fk_update_opt= (yyvsp[0].m_fk_option);
            lex->fk_delete_opt= (yyvsp[-3].m_fk_option);
          }
#line 26018 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 869:
#line 6803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_RESTRICT; }
#line 26024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 870:
#line 6804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_CASCADE; }
#line 26030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 871:
#line 6805 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_SET_NULL; }
#line 26036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 872:
#line 6806 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_NO_ACTION; }
#line 26042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 873:
#line 6807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_fk_option)= Foreign_key::FK_OPTION_DEFAULT;  }
#line 26048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 874:
#line 6811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::MULTIPLE; }
#line 26054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 875:
#line 6815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::PRIMARY; }
#line 26060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 876:
#line 6816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 26066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 877:
#line 6820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 878:
#line 6821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 879:
#line 6825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 881:
#line 6830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 882:
#line 6831 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 883:
#line 6832 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 884:
#line 6836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::MULTIPLE; }
#line 26108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 885:
#line 6837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::UNIQUE; }
#line 26114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 886:
#line 6841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_type)= Key::FULLTEXT;}
#line 26120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 887:
#line 6846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.key_type)= Key::SPATIAL;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
#line 26134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 888:
#line 6858 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->key_create_info= default_key_create_info;
          }
#line 26142 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 891:
#line 6875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 893:
#line 6880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26154 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 895:
#line 6885 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26160 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 903:
#line 6905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 26166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 904:
#line 6906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->key_create_info.algorithm= (yyvsp[0].key_alg); }
#line 26172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 905:
#line 6911 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->key_create_info.block_size= (yyvsp[0].ulong_num); }
#line 26178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 906:
#line 6912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->key_create_info.comment= (yyvsp[0].lex_str); }
#line 26184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 907:
#line 6914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 26194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 908:
#line 6920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].lex_str), false, &Lex->option_list,
                                  &Lex->option_list_last);
          }
#line 26204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 909:
#line 6926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), (yyvsp[0].ulonglong_number), &Lex->option_list,
                                  &Lex->option_list_last, thd->mem_root);
          }
#line 26214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 910:
#line 6932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            new (thd->mem_root)
              engine_option_value((yyvsp[-2].lex_str), &Lex->option_list, &Lex->option_list_last);
          }
#line 26223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 915:
#line 6950 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (plugin_is_ready(&(yyvsp[0].lex_str), MYSQL_FTPARSER_PLUGIN))
              Lex->key_create_info.parser_name= (yyvsp[0].lex_str);
            else
            {
              my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 26237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 916:
#line 6962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_BTREE; }
#line 26243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 917:
#line 6963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_RTREE; }
#line 26249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 918:
#line 6964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.key_alg)= HA_KEY_ALG_HASH; }
#line 26255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 919:
#line 6968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->col_list.push_back((yyvsp[-1].key_part)); }
#line 26261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 920:
#line 6969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->col_list.push_back((yyvsp[-1].key_part)); }
#line 26267 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 921:
#line 6974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.key_part)= new Key_part_spec((yyvsp[0].lex_str), 0);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 26277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 922:
#line 6980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int key_part_len= atoi((yyvsp[-1].lex_str).str);
            if (!key_part_len)
            {
              my_error(ER_KEY_PART_0, MYF(0), (yyvsp[-3].lex_str).str);
            }
            (yyval.key_part)= new Key_part_spec((yyvsp[-3].lex_str), (uint) key_part_len);
            if ((yyval.key_part) == NULL)
              MYSQL_YYABORT;
          }
#line 26292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 923:
#line 6993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 924:
#line 6994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 925:
#line 6999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          LEX *lex= Lex;
          if (lex->check_exists && lex->sql_command != SQLCOM_ALTER_TABLE)
          {
            my_parse_error(ER(ER_SYNTAX_ERROR));
            MYSQL_YYABORT;
          }
          (yyval.lex_str)= (yyvsp[0].lex_str);
        }
#line 26318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 926:
#line 7010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= null_lex_str; }
#line 26324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 927:
#line 7011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 928:
#line 7015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->interval_list.push_back((yyvsp[0].string)); }
#line 26336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 929:
#line 7016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->interval_list.push_back((yyvsp[0].string)); }
#line 26342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 930:
#line 7024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->name.str= 0;
            Lex->name.length= 0;
            Lex->only_view= FALSE;
            Lex->sql_command= SQLCOM_ALTER_TABLE;
            Lex->duplicates= DUP_ERROR; 
            Lex->col_list.empty();
            Lex->select_lex.init_order();
            bzero(&Lex->create_info, sizeof(Lex->create_info));
            Lex->create_info.db_type= 0;
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.row_type= ROW_TYPE_NOT_USED;
            Lex->alter_info.reset();
            Lex->no_write_to_binlog= 0;
            Lex->create_info.storage_media= HA_SM_DEFAULT;
            DBUG_ASSERT(!Lex->m_sql_cmd);
          }
#line 26364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 931:
#line 7042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
            Lex->select_lex.db= (Lex->select_lex.table_list.first)->db;
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 26378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 932:
#line 7052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Lex->m_sql_cmd)
            {
              /* Create a generic ALTER TABLE statment. */
              Lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_alter_table();
              if (Lex->m_sql_cmd == NULL)
                MYSQL_YYABORT;
            }
          }
#line 26392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 933:
#line 7062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_info.default_table_charset= NULL;
            Lex->create_info.used_fields= 0;
          }
#line 26401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 934:
#line 7067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_ALTER_DB;
            lex->name= (yyvsp[-2].lex_str);
            if (lex->name.str == NULL &&
                lex->copy_db_to(&lex->name.str, &lex->name.length))
              MYSQL_YYABORT;
          }
#line 26414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 935:
#line 7076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "DATABASE");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_ALTER_DB_UPGRADE;
            lex->name= (yyvsp[-4].lex_str);
          }
#line 26429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 936:
#line 7087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 26444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 937:
#line 7098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_PROCEDURE;
            lex->spname= (yyvsp[-2].spname);
          }
#line 26455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 938:
#line 7105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 26470 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 939:
#line 7116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command= SQLCOM_ALTER_FUNCTION;
            lex->spname= (yyvsp[-2].spname);
          }
#line 26481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 940:
#line 7123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_mode= VIEW_ALTER;
          }
#line 26496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 941:
#line 7134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 942:
#line 7141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "ALTER VIEW");
              MYSQL_YYABORT;
            }
            lex->create_view_algorithm= VIEW_ALGORITHM_INHERIT;
            lex->create_view_mode= VIEW_ALTER;
          }
#line 26518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 943:
#line 7153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 944:
#line 7155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              It is safe to use Lex->spname because
              ALTER EVENT xxx RENATE TO yyy DO ALTER EVENT RENAME TO
              is not allowed. Lex->spname is used in the case of RENAME TO
              If it had to be supported spname had to be added to
              Event_parse_data.
            */

            if (!(Lex->event_parse_data= Event_parse_data::new_instance(thd)))
              MYSQL_YYABORT;
            Lex->event_parse_data->identifier= (yyvsp[0].spname);

            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
#line 26544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 945:
#line 7175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyvsp[-4].num) || (yyvsp[-3].num) || (yyvsp[-2].num) || (yyvsp[-1].num) || (yyvsp[0].num)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /*
              sql_command is set here because some rules in ev_sql_stmt
              can overwrite it
            */
            Lex->sql_command= SQLCOM_ALTER_EVENT;
          }
#line 26561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 946:
#line 7188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_TABLESPACE;
          }
#line 26570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 947:
#line 7193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_LOGFILE_GROUP;
          }
#line 26579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 948:
#line 7198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= CHANGE_FILE_TABLESPACE;
          }
#line 26588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 949:
#line 7203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= ALTER_ACCESS_MODE_TABLESPACE;
          }
#line 26597 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 950:
#line 7208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_ALTER_SERVER;
            lex->server_options.server_name= (yyvsp[-4].lex_str).str;
            lex->server_options.server_name_length= (yyvsp[-4].lex_str).length;
          }
#line 26608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 951:
#line 7217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 952:
#line 7218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 953:
#line 7219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 954:
#line 7220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 955:
#line 7224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 956:
#line 7226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Use lex's spname to hold the new name.
              The original name is in the Event_parse_data object
            */
            Lex->spname= (yyvsp[0].spname); 
            (yyval.num)= 1;
          }
#line 26651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 957:
#line 7237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;}
#line 26657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 958:
#line 7238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 26663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 959:
#line 7242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str).str= 0; (yyval.lex_str).length= 0; }
#line 26669 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 960:
#line 7243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 26675 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 962:
#line 7249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::DISCARD_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 963:
#line 7257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->m_sql_cmd= new (thd->mem_root)
              Sql_cmd_discard_import_tablespace(
                Sql_cmd_discard_import_tablespace::IMPORT_TABLESPACE);
            if (Lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26699 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 969:
#line 7279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_DROP_PARTITION;
          }
#line 26707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 970:
#line 7284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_REBUILD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
          }
#line 26717 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 971:
#line 7291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_optimize_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 973:
#line 7304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_analyze_partition();
            if (lex->m_sql_cmd == NULL)
               MYSQL_YYABORT;
          }
#line 26747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 974:
#line 7315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_check_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 976:
#line 7327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_repair_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 978:
#line 7339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_info.flags|= Alter_info::ALTER_COALESCE_PARTITION;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->alter_info.num_parts= (yyvsp[0].ulong_num);
          }
#line 26787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 979:
#line 7346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->check_opt.init();
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                              Sql_cmd_alter_table_truncate_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 981:
#line 7358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[-1].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[-1].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_EXCHANGE_PARTITION;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root)
                               Sql_cmd_alter_table_exchange_partition();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 26828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 982:
#line 7384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REMOVE_PARTITIONING;
          }
#line 26836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 983:
#line 7391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ALL_PARTITION;
          }
#line 26844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 985:
#line 7399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->alter_info.flags|= Alter_info::ALTER_ADD_PARTITION;
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 26860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 986:
#line 7411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 988:
#line 7417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info->num_parts= lex->part_info->partitions.elements;
          }
#line 26875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 989:
#line 7422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->part_info->num_parts= (yyvsp[0].ulong_num);
          }
#line 26883 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 990:
#line 7429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->part_info= new partition_info();
            if (!lex->part_info)
            {
              mem_alloc_error(sizeof(partition_info));
              MYSQL_YYABORT;
            }
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 26898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 992:
#line 7444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_TABLE_REORG;
          }
#line 26906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 993:
#line 7448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_REORGANIZE_PARTITION;
          }
#line 26914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 994:
#line 7452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            partition_info *part_info= Lex->part_info;
            part_info->num_parts= part_info->partitions.elements;
          }
#line 26923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 995:
#line 7459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 996:
#line 7460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 26935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 997:
#line 7465 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.partition_names.push_back((yyvsp[0].lex_str).str))
            {
              mem_alloc_error(1);
              MYSQL_YYABORT;
            }
          }
#line 26947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1000:
#line 7485 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->change=0;
            lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN;
          }
#line 26957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1001:
#line 7494 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 26965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1002:
#line 7498 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_INDEX;
          }
#line 26974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1003:
#line 7503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADD_COLUMN |
                                    Alter_info::ALTER_ADD_INDEX;
          }
#line 26983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1004:
#line 7508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->change= (yyvsp[0].lex_str).str;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
            lex->option_list= NULL;
          }
#line 26994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1005:
#line 7515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 27002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1006:
#line 7519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->length=lex->dec=0; lex->type=0;
            lex->default_value= lex->on_update_value= 0;
            lex->comment=null_lex_str;
            lex->charset= NULL;
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN;
	    lex->vcol_info= 0;
            lex->option_list= NULL;
          }
#line 27017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1007:
#line 7530 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (add_field_to_list(lex->thd,&(yyvsp[-2].lex_str),
                                  (yyvsp[0].lex_type).type,
                                  (yyvsp[0].lex_type).length, (yyvsp[0].lex_type).dec, lex->type,
                                  lex->default_value, lex->on_update_value,
                                  &lex->comment,
                                  (yyvsp[-2].lex_str).str, &lex->interval_list, (yyvsp[0].lex_type).charset,
                                  lex->uint_geom_type,
                                  lex->vcol_info, lex->option_list))
              MYSQL_YYABORT;
          }
#line 27034 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1008:
#line 7543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->create_last_non_select_table= Lex->last_table();
          }
#line 27042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1009:
#line 7547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::COLUMN, (yyvsp[-1].lex_str).str, (yyvsp[-2].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_COLUMN;
          }
#line 27055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1010:
#line 7556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::FOREIGN_KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::DROP_FOREIGN_KEY;
          }
#line 27068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1011:
#line 7565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, primary_key_name,
                                           FALSE);
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 27082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1012:
#line 7575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[0].lex_str).str, (yyvsp[-1].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->alter_info.drop_list.push_back(ad);
            lex->alter_info.flags|= Alter_info::ALTER_DROP_INDEX;
          }
#line 27095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1013:
#line 7584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::DISABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 27105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1014:
#line 7590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.keys_onoff= Alter_info::ENABLE;
            lex->alter_info.flags|= Alter_info::ALTER_KEYS_ONOFF;
          }
#line 27115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1015:
#line 7596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[-3].lex_str).str,(yyvsp[0].item));
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 27128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1016:
#line 7605 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_column *ac= new Alter_column((yyvsp[-2].lex_str).str, (Item*) 0);
            if (ac == NULL)
              MYSQL_YYABORT;
            lex->alter_info.alter_list.push_back(ac);
            lex->alter_info.flags|= Alter_info::ALTER_CHANGE_COLUMN_DEFAULT;
          }
#line 27141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1017:
#line 7614 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            size_t dummy;
            lex->select_lex.db=(yyvsp[0].table)->db.str;
            if (lex->select_lex.db == NULL &&
                lex->copy_db_to(&lex->select_lex.db, &dummy))
            {
              MYSQL_YYABORT;
            }
            if (check_table_name((yyvsp[0].table)->table.str,(yyvsp[0].table)->table.length, FALSE) ||
                ((yyvsp[0].table)->db.str && check_db_name(&(yyvsp[0].table)->db)))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[0].table)->table.str);
              MYSQL_YYABORT;
            }
            lex->name= (yyvsp[0].table)->table;
            lex->alter_info.flags|= Alter_info::ALTER_RENAME;
          }
#line 27164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1018:
#line 7633 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!(yyvsp[-1].charset))
            {
              (yyvsp[-1].charset)= thd->variables.collation_database;
            }
            (yyvsp[0].charset)= (yyvsp[0].charset) ? (yyvsp[0].charset) : (yyvsp[-1].charset);
            if (!my_charset_same((yyvsp[-1].charset),(yyvsp[0].charset)))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       (yyvsp[0].charset)->name, (yyvsp[-1].charset)->csname);
              MYSQL_YYABORT;
            }
            LEX *lex= Lex;
            if (lex->create_info.add_alter_list_item_convert_to_charset((yyvsp[0].charset)))
              MYSQL_YYABORT;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
          }
#line 27186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1019:
#line 7651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_OPTIONS;
            if ((lex->create_info.used_fields & HA_CREATE_USED_ENGINE) &&
                !lex->create_info.db_type)
            {
              lex->create_info.used_fields&= ~HA_CREATE_USED_ENGINE;
            }
          }
#line 27200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1020:
#line 7661 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_RECREATE;
          }
#line 27208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1021:
#line 7665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->alter_info.flags|= Alter_info::ALTER_ORDER;
          }
#line 27217 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1029:
#line 7682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_algorithm=
              Alter_info::ALTER_TABLE_ALGORITHM_DEFAULT;
          }
#line 27226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1030:
#line 7687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_algorithm(&(yyvsp[0].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_ALGORITHM, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 27238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1031:
#line 7698 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_DEFAULT;
          }
#line 27247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1032:
#line 7703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->alter_info.set_requested_lock(&(yyvsp[0].lex_str)))
            {
              my_error(ER_UNKNOWN_ALTER_LOCK, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
          }
#line 27259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1033:
#line 7713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27265 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1034:
#line 7714 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1035:
#line 7718 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 27277 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1036:
#line 7719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 27283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1037:
#line 7723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 0;}
#line 27289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1043:
#line 7737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1;}
#line 27295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1044:
#line 7739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.requested_lock=
              Alter_info::ALTER_TABLE_LOCK_NONE;
          }
#line 27304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1045:
#line 7746 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_DEFAULT; }
#line 27310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1046:
#line 7747 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_RESTRICT; }
#line 27316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1047:
#line 7748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->drop_mode= DROP_CASCADE; }
#line 27322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1048:
#line 7752 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1049:
#line 7754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            store_position_for_column((yyvsp[0].lex_str).str);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 27337 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1050:
#line 7759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            store_position_for_column(first_keyword);
            Lex->alter_info.flags |= Alter_info::ALTER_COLUMN_ORDER;
          }
#line 27346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1051:
#line 7766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1052:
#line 7767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1053:
#line 7768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1054:
#line 7769 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1055:
#line 7774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_START;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE START too */
          }
#line 27381 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1056:
#line 7781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27387 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1057:
#line 7783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_START;
            lex->type = 0;
          }
#line 27397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1058:
#line 7788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27403 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1059:
#line 7790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 27414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1060:
#line 7797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_SLAVE_ALL_STOP;
            lex->type = 0;
            /* If you change this code don't forget to update SLAVE STOP too */
          }
#line 27425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1061:
#line 7807 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_BEGIN;
            /* READ ONLY and READ WRITE are mutually exclusive. */
            if (((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_WRITE) &&
                ((yyvsp[0].num) & MYSQL_START_TRANS_OPT_READ_ONLY))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->start_transaction_opt= (yyvsp[0].num);
          }
#line 27442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1062:
#line 7823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= 0;
          }
#line 27450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1063:
#line 7827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 27458 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1064:
#line 7834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[0].num);
          }
#line 27466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1065:
#line 7838 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (yyvsp[-2].num) | (yyvsp[0].num);
          }
#line 27474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1066:
#line 7845 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_WITH_CONS_SNAPSHOT;
          }
#line 27482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1067:
#line 7849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_ONLY;
          }
#line 27490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1068:
#line 7853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= MYSQL_START_TRANS_OPT_READ_WRITE;
          }
#line 27498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1069:
#line 7859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt= 0; }
#line 27504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1070:
#line 7861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27510 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1073:
#line 7870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1074:
#line 7871 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_SQL; }
#line 27522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1075:
#line 7872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->slave_thd_opt|=SLAVE_IO; }
#line 27528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1076:
#line 7876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1077:
#line 7878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (((lex->mi.log_file_name || lex->mi.pos) &&
                 (lex->mi.relay_log_name || lex->mi.relay_log_pos)) ||
                !((lex->mi.log_file_name && lex->mi.pos) ||
                  (lex->mi.relay_log_name && lex->mi.relay_log_pos)))
            {
               my_message(ER_BAD_SLAVE_UNTIL_COND,
                          ER(ER_BAD_SLAVE_UNTIL_COND), MYF(0));
               MYSQL_YYABORT;
            }
          }
#line 27551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1078:
#line 7891 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->mi.gtid_pos_str = (yyvsp[0].lex_str);
          }
#line 27559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1081:
#line 7903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_CHECKSUM;
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1082:
#line 7910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1083:
#line 7914 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= 0; }
#line 27582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1084:
#line 7915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_QUICK; }
#line 27588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1085:
#line 7916 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags= T_EXTEND; }
#line 27594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1087:
#line 7921 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 27600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1089:
#line 7926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPAIR;
            lex->no_write_to_binlog= (yyvsp[0].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27614 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1090:
#line 7936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_repair_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1091:
#line 7946 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 27632 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1092:
#line 7947 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1093:
#line 7951 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27644 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1094:
#line 7952 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1095:
#line 7956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 27656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1096:
#line 7957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 27662 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1097:
#line 7958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_USEFRM; }
#line 27668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1098:
#line 7962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 27674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1099:
#line 7963 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FROM_MYSQL; }
#line 27680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1100:
#line 7968 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_ANALYZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1101:
#line 7978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_analyze_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1105:
#line 7998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1106:
#line 8000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            thd->lex->with_persistent_for_clause= TRUE;
          }
#line 27720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1107:
#line 8007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1108:
#line 8009 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1109:
#line 8012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1110:
#line 8014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->column_list= new List<LEX_STRING>;
            if (lex->column_list == NULL)
              MYSQL_YYABORT;
          }
#line 27749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1112:
#line 8025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1113:
#line 8027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX* lex= thd->lex;
            lex->index_list= new List<LEX_STRING>;
            if (lex->index_list == NULL)
              MYSQL_YYABORT;
          }
#line 27766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1115:
#line 8039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1116:
#line 8041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
          }
#line 27781 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1117:
#line 8046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->column_list->push_back((LEX_STRING*)
            sql_memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
          }
#line 27790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1118:
#line 8054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1121:
#line 8061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
          }
#line 27805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1122:
#line 8067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING str= {(char*) "PRIMARY", 7};
            Lex->index_list->push_back(
              (LEX_STRING*) sql_memdup(&str, sizeof(LEX_STRING)));
          }
#line 27815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1123:
#line 8076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_BINLOG_BASE64_EVENT;
            Lex->comment= (yyvsp[0].lex_str);
          }
#line 27824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1125:
#line 8084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->only_view= TRUE; }
#line 27830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1127:
#line 8088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->sql_command = SQLCOM_CHECK;
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1128:
#line 8098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "CHECK");
              MYSQL_YYABORT;
            }
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_check_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1129:
#line 8113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags = T_MEDIUM; }
#line 27867 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1130:
#line 8114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27873 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1131:
#line 8118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1132:
#line 8119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27885 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1133:
#line 8123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_QUICK; }
#line 27891 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1134:
#line 8124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_FAST; }
#line 27897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1135:
#line 8125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_MEDIUM; }
#line 27903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1136:
#line 8126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_EXTEND; }
#line 27909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1137:
#line 8127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.flags|= T_CHECK_ONLY_CHANGED; }
#line 27915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1138:
#line 8128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 27921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1139:
#line 8132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 27927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1140:
#line 8133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->check_opt.sql_flags|= TT_FOR_UPGRADE; }
#line 27933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1141:
#line 8138 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_OPTIMIZE;
            lex->no_write_to_binlog= (yyvsp[-1].num);
            lex->check_opt.init();
            lex->alter_info.reset();
            /* Will be overriden during execution. */
            YYPS->m_lock_type= TL_UNLOCK;
          }
#line 27947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1142:
#line 8148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_optimize_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 27959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1143:
#line 8158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 27965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1144:
#line 8159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 27971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1145:
#line 8160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 27977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1146:
#line 8165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_RENAME_TABLE;
          }
#line 27985 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1147:
#line 8169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 27991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1148:
#line 8171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_RENAME_USER;
          }
#line 27999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1149:
#line 8178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user)) || Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 28008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1150:
#line 8183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[-2].lex_user)) || Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 28017 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1153:
#line 8196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sl= lex->current_select;
            if (!sl->add_table_to_list(lex->thd, (yyvsp[-2].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE) ||
                !sl->add_table_to_list(lex->thd, (yyvsp[0].table),NULL,TL_OPTION_UPDATING,
                                       TL_IGNORE, MDL_EXCLUSIVE))
              MYSQL_YYABORT;
          }
#line 28031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1154:
#line 8209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.reset();
          }
#line 28039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1155:
#line 8213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ASSIGN_TO_KEYCACHE;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 28049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1160:
#line 8232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, 0, TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1161:
#line 8242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, 0, TL_READ, 
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1162:
#line 8251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 28077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1163:
#line 8252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str) = default_key_cache_base; }
#line 28083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1164:
#line 8257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_PRELOAD_KEYS;
            lex->alter_info.reset();
          }
#line 28093 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1165:
#line 8263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1170:
#line 8278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1171:
#line 8288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-3].table), NULL, (yyvsp[0].num), TL_READ,
                                           MDL_SHARED_READ,
                                           Select->pop_index_hints()))
              MYSQL_YYABORT;
          }
#line 28121 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1172:
#line 8298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->alter_info.flags|= Alter_info::ALTER_ADMIN_PARTITION;
          }
#line 28129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1174:
#line 8305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->select_lex.alloc_index_hints(thd);
            Select->set_index_hint_type(INDEX_HINT_USE, 
                                        INDEX_HINT_MASK_ALL);
          }
#line 28139 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1176:
#line 8314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 28145 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1178:
#line 8320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 28151 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1179:
#line 8321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_OPTION_IGNORE_LEAVES; }
#line 28157 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1180:
#line 8331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SELECT;
          }
#line 28166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1183:
#line 8345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
#line 28175 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1185:
#line 8355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (setup_select_in_parentheses(Lex))
              MYSQL_YYABORT;
          }
#line 28184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1187:
#line 8364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 28204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1189:
#line 8383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 28216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1190:
#line 8391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 28224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1192:
#line 8398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1197:
#line 8408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->context.table_list=
              Select->context.first_name_resolution_table=
                Select->table_list.first;
          }
#line 28240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1200:
#line 8423 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Select->options & SELECT_DISTINCT && Select->options & SELECT_ALL)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "ALL", "DISTINCT");
              MYSQL_YYABORT;
            }
          }
#line 28252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1204:
#line 8440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_CACHE", "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_NO_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=0;
              Lex->select_lex.options&= ~OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_NO_CACHE;
            }
          }
#line 28284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1205:
#line 8468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* 
              Allow this flag only on the first top-level SELECT statement, if
              SQL_NO_CACHE wasn't specified, and only once per query.
             */
            if (Lex->current_select != &Lex->select_lex)
            {
              my_error(ER_CANT_USE_OPTION_HERE, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }         
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_NO_CACHE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "SQL_NO_CACHE", "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else if (Lex->select_lex.sql_cache == SELECT_LEX::SQL_CACHE)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SQL_CACHE");
              MYSQL_YYABORT;
            }
            else
            {
              Lex->safe_to_cache_query=1;
              Lex->select_lex.options|= OPTION_TO_QUERY_CACHE;
              Lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE;
            }
          }
#line 28316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1207:
#line 8500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_WRITE;
            lex->current_select->set_lock_for_tables(TL_WRITE);
            lex->safe_to_cache_query=0;
          }
#line 28327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1208:
#line 8507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->lock_type= TL_READ_WITH_SHARED_LOCKS;
            lex->current_select->
              set_lock_for_tables(TL_READ_WITH_SHARED_LOCKS);
            lex->safe_to_cache_query=0;
          }
#line 28339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1211:
#line 8520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root)
                          Item_field(&thd->lex->current_select->context,
                                     NULL, NULL, "*");
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_item_to_list(thd, item))
              MYSQL_YYABORT;
            (thd->lex->current_select->with_wild)++;
          }
#line 28354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1212:
#line 8534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
          }
#line 28363 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1213:
#line 8539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT((yyvsp[-3].simple_string) < (yyvsp[-1].simple_string));

            if (add_item_to_list(thd, (yyvsp[-2].item)))
              MYSQL_YYABORT;
            if ((yyvsp[0].lex_str).str)
            {
              if (Lex->sql_command == SQLCOM_CREATE_VIEW &&
                  check_column_name((yyvsp[0].lex_str).str))
              {
                my_error(ER_WRONG_COLUMN_NAME, MYF(0), (yyvsp[0].lex_str).str);
                MYSQL_YYABORT;
              }
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            else if (!(yyvsp[-2].item)->name)
            {
              (yyvsp[-2].item)->set_name((yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            }
          }
#line 28389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1214:
#line 8563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_start();
          }
#line 28397 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1215:
#line 8569 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (char*) YYLIP->get_cpp_tok_end();
          }
#line 28405 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1216:
#line 8575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=null_lex_str;}
#line 28411 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1217:
#line 8576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28417 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1218:
#line 8577 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1219:
#line 8578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1220:
#line 8579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 28435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1221:
#line 8583 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 28441 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1222:
#line 8584 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= NOT_FIXED_DEC;  }
#line 28447 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1223:
#line 8585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 28453 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1224:
#line 8589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 28459 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1225:
#line 8590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;  }
#line 28465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1226:
#line 8591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].ulong_num); }
#line 28471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1227:
#line 8595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28477 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1228:
#line 8596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 28483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1229:
#line 8602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Design notes:
              Do not use a manually maintained stack like thd->lex->xxx_list,
              but use the internal bison stack ($$, $1 and $3) instead.
              Using the bison stack is:
              - more robust to changes in the grammar,
              - guaranteed to be in sync with the parser state,
              - better for performances (no memory allocation).
            */
            Item_cond_or *item1;
            Item_cond_or *item3;
            if (is_cond_or((yyvsp[-2].item)))
            {
              item1= (Item_cond_or*) (yyvsp[-2].item);
              if (is_cond_or((yyvsp[0].item)))
              {
                item3= (Item_cond_or*) (yyvsp[0].item);
                /*
                  (X1 OR X2) OR (Y1 OR Y2) ==> OR (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 OR X2) OR Y ==> OR (X1, X2, Y)
                */
                item1->add((yyvsp[0].item));
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_or((yyvsp[0].item)))
            {
              item3= (Item_cond_or*) (yyvsp[0].item);
              /*
                X OR (Y1 OR Y2) ==> OR (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item));
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X OR Y */
              (yyval.item) = new (thd->mem_root) Item_cond_or((yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1230:
#line 8653 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* XOR is a proprietary extension */
            (yyval.item) = new (thd->mem_root) Item_func_xor((yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1231:
#line 8660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* See comments in rule expr: expr or expr */
            Item_cond_and *item1;
            Item_cond_and *item3;
            if (is_cond_and((yyvsp[-2].item)))
            {
              item1= (Item_cond_and*) (yyvsp[-2].item);
              if (is_cond_and((yyvsp[0].item)))
              {
                item3= (Item_cond_and*) (yyvsp[0].item);
                /*
                  (X1 AND X2) AND (Y1 AND Y2) ==> AND (X1, X2, Y1, Y2)
                */
                item3->add_at_head(item1->argument_list());
                (yyval.item) = (yyvsp[0].item);
              }
              else
              {
                /*
                  (X1 AND X2) AND Y ==> AND (X1, X2, Y)
                */
                item1->add((yyvsp[0].item));
                (yyval.item) = (yyvsp[-2].item);
              }
            }
            else if (is_cond_and((yyvsp[0].item)))
            {
              item3= (Item_cond_and*) (yyvsp[0].item);
              /*
                X AND (Y1 AND Y2) ==> AND (X, Y1, Y2)
              */
              item3->add_at_head((yyvsp[-2].item));
              (yyval.item) = (yyvsp[0].item);
            }
            else
            {
              /* X AND Y */
              (yyval.item) = new (thd->mem_root) Item_cond_and((yyvsp[-2].item), (yyvsp[0].item));
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 28596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1232:
#line 8703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1233:
#line 8709 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_istrue((yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1234:
#line 8715 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnottrue((yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1235:
#line 8721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isfalse((yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1236:
#line 8727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotfalse((yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28646 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1237:
#line 8733 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28656 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1238:
#line 8739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1240:
#line 8749 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnull((yyvsp[-2].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1241:
#line 8755 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_isnotnull((yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1242:
#line 8761 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_equal((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1243:
#line 8767 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (*(yyvsp[-1].boolfunc2creator))(0)->create((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1244:
#line 8773 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= all_any_subquery_creator((yyvsp[-5].item), (yyvsp[-4].boolfunc2creator), (yyvsp[-3].num), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1246:
#line 8783 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_in_subselect((yyvsp[-4].item), (yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1247:
#line 8789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_in_subselect((yyvsp[-5].item), (yyvsp[-1].select_lex));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28739 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1248:
#line 8798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-4].item), true, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28749 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1249:
#line 8804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item));
            (yyvsp[-1].item_list)->push_front((yyvsp[-6].item));
            (yyval.item)= new (thd->mem_root) Item_func_in(*(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28761 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1250:
#line 8812 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= handle_sql2003_note184_exception(thd, (yyvsp[-5].item), false, (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1251:
#line 8818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item));
            (yyvsp[-1].item_list)->push_front((yyvsp[-7].item));
            Item_func_in *item = new (thd->mem_root) Item_func_in(*(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
#line 28785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1252:
#line 8828 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_between((yyvsp[-4].item),(yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1253:
#line 8834 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_between *item;
            item= new (thd->mem_root) Item_func_between((yyvsp[-5].item),(yyvsp[-2].item),(yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            item->negate();
            (yyval.item)= item;
          }
#line 28808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1254:
#line 8843 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item1= new (thd->mem_root) Item_func_soundex((yyvsp[-3].item));
            Item *item4= new (thd->mem_root) Item_func_soundex((yyvsp[0].item));
            if ((item1 == NULL) || (item4 == NULL))
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_eq(item1, item4);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1255:
#line 8853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_like((yyvsp[-3].item),(yyvsp[-1].item),(yyvsp[0].item),Lex->escape_used);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1256:
#line 8859 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_like((yyvsp[-4].item),(yyvsp[-1].item),(yyvsp[0].item),
                                                             Lex->escape_used);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_not(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1257:
#line 8869 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_regex((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1258:
#line 8875 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_func_regex((yyvsp[-3].item),(yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= negate_expression(thd, item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1260:
#line 8888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_or((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1261:
#line 8894 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_and((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1262:
#line 8900 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_left((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28899 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1263:
#line 8906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_shift_right((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1264:
#line 8912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_plus((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28919 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1265:
#line 8918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minus((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1266:
#line 8924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-4].item),(yyvsp[-1].item),(yyvsp[0].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1267:
#line 8930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-4].item),(yyvsp[-1].item),(yyvsp[0].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28949 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1268:
#line 8936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mul((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28959 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1269:
#line 8942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_div((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1270:
#line 8948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1271:
#line 8954 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_int_div((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1272:
#line 8960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_mod((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 28999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1273:
#line 8966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_xor((yyvsp[-2].item),(yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29009 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1283:
#line 8995 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_eq_creator; }
#line 29015 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1284:
#line 8996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ge_creator; }
#line 29021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1285:
#line 8997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_gt_creator; }
#line 29027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1286:
#line 8998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_le_creator; }
#line 29033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1287:
#line 8999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_lt_creator; }
#line 29039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1288:
#line 9000 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.boolfunc2creator) = &comp_ne_creator; }
#line 29045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1289:
#line 9004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 29051 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1290:
#line 9005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 29057 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1291:
#line 9010 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
	    (yyval.num)= DYN_COL_NULL; /* automatic type */
            lex->charset= NULL;
            lex->length= lex->dec= 0;
	  }
#line 29068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1292:
#line 9016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[0].num); }
#line 29074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1293:
#line 9021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_INT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1294:
#line 9028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_UINT;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1295:
#line 9035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29107 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1296:
#line 9042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1297:
#line 9049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DOUBLE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1298:
#line 9056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= DYN_COL_DECIMAL;
            Lex->charset= NULL;
          }
#line 29138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1299:
#line 9061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->length= lex->dec= 0;
          }
#line 29148 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1300:
#line 9067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_STRING;
            lex->charset= national_charset_info;
            lex->length= lex->dec= 0;
          }
#line 29159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1301:
#line 9074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATE;
            lex->charset= NULL;
            lex->length= lex->dec= 0;
          }
#line 29170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1302:
#line 9081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_TIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
#line 29182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1303:
#line 9089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.num)= DYN_COL_DATETIME;
            lex->charset= NULL;
            lex->dec= lex->length;
            lex->length= 0;
          }
#line 29194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1304:
#line 9100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
     LEX *lex= Lex;
     (yyval.dyncol_def)= (DYNCALL_CREATE_DEF *)
       alloc_root(thd->mem_root, sizeof(DYNCALL_CREATE_DEF));
     if ((yyval.dyncol_def) == NULL)
       MYSQL_YYABORT;
     (yyval.dyncol_def)->key= (yyvsp[-3].item);
     (yyval.dyncol_def)->value= (yyvsp[-1].item);
     (yyval.dyncol_def)->type= (DYNAMIC_COLUMN_TYPE)(yyvsp[0].num);
     (yyval.dyncol_def)->cs= lex->charset;
     if (lex->length)
       (yyval.dyncol_def)->len= strtoul(lex->length, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
     if (lex->dec)
       (yyval.dyncol_def)->frac= strtoul(lex->dec, NULL, 10);
     else
       (yyval.dyncol_def)->len= 0;
   }
#line 29218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1305:
#line 9122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyval.dyncol_def_list)= new (thd->mem_root) List<DYNCALL_CREATE_DEF>;
         if ((yyval.dyncol_def_list) == NULL)
           MYSQL_YYABORT;
         (yyval.dyncol_def_list)->push_back((yyvsp[0].dyncol_def));
       }
#line 29229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1306:
#line 9129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
         (yyvsp[-2].dyncol_def_list)->push_back((yyvsp[0].dyncol_def));
         (yyval.dyncol_def_list)= (yyvsp[-2].dyncol_def_list);
       }
#line 29238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1312:
#line 9142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1= new (thd->mem_root) Item_string((yyvsp[0].lex_str).str,
                                                      (yyvsp[0].lex_str).length,
                                                      thd->charset());
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_set_collation((yyvsp[-2].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1317:
#line 9157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_concat((yyvsp[-2].item), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1318:
#line 9163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 29271 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1319:
#line 9167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_neg((yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1320:
#line 9173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_bit_neg((yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1321:
#line 9179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= negate_expression(thd, (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1322:
#line 9185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.item)= new (thd->mem_root) Item_singlerow_subselect((yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29311 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1323:
#line 9191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[-1].item); }
#line 29317 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1324:
#line 9193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1325:
#line 9200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item));
            (yyval.item)= new (thd->mem_root) Item_row(*(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29339 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1326:
#line 9207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_exists_subselect((yyvsp[-1].select_lex));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29349 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1327:
#line 9213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= NULL;
            /*
              If "expr" is reasonably short pure ASCII string literal,
              try to parse known ODBC style date, time or timestamp literals,
              e.g:
              SELECT {d'2001-01-01'};
              SELECT {t'10:20:30'};
              SELECT {ts'2001-01-01 10:20:30'};
            */
            if ((yyvsp[-1].item)->type() == Item::STRING_ITEM)
            {
              Item_string *item= (Item_string *) (yyvsp[-1].item);
              enum_field_types type= item->odbc_temporal_literal_type(&(yyvsp[-2].lex_str));
              if (type != MYSQL_TYPE_STRING)
              {
                (yyval.item)= create_temporal_literal(thd, item->val_str(NULL),
                                            type, false);
              }
            }
            if ((yyval.item) == NULL)
              (yyval.item)= (yyvsp[-1].item);
          }
#line 29377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1328:
#line 9237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-5].item_list)->push_front((yyvsp[-2].item));
            Item_func_match *i1= new (thd->mem_root) Item_func_match(*(yyvsp[-5].item_list), (yyvsp[-1].num));
            if (i1 == NULL)
              MYSQL_YYABORT;
            Select->add_ftfunc_to_list(i1);
            (yyval.item)= i1;
          }
#line 29390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1329:
#line 9246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[0].item), ITEM_CAST_CHAR, NULL, NULL,
                                 &my_charset_bin);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29401 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1330:
#line 9253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].cast_type), lex->length, lex->dec,
                                 lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29413 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1331:
#line 9261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_case(* (yyvsp[-2].item_list), (yyvsp[-3].item), (yyvsp[-1].item) );
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29423 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1332:
#line 9267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_cast(thd, (yyvsp[-3].item), (yyvsp[-1].cast_type), Lex->length, Lex->dec,
                                 Lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29434 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1333:
#line 9274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_conv_charset((yyvsp[-3].item),(yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1334:
#line 9280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].item)->is_splocal())
            {
              Item_splocal *il= static_cast<Item_splocal *>((yyvsp[-1].item));

              my_error(ER_WRONG_COLUMN_NAME, MYF(0), il->my_name()->str);
              MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context(),
                                                         (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1335:
#line 9294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_insert_value(Lex->current_context(),
                                                        (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1336:
#line 9302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[0].item),(yyvsp[-3].item),(yyvsp[-2].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29483 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1337:
#line 9317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29493 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1338:
#line 9323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_char(*(yyvsp[-3].item_list), (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1339:
#line 9329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_user(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 29515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1340:
#line 9337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_current_role(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 29527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1341:
#line 9345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_typecast((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29537 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1342:
#line 9351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dayofmonth((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1343:
#line 9357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_hour((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1344:
#line 9363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_insert((yyvsp[-7].item),(yyvsp[-5].item),(yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1345:
#line 9369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            List<Item> *list= new (thd->mem_root) List<Item>;
            if (list == NULL)
              MYSQL_YYABORT;
            list->push_front((yyvsp[-1].item));
            list->push_front((yyvsp[-3].item));
            Item_row *item= new (thd->mem_root) Item_row(*list);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1346:
#line 9383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-1].item_list)->push_front((yyvsp[-3].item));
            (yyvsp[-1].item_list)->push_front((yyvsp[-5].item));
            Item_row *item= new (thd->mem_root) Item_row(*(yyvsp[-1].item_list));
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_interval(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1347:
#line 9394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_left((yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1348:
#line 9400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_minute((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29620 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1349:
#line 9406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_month((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1350:
#line 9412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_right((yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1351:
#line 9418 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_second((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29650 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1352:
#line 9424 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_time_typecast((yyvsp[-1].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1353:
#line 9430 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_datetime_typecast((yyvsp[-1].item), AUTO_SEC_PART_DIGITS);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1354:
#line 9436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_add_time((yyvsp[-3].item), (yyvsp[-1].item), 1, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1355:
#line 9442 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1356:
#line 9448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[-1].item),(yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1357:
#line 9454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[-1].item),(yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1358:
#line 9460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[-1].item),(yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1359:
#line 9466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ltrim((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1360:
#line 9472 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_rtrim((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29740 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1361:
#line 9478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1362:
#line 9484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_trim((yyvsp[-1].item),(yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29760 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1363:
#line 9490 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_user();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query=0;
          }
#line 29772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1364:
#line 9498 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_year((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29782 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1365:
#line 9519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29793 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1366:
#line 9526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29803 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1367:
#line 9532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_local();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1368:
#line 9539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_local((yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29825 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1369:
#line 9547 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-5].item),(yyvsp[-2].item),(yyvsp[-1].interval),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1370:
#line 9554 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-5].item),(yyvsp[-2].item),(yyvsp[-1].interval),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29845 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1371:
#line 9560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_extract( (yyvsp[-3].interval), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29855 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1372:
#line 9566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_format((yyvsp[-3].date_time_type), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29865 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1373:
#line 9572 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1374:
#line 9579 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item) = new (thd->mem_root) Item_func_locate((yyvsp[-1].item),(yyvsp[-3].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1375:
#line 9585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-3].item), (yyvsp[-1].item),
                                                             INTERVAL_DAY, 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1376:
#line 9592 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-5].item), (yyvsp[-2].item), (yyvsp[-1].interval), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29907 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1377:
#line 9598 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[-5].item),(yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29917 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1378:
#line 9604 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1379:
#line 9610 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[-5].item),(yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1380:
#line 9616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_substr((yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1381:
#line 9622 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Unlike other time-related functions, SYSDATE() is
              replication-unsafe because it is not affected by the
              TIMESTAMP variable.  It is unsafe even if
              sysdate_is_now=1, because the slave may have
              sysdate_is_now=0.
            */
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            if (global_system_variables.sysdate_is_now == 0)
              (yyval.item)= new (thd->mem_root) Item_func_sysdate_local((yyvsp[0].num));
            else
              (yyval.item)= new (thd->mem_root) Item_func_now_local((yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 29969 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1382:
#line 9640 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_date_add_interval((yyvsp[-1].item),(yyvsp[-3].item),(yyvsp[-5].interval_time_st),0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29979 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1383:
#line 9646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_timestamp_diff((yyvsp[-3].item),(yyvsp[-1].item),(yyvsp[-5].interval_time_st));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 29989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1384:
#line 9652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curdate_utc();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1385:
#line 9659 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_curtime_utc((yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1386:
#line 9666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_now_utc((yyvsp[0].num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30022 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1387:
#line 9674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_add(thd, (yyvsp[-3].item), *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1388:
#line 9681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_delete(thd, (yyvsp[-3].item), *(yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1389:
#line 9688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_dyncol_check((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1390:
#line 9695 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= create_func_dyncol_create(thd, *(yyvsp[-1].dyncol_def_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1391:
#line 9702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            (yyval.item)= create_func_dyncol_get(thd, (yyvsp[-5].item), (yyvsp[-3].item), (yyvsp[-1].cast_type),
                                        lex->length, lex->dec,
                                        lex->charset);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1392:
#line 9719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_ascii((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30085 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1393:
#line 9725 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_charset((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30095 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1394:
#line 9731 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_coalesce(* (yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1395:
#line 9737 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_collation((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30115 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1396:
#line 9743 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_database();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->safe_to_cache_query=0;
          }
#line 30126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1397:
#line 9750 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_if((yyvsp[-5].item),(yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30136 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1398:
#line 9756 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_last_value(* (yyvsp[-1].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1399:
#line 9762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_microsecond((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1400:
#line 9768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item) = new (thd->mem_root) Item_func_mod((yyvsp[-3].item), (yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1401:
#line 9774 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=  new (thd->mem_root) Item_func_old_password((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1402:
#line 9780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item* i1;
            if (thd->variables.old_passwords)
              i1= new (thd->mem_root) Item_func_old_password((yyvsp[-1].item));
            else
              i1= new (thd->mem_root) Item_func_password((yyvsp[-1].item));
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= i1;
          }
#line 30191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1403:
#line 9791 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item) = new (thd->mem_root) Item_func_quarter((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30201 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1404:
#line 9797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_repeat((yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1405:
#line 9803 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_replace((yyvsp[-5].item),(yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1406:
#line 9809 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_reverse((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1407:
#line 9815 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_row_count();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_FUNCTION);
            Lex->safe_to_cache_query= 0;
          }
#line 30243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1408:
#line 9823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_round((yyvsp[-3].item),(yyvsp[-1].item),1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30253 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1409:
#line 9829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *i1= new (thd->mem_root) Item_int((char*) "0",
                                           thd->variables.default_week_format,
                                                   1);
            if (i1 == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[-1].item), i1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1410:
#line 9840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_week((yyvsp[-3].item),(yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1411:
#line 9846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[-2].item), 0, 0, (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1412:
#line 9852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string((yyvsp[-5].item), 0, (yyvsp[-2].ulong_num),
                                        (yyvsp[-1].ulong_num) | MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1413:
#line 9860 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_char_typecast((yyvsp[-4].item), (yyvsp[-1].ulong_num), &my_charset_bin);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root)
                Item_func_weight_string(item, 0, (yyvsp[-1].ulong_num), MY_STRXFRM_PAD_WITH_SPACE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1414:
#line 9870 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_weight_string((yyvsp[-7].item), (yyvsp[-5].ulong_num), (yyvsp[-3].ulong_num), (yyvsp[-1].ulong_num));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1415:
#line 9876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_SPATIAL
            (yyval.item)= (yyvsp[0].item);
            /* $1 may be NULL, GEOM_NEW not tested for out of memory */
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
#else
            my_error(ER_FEATURE_DISABLED, MYF(0),
                     sym_group_geom.name, sym_group_geom.needed_define);
            MYSQL_YYABORT;
#endif
          }
#line 30341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1416:
#line 9892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_rel((yyvsp[-3].item), (yyvsp[-1].item),
                                               Item_func::SP_CONTAINS_FUNC));
          }
#line 30351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1417:
#line 9898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[-1].item_list),
                           Geometry::wkb_geometrycollection,
                           Geometry::wkb_point));
          }
#line 30362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1418:
#line 9905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[-1].item_list),
                           Geometry::wkb_linestring,
                           Geometry::wkb_point));
          }
#line 30373 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1419:
#line 9912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[-1].item_list),
                           Geometry::wkb_multilinestring,
                           Geometry::wkb_linestring));
          }
#line 30384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1420:
#line 9919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[-1].item_list),
                           Geometry::wkb_multipoint,
                           Geometry::wkb_point));
          }
#line 30395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1421:
#line 9926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[-1].item_list),
                           Geometry::wkb_multipolygon,
                           Geometry::wkb_polygon));
          }
#line 30406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1422:
#line 9933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd, Item_func_point((yyvsp[-3].item),(yyvsp[-1].item)));
          }
#line 30414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1423:
#line 9937 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= GEOM_NEW(thd,
                         Item_func_spatial_collection(* (yyvsp[-1].item_list),
                           Geometry::wkb_polygon,
                           Geometry::wkb_linestring));
          }
#line 30425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1424:
#line 9956 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
#ifdef HAVE_DLOPEN
            udf_func *udf= 0;
            LEX *lex= Lex;
            if (using_udf_functions &&
                (udf= find_udf((yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length)) &&
                udf->type == UDFTYPE_AGGREGATE)
            {
              if (lex->current_select->inc_in_sum_expr())
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
            }
            /* Temporary placing the result of find_udf in $3 */
            (yyval.udf)= udf;
#endif
          }
#line 30448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1425:
#line 9975 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_func *builder;
            Item *item= NULL;

            if (check_routine_name(&(yyvsp[-4].lex_str)))
            {
              MYSQL_YYABORT;
            }

            /*
              Implementation note:
              names are resolved with the following order:
              - MySQL native functions,
              - User Defined Functions,
              - Stored Functions (assuming the current <use> database)

              This will be revised with WL#2128 (SQL PATH)
            */
            builder= find_native_function_builder(thd, (yyvsp[-4].lex_str));
            if (builder)
            {
              item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
            }
            else
            {
#ifdef HAVE_DLOPEN
              /* Retrieving the result of find_udf */
              udf_func *udf= (yyvsp[-2].udf);

              if (udf)
              {
                if (udf->type == UDFTYPE_AGGREGATE)
                {
                  Select->in_sum_expr--;
                }

                item= Create_udf_func::s_singleton.create(thd, udf, (yyvsp[-1].item_list));
              }
              else
#endif
              {
                builder= find_qualified_function_builder(thd);
                DBUG_ASSERT(builder);
                item= builder->create_func(thd, (yyvsp[-4].lex_str), (yyvsp[-1].item_list));
              }
            }

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 30505 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1426:
#line 10028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Create_qfunc *builder;
            Item *item= NULL;

            /*
              The following in practice calls:
              <code>Create_sp_func::create()</code>
              and builds a stored function.

              However, it's important to maintain the interface between the
              parser and the implementation in item_create.cc clean,
              since this will change with WL#2128 (SQL PATH):
              - INFORMATION_SCHEMA.version() is the SQL 99 syntax for the native
              function version(),
              - MySQL.version() is the SQL 2003 syntax for the native function
              version() (a vendor can specify any schema).
            */

            if (!(yyvsp[-5].lex_str).str || check_db_name(&(yyvsp[-5].lex_str)))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[-5].lex_str).str);
              MYSQL_YYABORT;
            }
            if (check_routine_name(&(yyvsp[-3].lex_str)))
            {
              MYSQL_YYABORT;
            }

            builder= find_qualified_function_builder(thd);
            DBUG_ASSERT(builder);
            item= builder->create_with_db(thd, (yyvsp[-5].lex_str), (yyvsp[-3].lex_str), true, (yyvsp[-1].item_list));

            if (! ((yyval.item)= item))
            {
              MYSQL_YYABORT;
            }
          }
#line 30547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1427:
#line 10069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (yyvsp[-1].num) | (yyvsp[0].num); }
#line 30553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1428:
#line 10071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_BOOL; }
#line 30559 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1429:
#line 10075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 30565 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1430:
#line 10076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_NL; }
#line 30571 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1431:
#line 10080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0;         }
#line 30577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1432:
#line 10081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= FT_EXPAND; }
#line 30583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1433:
#line 10085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 30589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1434:
#line 10086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 30595 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1435:
#line 10091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item));
          }
#line 30606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1436:
#line 10098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item));
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 30615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1437:
#line 10106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
             Use Item::name as a storage for the attribute value of user
             defined function argument. It is safe to use Item::name
             because the syntax will not allow having an explicit name here.
             See WL#1017 re. udf attributes.
            */
            if ((yyvsp[0].lex_str).str)
            {
              (yyvsp[-2].item)->is_autogenerated_name= FALSE;
              (yyvsp[-2].item)->set_name((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, system_charset_info);
            }
            /* 
               A field has to have its proper name in order for name
               resolution to work, something we are only guaranteed if we
               parse it out. If we hijack the input stream with
               remember_name we may get quoted or escaped names.
            */
            else if ((yyvsp[-2].item)->type() != Item::FIELD_ITEM &&
                     (yyvsp[-2].item)->type() != Item::REF_ITEM /* For HAVING */ )
              (yyvsp[-2].item)->set_name((yyvsp[-3].simple_string), (uint) ((yyvsp[-1].simple_string) - (yyvsp[-3].simple_string)), thd->charset());
            (yyval.item)= (yyvsp[-2].item);
          }
#line 30643 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1438:
#line 10133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1439:
#line 10139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_avg((yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30663 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1440:
#line 10145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_and((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1441:
#line 10151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_or((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1442:
#line 10157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_xor((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1443:
#line 10163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *item= new (thd->mem_root) Item_int((int32) 0L,1);
            if (item == NULL)
              MYSQL_YYABORT;
            (yyval.item)= new (thd->mem_root) Item_sum_count(item);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1444:
#line 10172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1445:
#line 10178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 30722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1446:
#line 10180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr--; }
#line 30728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1447:
#line 10182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_count(* (yyvsp[-2].item_list));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1448:
#line 10188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1449:
#line 10199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_min((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1450:
#line 10205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1451:
#line 10211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_max((yyvsp[-1].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1452:
#line 10217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30788 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1453:
#line 10223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[-1].item), 0);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1454:
#line 10229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_std((yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1455:
#line 10235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_variance((yyvsp[-1].item), 1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1456:
#line 10241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[-1].item), FALSE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1457:
#line 10247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_sum_sum((yyvsp[-1].item), TRUE);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 30838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1458:
#line 10253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->in_sum_expr++; }
#line 30844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1459:
#line 10257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->in_sum_expr--;
            (yyval.item)= new (thd->mem_root)
                  Item_func_group_concat(Lex->current_context(), (yyvsp[-5].num), (yyvsp[-3].item_list),
                                         sel->gorder_list, (yyvsp[-1].string));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            (yyvsp[-3].item_list)->empty();
            sel->gorder_list.empty();
          }
#line 30860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1460:
#line 10272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
          }
#line 30872 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1461:
#line 10280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= (yyvsp[0].item);
          }
#line 30880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1462:
#line 10287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            (yyval.item)= item= new (thd->mem_root) Item_func_set_user_var((yyvsp[-2].lex_str), (yyvsp[0].item));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            lex->set_var_list.push_back(item);
          }
#line 30894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1463:
#line 10297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_func_get_user_var((yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 30906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1464:
#line 10305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* disallow "SELECT @@global.global.variable" */
            if ((yyvsp[-1].lex_str).str && (yyvsp[0].lex_str).str && check_reserved_words(&(yyvsp[-1].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (!((yyval.item)= get_system_var(thd, (yyvsp[-2].var_type), (yyvsp[-1].lex_str), (yyvsp[0].lex_str))))
              MYSQL_YYABORT;
            if (!((Item_func_get_system_var*) (yyval.item))->is_written_to_binlog())
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_SYSTEM_VARIABLE);
          }
#line 30923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1465:
#line 10320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 30929 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1466:
#line 10321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 30935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1467:
#line 10326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String(",", 1, &my_charset_latin1);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 30945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1468:
#line 10331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string) = (yyvsp[0].string); }
#line 30951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1470:
#line 10337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
          }
#line 30968 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1472:
#line 10354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 30974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1473:
#line 10356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_gorder_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 30980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1474:
#line 10361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->current_select->inc_in_sum_expr())
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 30993 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1475:
#line 10370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->in_sum_expr--;
            (yyval.item)= (yyvsp[0].item);
          }
#line 31002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1476:
#line 10378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= &my_charset_bin; Lex->dec= 0; }
#line 31008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1477:
#line 10380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->dec= 0; }
#line 31014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1478:
#line 10382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_CHAR; Lex->charset= national_charset_info; Lex->dec=0; }
#line 31020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1479:
#line 10384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1480:
#line 10386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1481:
#line 10388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_SIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1482:
#line 10390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1483:
#line 10392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_UNSIGNED_INT; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1484:
#line 10394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DATE; Lex->charset= NULL; Lex->dec=Lex->length= (char*)0; }
#line 31056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1485:
#line 10396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cast_type)=ITEM_CAST_TIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
#line 31066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1486:
#line 10402 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.cast_type)=ITEM_CAST_DATETIME;
            LEX *lex= Lex;
            lex->charset= NULL; lex->dec= lex->length; lex->length= (char*)0;
           }
#line 31076 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1487:
#line 10408 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DECIMAL; Lex->charset= NULL; }
#line 31082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1488:
#line 10410 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->charset= NULL; Lex->length= Lex->dec= 0;}
#line 31088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1489:
#line 10412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.cast_type)=ITEM_CAST_DOUBLE; }
#line 31094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1490:
#line 10415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= NULL; }
#line 31100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1491:
#line 10416 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list);}
#line 31106 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1492:
#line 10421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item));
          }
#line 31117 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1493:
#line 10428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item));
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 31126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1494:
#line 10435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[0].item_list); }
#line 31132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1495:
#line 10436 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item_list)= (yyvsp[-1].item_list); }
#line 31138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1496:
#line 10441 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new (thd->mem_root) List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[0].item));
          }
#line 31149 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1497:
#line 10448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-2].item_list)->push_back((yyvsp[0].item));
            (yyval.item_list)= (yyvsp[-2].item_list);
          }
#line 31158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1498:
#line 10455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 31164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1499:
#line 10456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 31170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1500:
#line 10460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= NULL; }
#line 31176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1501:
#line 10461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 31182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1502:
#line 10466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_list)= new List<Item>;
            if ((yyval.item_list) == NULL)
              MYSQL_YYABORT;
            (yyval.item_list)->push_back((yyvsp[-2].item));
            (yyval.item_list)->push_back((yyvsp[0].item));
          }
#line 31194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1503:
#line 10474 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[-4].item_list)->push_back((yyvsp[-2].item));
            (yyvsp[-4].item_list)->push_back((yyvsp[0].item));
            (yyval.item_list)= (yyvsp[-4].item_list);
          }
#line 31204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1504:
#line 10484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1505:
#line 10486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->nest_last_join(lex->thd)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 31223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1506:
#line 10497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyval.table_list)=(yyvsp[0].table_list)); }
#line 31229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1507:
#line 10508 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31235 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1508:
#line 10509 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[-1].table_list); }
#line 31241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1509:
#line 10515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.table_list)=(yyvsp[0].table_list); }
#line 31247 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1510:
#line 10517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
          }
#line 31255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1511:
#line 10537 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT_UNLESS((yyvsp[-2].table_list) && ((yyval.table_list)=(yyvsp[0].table_list))); (yyvsp[0].table_list)->straight=(yyvsp[-1].num); }
#line 31261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1512:
#line 10540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-3].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1513:
#line 10548 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	    (yyvsp[-3].table_list)->straight=(yyvsp[-4].num);
            add_join_on((yyvsp[-3].table_list),(yyvsp[0].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 31284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1514:
#line 10556 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && (yyvsp[-1].table_list));
          }
#line 31292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1515:
#line 10560 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
	    (yyvsp[-5].table_list)->straight=(yyvsp[-6].num);
            add_join_natural((yyvsp[-7].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
	    (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 31302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1516:
#line 10566 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-3].table_list) && ((yyval.table_list)=(yyvsp[0].table_list)));
	    (yyvsp[0].table_list)->straight=(yyvsp[-1].num);
            add_join_natural((yyvsp[-3].table_list),(yyvsp[0].table_list),NULL,Select);
          }
#line 31312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1517:
#line 10575 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1518:
#line 10583 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            add_join_on((yyvsp[-3].table_list),(yyvsp[0].item));
            Lex->pop_context();
            (yyvsp[-3].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[-3].table_list);
            Select->parsing_place= NO_MATTER;
          }
#line 31336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1519:
#line 10591 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 31344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1520:
#line 10595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            add_join_natural((yyvsp[-9].table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select); 
            (yyvsp[-5].table_list)->outer_join|=JOIN_TYPE_LEFT; 
            (yyval.table_list)=(yyvsp[-5].table_list); 
          }
#line 31354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1521:
#line 10601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[-5].table_list),(yyvsp[0].table_list),NULL,Select);
            (yyvsp[0].table_list)->outer_join|=JOIN_TYPE_LEFT;
            (yyval.table_list)=(yyvsp[0].table_list);
          }
#line 31365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1522:
#line 10611 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[-1].table_list));
            /* Change the current name resolution context to a local context. */
            if (push_new_name_resolution_context(thd, (yyvsp[-5].table_list), (yyvsp[-1].table_list)))
              MYSQL_YYABORT;
            Select->parsing_place= IN_ON;
          }
#line 31377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1523:
#line 10619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_on((yyval.table_list), (yyvsp[0].item));
            Lex->pop_context();
            Select->parsing_place= NO_MATTER;
          }
#line 31390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1524:
#line 10628 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].table_list) && (yyvsp[0].table_list));
          }
#line 31398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1525:
#line 10632 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
            add_join_natural((yyval.table_list),(yyvsp[-5].table_list),(yyvsp[-1].string_list),Select);
          }
#line 31409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1526:
#line 10639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-5].table_list) && (yyvsp[0].table_list));
            add_join_natural((yyvsp[0].table_list),(yyvsp[-5].table_list),NULL,Select);
            LEX *lex= Lex;
            if (!((yyval.table_list)= lex->current_select->convert_right_join()))
              MYSQL_YYABORT;
          }
#line 31421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1527:
#line 10650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31427 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1528:
#line 10651 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31433 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1529:
#line 10652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 1; }
#line 31439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1530:
#line 10656 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = (yyvsp[0].num); }
#line 31445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1531:
#line 10657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) = 0; }
#line 31451 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1532:
#line 10665 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string_list)= 0;}
#line 31457 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1534:
#line 10671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 31465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1535:
#line 10685 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->table_join_options= 0;
          }
#line 31474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1536:
#line 10690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.table_list)= Select->add_table_to_list(thd, (yyvsp[-3].table), (yyvsp[-1].lex_str_ptr),
                                                Select->get_table_join_options(),
                                                YYPS->m_lock_type,
                                                YYPS->m_mdl_type,
                                                Select->pop_index_hints(),
                                                (yyvsp[-2].string_list))))
              MYSQL_YYABORT;
            Select->add_joined_table((yyval.table_list));
          }
#line 31489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1537:
#line 10701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if ((yyvsp[-2].num))
            {
              if (sel->set_braces(1))
              {
                my_parse_error(ER(ER_SYNTAX_ERROR));
                MYSQL_YYABORT;
              }
              /* select in braces, can't contain global parameters */
              if (sel->master_unit()->fake_select_lex)
                sel->master_unit()->global_parameters=
                   sel->master_unit()->fake_select_lex;
            }
            if ((yyvsp[-1].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
            (yyval.table_list)= 0;
            /* incomplete derived tables return NULL, we must be
               nested in select_derived rule to be here. */
          }
#line 31515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1538:
#line 10741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Use $2 instead of Lex->current_select as derived table will
               alter value of Lex->current_select. */
            if (!((yyvsp[-2].table_list) || (yyvsp[0].lex_str_ptr)) && (yyvsp[-3].select_lex)->embedding &&
                !(yyvsp[-3].select_lex)->embedding->nested_join->join_list.elements)
            {
              /* we have a derived table ($3 == NULL) but no alias,
                 Since we are nested in further parentheses so we
                 can pass NULL to the outer level parentheses
                 Permits parsing of "((((select ...))) as xyz)" */
              (yyval.table_list)= 0;
            }
            else if (!(yyvsp[-2].table_list))
            {
              /* Handle case of derived table, alias may be NULL if there
                 are no outer parentheses, add_table_to_list() will throw
                 error in this case */
              LEX *lex=Lex;
              SELECT_LEX *sel= lex->current_select;
              SELECT_LEX_UNIT *unit= sel->master_unit();
              lex->current_select= sel= unit->outer_select();
              Table_ident *ti= new Table_ident(unit);
              if (ti == NULL)
                MYSQL_YYABORT;
              if (!((yyval.table_list)= sel->add_table_to_list(lex->thd,
                                               ti, (yyvsp[0].lex_str_ptr), 0,
                                               TL_READ, MDL_SHARED_READ)))

                MYSQL_YYABORT;
              sel->add_joined_table((yyval.table_list));
              lex->pop_context();
              lex->nest_level--;
            }
            /*else if (($3->select_lex &&
                      $3->select_lex->master_unit()->is_union() &&
                      ($3->select_lex->master_unit()->first_select() ==
                       $3->select_lex || !$3->lifted)) || $5)*/
            else if ((yyvsp[0].lex_str_ptr) != NULL)
            {
              /*
                Tables with or without joins within parentheses cannot
                have aliases, and we ruled out derived tables above.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            else
            {
              /* nested join: FROM (t1 JOIN t2 ...),
                 nest_level is the same as in the outer query */
              (yyval.table_list)= (yyvsp[-2].table_list);
            }
            /*
              Fields in derived table can be used in upper select in
              case of merge. We do not add HAVING fields because we do
              not merge such derived. We do not add union because
              also do not merge them
            */
            if ((yyval.table_list) && (yyval.table_list)->derived &&
                !(yyval.table_list)->derived->first_select()->next_select())
              (yyval.table_list)->select_lex->add_where_field((yyval.table_list)->derived->first_select());
          }
#line 31582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1539:
#line 10826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-1].table_list) && (yyvsp[0].is_not_empty))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 31594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1540:
#line 10836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 31603 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1541:
#line 10841 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
             */
            Lex->pop_context();
          }
#line 31615 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1542:
#line 10849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if ((yyvsp[-6].table_list) != NULL)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 31627 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1543:
#line 10861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX * sel= lex->current_select;
            if (lex->current_select->set_braces(0))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (sel->linkage == UNION_TYPE &&
                sel->master_unit()->first_select()->braces)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 31647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1544:
#line 10880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->linkage != UNION_TYPE)
              mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 31659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1545:
#line 10888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 31667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1547:
#line 10897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if ((yyvsp[0].select_lex)->init_nested_join(lex->thd))
              MYSQL_YYABORT;
          }
#line 31677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1548:
#line 10903 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            /* for normal joins, $3 != NULL and end_nested_join() != NULL,
               for derived tables, both must equal NULL */

            if (!((yyval.table_list)= (yyvsp[-2].select_lex)->end_nested_join(lex->thd)) && (yyvsp[0].table_list))
              MYSQL_YYABORT;
            if (!(yyvsp[0].table_list) && (yyval.table_list))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 31695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1549:
#line 10919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->derived_tables|= DERIVED_SUBQUERY;
            if (!lex->expr_allows_subselect ||
                lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE ||
                mysql_new_select(lex, 1))
              MYSQL_YYABORT;
            mysql_init_select(lex);
            lex->current_select->linkage= DERIVED_TABLE_TYPE;
            lex->current_select->parsing_place= SELECT_LIST;
          }
#line 31716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1550:
#line 10936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 31724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1552:
#line 10943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.select_lex)= Select; }
#line 31730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1553:
#line 10948 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (! lex->parsing_options.allows_derived)
            {
              my_error(ER_VIEW_SELECT_DERIVED, MYF(0));
              MYSQL_YYABORT;
            }

            SELECT_LEX *sel= lex->current_select;
            TABLE_LIST *embedding;
            if (!sel->embedding || sel->end_nested_join(lex->thd))
            {
              /* we are not in parentheses */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            embedding= Select->embedding;
            (yyval.num)= embedding &&
                !embedding->nested_join->join_list.elements;
            /* return true if we are deeply nested */
          }
#line 31757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1554:
#line 10973 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31763 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1555:
#line 10974 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1556:
#line 10979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= thd->variables.old_mode ?  INDEX_HINT_MASK_JOIN : INDEX_HINT_MASK_ALL; 
          }
#line 31777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1557:
#line 10982 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_JOIN;  }
#line 31783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1558:
#line 10983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_ORDER; }
#line 31789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1559:
#line 10984 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= INDEX_HINT_MASK_GROUP; }
#line 31795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1560:
#line 10988 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_FORCE; }
#line 31801 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1561:
#line 10989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.index_hint)= INDEX_HINT_IGNORE; }
#line 31807 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1562:
#line 10994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type((yyvsp[-2].index_hint), (yyvsp[0].num));
          }
#line 31815 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1564:
#line 10999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_index_hint_type(INDEX_HINT_USE, (yyvsp[0].num));
          }
#line 31823 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1569:
#line 11012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->alloc_index_hints(thd); }
#line 31829 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1571:
#line 11016 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {  Select->clear_index_hints(); }
#line 31835 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1573:
#line 11021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, NULL, 0); }
#line 31841 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1574:
#line 11022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31847 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1575:
#line 11027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length); }
#line 31853 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1576:
#line 11029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->add_index_hint(thd, (char *)"PRIMARY", 7); }
#line 31859 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1579:
#line 11039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.string_list)= new List<String>))
              MYSQL_YYABORT;
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyval.string_list)->push_back(s);
          }
#line 31874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1580:
#line 11050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *s= new (thd->mem_root) String((const char *) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (s == NULL)
              MYSQL_YYABORT;
            (yyvsp[-2].string_list)->push_back(s);
            (yyval.string_list)= (yyvsp[-2].string_list);
          }
#line 31888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1581:
#line 11062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 31894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1582:
#line 11063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_HOUR; }
#line 31900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1583:
#line 11064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MICROSECOND; }
#line 31906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1584:
#line 11065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_MINUTE; }
#line 31912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1585:
#line 11066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_DAY_SECOND; }
#line 31918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1586:
#line 11067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MICROSECOND; }
#line 31924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1587:
#line 11068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_MINUTE; }
#line 31930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1588:
#line 11069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_HOUR_SECOND; }
#line 31936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1589:
#line 11070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_MICROSECOND; }
#line 31942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1590:
#line 11071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_MINUTE_SECOND; }
#line 31948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1591:
#line 11072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_SECOND_MICROSECOND; }
#line 31954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1592:
#line 11073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval)=INTERVAL_YEAR_MONTH; }
#line 31960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1593:
#line 11077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_DAY; }
#line 31966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1594:
#line 11078 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_WEEK; }
#line 31972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1595:
#line 11079 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_HOUR; }
#line 31978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1596:
#line 11080 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MINUTE; }
#line 31984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1597:
#line 11081 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MONTH; }
#line 31990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1598:
#line 11082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_QUARTER; }
#line 31996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1599:
#line 11083 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_SECOND; }
#line 32002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1600:
#line 11084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_MICROSECOND; }
#line 32008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1601:
#line 11085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.interval_time_st)=INTERVAL_YEAR; }
#line 32014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1602:
#line 11089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATE;}
#line 32020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1603:
#line 11090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_TIME;}
#line 32026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1604:
#line 11091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 32032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1605:
#line 11092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.date_time_type)=MYSQL_TIMESTAMP_DATETIME;}
#line 32038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1609:
#line 11102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str_ptr)=0; }
#line 32044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1610:
#line 11104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str_ptr)= (LEX_STRING*) sql_memdup(&(yyvsp[0].lex_str),sizeof(LEX_STRING));
            if ((yyval.lex_str_ptr) == NULL)
              MYSQL_YYABORT;
          }
#line 32054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1613:
#line 11117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->where= 0; }
#line 32060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1614:
#line 11119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_WHERE;
          }
#line 32068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1615:
#line 11123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *select= Select;
            select->where= normalize_cond((yyvsp[0].item));
            select->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 32080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1617:
#line 11135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= IN_HAVING;
          }
#line 32088 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1618:
#line 11139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->having= normalize_cond((yyvsp[0].item));
            sel->parsing_place= NO_MATTER;
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 32100 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1619:
#line 11150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= TRUE;
            (yyval.item)= (yyvsp[0].item);
          }
#line 32109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1620:
#line 11155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->escape_used= FALSE;
            (yyval.item)= ((thd->variables.sql_mode & MODE_NO_BACKSLASH_ESCAPES) ?
                 new (thd->mem_root) Item_string_ascii("", 0) :
                 new (thd->mem_root) Item_string_ascii("\\", 1));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1623:
#line 11176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1624:
#line 11178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_group_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1625:
#line 11182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1626:
#line 11184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH CUBE' is reserved in the MySQL syntax, but not implemented,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH CUBE
              SQL-2003: GROUP BY ... CUBE(col1, col2, col3)
            */
            LEX *lex=Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH CUBE",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= CUBE_TYPE;
            my_error(ER_NOT_SUPPORTED_YET, MYF(0), "CUBE");
            MYSQL_YYABORT;
          }
#line 32164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1627:
#line 11204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              'WITH ROLLUP' is needed for backward compatibility,
              and cause LALR(2) conflicts.
              This syntax is not standard.
              MySQL syntax: GROUP BY col1, col2, col3 WITH ROLLUP
              SQL-2003: GROUP BY ... ROLLUP(col1, col2, col3)
            */
            LEX *lex= Lex;
            if (lex->current_select->linkage == GLOBAL_OPTIONS_TYPE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "WITH ROLLUP",
                       "global union parameters");
              MYSQL_YYABORT;
            }
            lex->current_select->olap= ROLLUP_TYPE;
          }
#line 32186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1631:
#line 11238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            bool ascending= ((yyvsp[0].num) == 1) ? true : false;
            if (add_order_to_list(thd, (yyvsp[-1].item), ascending))
              MYSQL_YYABORT;
          }
#line 32196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1634:
#line 11256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel-> master_unit();
            if (sel->linkage != GLOBAL_OPTIONS_TYPE &&
                sel->olap != UNSPECIFIED_OLAP_TYPE &&
                (sel->linkage != UNION_TYPE || sel->braces))
            {
              my_error(ER_WRONG_USAGE, MYF(0),
                       "CUBE/ROLLUP", "ORDER BY");
              MYSQL_YYABORT;
            }
            if (lex->sql_command != SQLCOM_ALTER_TABLE && !unit->fake_select_lex)
            {
              /*
                A query of the of the form (SELECT ...) ORDER BY order_list is
                executed in the same way as the query
                SELECT ... ORDER BY order_list
                unless the SELECT construct contains ORDER BY or LIMIT clauses.
                Otherwise we create a fake SELECT_LEX if it has not been created
                yet.
              */
              SELECT_LEX *first_sl= unit->first_select();
              if (!unit->is_union() &&
                  (first_sl->order_list.elements || 
                   first_sl->select_limit) &&            
                  unit->add_fake_select_lex(lex->thd))
                MYSQL_YYABORT;
            }
          }
#line 32231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1636:
#line 11291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1637:
#line 11293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { if (add_order_to_list(thd, (yyvsp[-1].item),(bool) (yyvsp[0].num))) MYSQL_YYABORT; }
#line 32243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1638:
#line 11297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =  1; }
#line 32249 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1639:
#line 11298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =1; }
#line 32255 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1640:
#line 11299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num) =0; }
#line 32261 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1641:
#line 11304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            SELECT_LEX *sel= lex->current_select;
            sel->offset_limit= 0;
            sel->select_limit= 0;
	    lex->limit_rows_examined= 0;
          }
#line 32273 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1642:
#line 11311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32279 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1643:
#line 11315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32285 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1644:
#line 11316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1645:
#line 11321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            if (!sel->select_limit->basic_const_item() ||
                sel->select_limit->val_int() > 0)
              Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1646:
#line 11328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1647:
#line 11332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
          }
#line 32318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1648:
#line 11339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= 0;
            sel->explicit_limit= 1;
          }
#line 32329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1649:
#line 11346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            sel->offset_limit= (yyvsp[-2].item);
            sel->explicit_limit= 1;
          }
#line 32340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1650:
#line 11353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[-2].item);
            sel->offset_limit= (yyvsp[0].item);
            sel->explicit_limit= 1;
          }
#line 32351 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1651:
#line 11363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Item_splocal *splocal;
          LEX *lex= thd->lex;
          Lex_input_stream *lip= & thd->m_parser_state->m_lip;
          sp_variable *spv;
          sp_pcontext *spc = lex->spcont;
          if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
          {
            splocal= new (thd->mem_root)
              Item_splocal((yyvsp[0].lex_str), spv->offset, spv->type,
                  lip->get_tok_start() - lex->sphead->m_tmp_query,
                  lip->get_ptr() - lip->get_tok_start());
            if (splocal == NULL)
              MYSQL_YYABORT;
#ifndef DBUG_OFF
            splocal->m_sp= lex->sphead;
#endif
            lex->safe_to_cache_query=0;
          }
          else
          {
            my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str);
            MYSQL_YYABORT;
          }
          if (splocal->type() != Item::INT_ITEM)
          {
            my_error(ER_WRONG_SPVAR_TYPE_IN_LIMIT, MYF(0));
            MYSQL_YYABORT;
          }
          splocal->limit_clause_param= TRUE;
          (yyval.item)= splocal;
        }
#line 32388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1652:
#line 11396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          ((Item_param *) (yyvsp[0].item))->limit_clause_param= TRUE;
        }
#line 32396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1653:
#line 11400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1654:
#line 11406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1655:
#line 11412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_uint((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 32426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1656:
#line 11421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex=Lex;
            lex->limit_rows_examined= (yyvsp[0].item);
          }
#line 32435 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1657:
#line 11428 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->current_select->select_limit= 0;
          }
#line 32444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1658:
#line 11433 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            sel->select_limit= (yyvsp[0].item);
            Lex->set_stmt_unsafe(LEX::BINLOG_STMT_UNSAFE_LIMIT);
            sel->explicit_limit= 1;
          }
#line 32455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1659:
#line 11439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
#line 32461 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1660:
#line 11440 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(ER(ER_SYNTAX_ERROR)); MYSQL_YYABORT; }
#line 32467 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1661:
#line 11444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= (int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1662:
#line 11445 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32479 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1663:
#line 11446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.num)= -(int) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1664:
#line 11450 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1665:
#line 11451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1666:
#line 11452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1667:
#line 11453 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32509 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1668:
#line 11454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32515 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1669:
#line 11455 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32521 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1670:
#line 11459 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1671:
#line 11460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulong_num)= (ulong) strtol((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1672:
#line 11461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1673:
#line 11462 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulong_num)= (ulong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1674:
#line 11463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 32551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1675:
#line 11467 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1676:
#line 11468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1677:
#line 11469 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1678:
#line 11470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1679:
#line 11471 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1680:
#line 11475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1681:
#line 11476 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1682:
#line 11477 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ulonglong_number)= strtoull((yyvsp[0].lex_str).str, (char**) 0, 16); }
#line 32599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1683:
#line 11478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { int error; (yyval.ulonglong_number)= (ulonglong) my_strtoll10((yyvsp[0].lex_str).str, (char**) 0, &error); }
#line 32605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1684:
#line 11479 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { MYSQL_YYABORT; }
#line 32611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1685:
#line 11484 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { my_parse_error(ER(ER_ONLY_INTEGERS_ALLOWED)); }
#line 32617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1688:
#line 11493 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= (yyvsp[0].ulong_num) != 0 ? HA_CHOICE_YES : HA_CHOICE_NO; }
#line 32623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1689:
#line 11494 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.choice)= HA_CHOICE_UNDEF; }
#line 32629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1691:
#line 11500 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            if (! lex->parsing_options.allows_select_procedure)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            if (&lex->select_lex != lex->current_select)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "PROCEDURE", "subquery");
              MYSQL_YYABORT;
            }
            lex->proc_list.elements=0;
            lex->proc_list.first=0;
            lex->proc_list.next= &lex->proc_list.first;
            Item_field *item= new (thd->mem_root)
                                Item_field(&lex->current_select->context,
                                           NULL, NULL, (yyvsp[0].lex_str).str);
            if (item == NULL)
              MYSQL_YYABORT;
            if (add_proc_to_list(lex->thd, item))
              MYSQL_YYABORT;
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);

            /*
              PROCEDURE CLAUSE cannot handle subquery as one of its parameter,
              so set expr_allows_subselect as false to disallow any subqueries
              further. Reset expr_allows_subselect back to true once the
              parameters are reduced.
            */
            Lex->expr_allows_subselect= false;
          }
#line 32668 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1692:
#line 11535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* Subqueries are allowed from now.*/
            Lex->expr_allows_subselect= true;
          }
#line 32677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1693:
#line 11542 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1694:
#line 11543 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1697:
#line 11553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_proc_to_list(thd, (yyvsp[-1].item)))
              MYSQL_YYABORT;
            if (!(yyvsp[-1].item)->name)
              (yyvsp[-1].item)->set_name((yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 32700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1698:
#line 11562 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe && (!(lex->result= new select_dumpvar())))
              MYSQL_YYABORT;
          }
#line 32710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1699:
#line 11568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1701:
#line 11573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32722 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1702:
#line 11578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->result) 
            {
              my_var *var= new my_var((yyvsp[0].lex_str),0,0,(enum_field_types)0);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
#line 32745 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1703:
#line 11597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            sp_variable *t;

            if (!lex->spcont || !(t=lex->spcont->find_variable((yyvsp[0].lex_str), false)))
            {
              my_error(ER_SP_UNDECLARED_VAR, MYF(0), (yyvsp[0].lex_str).str);
              MYSQL_YYABORT;
            }
            if (lex->result)
            {
              my_var *var= new my_var((yyvsp[0].lex_str),1,t->offset,t->type);
              if (var == NULL)
                MYSQL_YYABORT;
              ((select_dumpvar *)lex->result)->var_list.push_back(var);
#ifndef DBUG_OFF
              var->sp= lex->sphead;
#endif
            }
            else
            {
              /*
                The parser won't create select_result instance only
                if it's an EXPLAIN.
              */
              DBUG_ASSERT(lex->describe);
            }
          }
#line 32778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1704:
#line 11629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (! Lex->parsing_options.allows_select_into)
            {
              my_error(ER_VIEW_SELECT_CLAUSE, MYF(0), "INTO");
              MYSQL_YYABORT;
            }
          }
#line 32790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1706:
#line 11641 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
            if (!(lex->exchange= new sql_exchange((yyvsp[0].lex_str).str, 0)) ||
                !(lex->result= new select_export(lex->exchange)))
              MYSQL_YYABORT;
          }
#line 32802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1707:
#line 11649 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 32808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1709:
#line 11652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->describe)
            {
              lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
              if (!(lex->exchange= new sql_exchange((yyvsp[0].lex_str).str,1)))
                MYSQL_YYABORT;
              if (!(lex->result= new select_dump(lex->exchange)))
                MYSQL_YYABORT;
            }
          }
#line 32824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1710:
#line 11664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->uncacheable(UNCACHEABLE_SIDEEFFECT);
          }
#line 32832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1711:
#line 11675 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DO;
            mysql_init_select(lex);
          }
#line 32842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1712:
#line 11681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->insert_list= (yyvsp[0].item_list);
          }
#line 32850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1713:
#line 11692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_DROP_TABLE;
            lex->drop_temporary= (yyvsp[-2].num);
            lex->check_exists= (yyvsp[0].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 32863 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1714:
#line 11701 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1715:
#line 11702 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 32875 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1716:
#line 11703 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Alter_drop *ad= new Alter_drop(Alter_drop::KEY, (yyvsp[-3].lex_str).str, (yyvsp[-4].num));
            if (ad == NULL)
              MYSQL_YYABORT;
            lex->sql_command= SQLCOM_DROP_INDEX;
            lex->alter_info.reset();
            lex->alter_info.flags= Alter_info::ALTER_DROP_INDEX;
            lex->alter_info.drop_list.push_back(ad);
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[-1].table), NULL,
                                                        TL_OPTION_UPDATING,
                                                        TL_READ_NO_INSERT,
                                                        MDL_SHARED_UPGRADABLE))
              MYSQL_YYABORT;
          }
#line 32895 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1717:
#line 11719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_DROP_DB;
            lex->check_exists=(yyvsp[-1].num);
            lex->name= (yyvsp[0].lex_str);
          }
#line 32906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1718:
#line 11726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_name *spname;
            if ((yyvsp[-2].lex_str).str && check_db_name(&(yyvsp[-2].lex_str)))
            {
               my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[-2].lex_str).str);
               MYSQL_YYABORT;
            }
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[-3].num);
            spname= new sp_name((yyvsp[-2].lex_str), (yyvsp[0].lex_str), true);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 32932 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1719:
#line 11748 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_STRING db= {0, 0};
            sp_name *spname;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            if (thd->db && lex->copy_db_to(&db.str, &db.length))
              MYSQL_YYABORT;
            lex->sql_command = SQLCOM_DROP_FUNCTION;
            lex->check_exists= (yyvsp[-1].num);
            spname= new sp_name(db, (yyvsp[0].lex_str), false);
            if (spname == NULL)
              MYSQL_YYABORT;
            spname->init_qname(thd);
            lex->spname= spname;
          }
#line 32956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1720:
#line 11768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_NO_DROP_SP, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_DROP_PROCEDURE;
            lex->check_exists= (yyvsp[-1].num);
            lex->spname= (yyvsp[0].spname);
          }
#line 32972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1721:
#line 11780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_DROP_USER;
          }
#line 32980 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1722:
#line 11784 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_DROP_ROLE;
          }
#line 32988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1723:
#line 11788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_VIEW;
            lex->check_exists= (yyvsp[0].num);
            YYPS->m_lock_type= TL_UNLOCK;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1724:
#line 11796 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1725:
#line 11798 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->check_exists= (yyvsp[-1].num);
            Lex->spname= (yyvsp[0].spname);
            Lex->sql_command = SQLCOM_DROP_EVENT;
          }
#line 33016 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1726:
#line 11804 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DROP_TRIGGER;
            lex->check_exists= (yyvsp[-1].num);
            lex->spname= (yyvsp[0].spname);
          }
#line 33027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1727:
#line 11811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_TABLESPACE;
          }
#line 33036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1728:
#line 11816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->alter_tablespace_info->ts_cmd_type= DROP_LOGFILE_GROUP;
          }
#line 33045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1729:
#line 11821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_DROP_SERVER;
            Lex->check_exists= (yyvsp[-1].num);
            Lex->server_options.server_name= (yyvsp[0].lex_str).str;
            Lex->server_options.server_name_length= (yyvsp[0].lex_str).length;
          }
#line 33056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1732:
#line 11836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1733:
#line 11847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL,
                                           TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
          }
#line 33082 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1736:
#line 11865 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[0].table), NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33094 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1737:
#line 11876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= FALSE;
          (yyval.num)= 0;
        }
#line 33103 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1738:
#line 11881 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->check_exists= TRUE;
          (yyval.num)= 1;
        }
#line 33112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1739:
#line 11888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 33118 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1740:
#line 11889 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 33124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1741:
#line 11897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSERT;
            lex->duplicates= DUP_ERROR; 
            mysql_init_select(lex);
          }
#line 33135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1742:
#line 11905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-2].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
#line 33144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1743:
#line 11910 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1744:
#line 11915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_REPLACE;
            lex->duplicates= DUP_REPLACE;
            mysql_init_select(lex);
          }
#line 33161 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1745:
#line 11922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->set_lock_for_tables((yyvsp[-1].lock_type));
            Lex->current_select= &Lex->select_lex;
          }
#line 33170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1746:
#line 11927 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1747:
#line 11932 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              If it is SP we do not allow insert optimisation when result of
              insert visible only after the table unlocking but everyone can
              read table.
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 33189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1748:
#line 11940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 33195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1749:
#line 11942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 33207 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1750:
#line 11949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE; }
#line 33213 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1751:
#line 11953 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= (yyvsp[0].lock_type); }
#line 33219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1752:
#line 11955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->keyword_delayed_begin_offset= (uint)(YYLIP->get_tok_start() -
                                                    thd->query());
          Lex->keyword_delayed_end_offset= Lex->keyword_delayed_begin_offset +
                                           YYLIP->yyLength() + 1;
          (yyval.lock_type)= TL_WRITE_DELAYED;
        }
#line 33231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1753:
#line 11965 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1754:
#line 11966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33243 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1755:
#line 11971 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->field_list.empty();
            lex->many_values.empty();
            lex->insert_list=0;
          }
#line 33254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1756:
#line 11979 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1757:
#line 11980 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1758:
#line 11981 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1759:
#line 11983 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!(lex->insert_list = new List_item) ||
                lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
#line 33283 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1761:
#line 11993 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item)); }
#line 33289 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1762:
#line 11994 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item)); }
#line 33295 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1763:
#line 11998 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33301 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1764:
#line 11999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33307 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1765:
#line 12001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(0);}
#line 33313 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1766:
#line 12002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33319 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1767:
#line 12004 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->set_braces(1);}
#line 33325 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1768:
#line 12005 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33331 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1773:
#line 12020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->field_list.push_back((yyvsp[-2].item)) ||
                lex->insert_list->push_back((yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1774:
#line 12029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1775:
#line 12030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1776:
#line 12034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1777:
#line 12035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1778:
#line 12040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              if (!(Lex->insert_list = new List_item))
                MYSQL_YYABORT;
          }
#line 33375 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1779:
#line 12045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->many_values.push_back(lex->insert_list))
              MYSQL_YYABORT;
          }
#line 33385 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1780:
#line 12053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33391 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1782:
#line 12059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1783:
#line 12064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->insert_list->push_back((yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33409 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1784:
#line 12071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item);}
#line 33415 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1785:
#line 12073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_default_value(Lex->current_context());
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 33425 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1787:
#line 12082 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates= DUP_UPDATE; }
#line 33431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1789:
#line 12090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->sql_command= SQLCOM_UPDATE;
            lex->duplicates= DUP_ERROR; 
          }
#line 33442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1790:
#line 12098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->select_lex.table_list.elements > 1)
              lex->sql_command= SQLCOM_UPDATE_MULTI;
            else if (lex->select_lex.get_table_list()->derived)
            {
              /* it is single table update and it is update of derived table */
              my_error(ER_NON_UPDATABLE_TABLE, MYF(0),
                       lex->select_lex.get_table_list()->alias, "UPDATE");
              MYSQL_YYABORT;
            }
            /*
              In case of multi-update setting write lock for all tables may
              be too pessimistic. We will decrease lock level if possible in
              mysql_multi_update().
            */
            Select->set_lock_for_tables((yyvsp[-4].lock_type));
          }
#line 33465 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1791:
#line 12116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33471 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1794:
#line 12126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_item_to_list(thd, (yyvsp[-2].item)) || add_value_to_list(thd, (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1797:
#line 12139 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          LEX *lex= Lex;
          if (lex->update_list.push_back((yyvsp[-2].item)) || 
              lex->value_list.push_back((yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 33491 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1798:
#line 12148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 33497 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1799:
#line 12149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 33503 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1800:
#line 12156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_DELETE;
            mysql_init_select(lex);
            YYPS->m_lock_type= TL_WRITE_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_WRITE;

            lex->ignore= 0;
            lex->select_lex.init_order();
          }
#line 33518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1802:
#line 12171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type,
                                           NULL,
                                           (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1803:
#line 12182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1804:
#line 12183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1805:
#line 12185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1806:
#line 12191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 33564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1807:
#line 12196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            mysql_init_multi_delete(Lex);
            YYPS->m_lock_type= TL_READ_DEFAULT;
            YYPS->m_mdl_type= MDL_SHARED_READ;
          }
#line 33574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1808:
#line 12202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (multi_delete_set_locks_and_link_aux_tables(Lex))
              MYSQL_YYABORT;
          }
#line 33583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1813:
#line 12220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new Table_ident((yyvsp[-1].lex_str));
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1814:
#line 12233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Table_ident *ti= new Table_ident(thd, (yyvsp[-3].lex_str), (yyvsp[-1].lex_str), 0);
            if (ti == NULL)
              MYSQL_YYABORT;
            if (!Select->add_table_to_list(thd,
                                           ti,
                                           NULL,
                                           TL_OPTION_UPDATING | TL_OPTION_ALIAS,
                                           YYPS->m_lock_type,
                                           YYPS->m_mdl_type))
              MYSQL_YYABORT;
          }
#line 33617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1815:
#line 12248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1816:
#line 12249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1817:
#line 12253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1818:
#line 12254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 33641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1819:
#line 12258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= OPTION_QUICK; }
#line 33647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1820:
#line 12259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { YYPS->m_lock_type= TL_WRITE_LOW_PRIORITY; }
#line 33653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1821:
#line 12260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 33659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1822:
#line 12265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= Lex;
            lex->sql_command= SQLCOM_TRUNCATE;
            lex->alter_info.reset();
            lex->select_lex.options= 0;
            lex->select_lex.sql_cache= SELECT_LEX::SQL_CACHE_UNSPECIFIED;
            lex->select_lex.init_order();
            YYPS->m_lock_type= TL_WRITE;
            YYPS->m_mdl_type= MDL_EXCLUSIVE;
          }
#line 33674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1823:
#line 12276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX* lex= thd->lex;
            DBUG_ASSERT(!lex->m_sql_cmd);
            lex->m_sql_cmd= new (thd->mem_root) Sql_cmd_truncate_table();
            if (lex->m_sql_cmd == NULL)
              MYSQL_YYABORT;
          }
#line 33686 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1830:
#line 12300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CPU;
    }
#line 33694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1831:
#line 12304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_MEMORY;
    }
#line 33702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1832:
#line 12308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_BLOCK_IO;
    }
#line 33710 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1833:
#line 12312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_CONTEXT;
    }
#line 33718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1834:
#line 12316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_PAGE_FAULTS;
    }
#line 33726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1835:
#line 12320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_IPC;
    }
#line 33734 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1836:
#line 12324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SWAPS;
    }
#line 33742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1837:
#line 12328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_SOURCE;
    }
#line 33750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1838:
#line 12332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_options|= PROFILE_ALL;
    }
#line 33758 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1839:
#line 12339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= 0;
    }
#line 33766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1840:
#line 12343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
      Lex->profile_query_id= atoi((yyvsp[0].lex_str).str);
    }
#line 33774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1841:
#line 12352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->wild=0;
            lex->ident=null_lex_str;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            bzero((char*) &lex->create_info,sizeof(lex->create_info));
          }
#line 33787 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1842:
#line 12361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 33795 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1843:
#line 12368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_DATABASES;
             if (prepare_schema_table(thd, lex, 0, SCH_SCHEMATA))
               MYSQL_YYABORT;
           }
#line 33806 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1844:
#line 12375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLES;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_NAMES))
               MYSQL_YYABORT;
           }
#line 33818 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1845:
#line 12383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TRIGGERS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TRIGGERS))
               MYSQL_YYABORT;
           }
#line 33830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1846:
#line 12391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_EVENTS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_EVENTS))
               MYSQL_YYABORT;
           }
#line 33842 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1847:
#line 12399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATUS;
             lex->select_lex.db= (yyvsp[-1].simple_string);
             if (prepare_schema_table(thd, lex, 0, SCH_TABLES))
               MYSQL_YYABORT;
           }
#line 33854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1848:
#line 12407 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_OPEN_TABLES;
            lex->select_lex.db= (yyvsp[-1].simple_string);
            if (prepare_schema_table(thd, lex, 0, SCH_OPEN_TABLES))
              MYSQL_YYABORT;
          }
#line 33866 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1849:
#line 12415 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, lex, 0, SCH_PLUGINS))
              MYSQL_YYABORT;
          }
#line 33877 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1850:
#line 12422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ident= (yyvsp[0].lex_str);
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 33888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1851:
#line 12429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PLUGINS;
            if (prepare_schema_table(thd, Lex, 0, SCH_ALL_PLUGINS))
              MYSQL_YYABORT;
          }
#line 33898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1852:
#line 12435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= (yyvsp[-1].db_type); }
#line 33904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1853:
#line 12437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_info.db_type= NULL; }
#line 33910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1854:
#line 12439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 33923 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1855:
#line 12448 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_BINLOGS;
          }
#line 33931 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1856:
#line 12452 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_HOSTS;
          }
#line 33939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1857:
#line 12456 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_BINLOG_EVENTS;
          }
#line 33948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1859:
#line 12461 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_RELAYLOG_EVENTS;
          }
#line 33957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1861:
#line 12466 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_KEYS;
            if ((yyvsp[-1].simple_string))
              (yyvsp[-2].table)->change_db((yyvsp[-1].simple_string));
            if (prepare_schema_table(thd, lex, (yyvsp[-2].table), SCH_STATISTICS))
              MYSQL_YYABORT;
          }
#line 33970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1862:
#line 12475 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_STORAGE_ENGINES;
            if (prepare_schema_table(thd, lex, 0, SCH_ENGINES))
              MYSQL_YYABORT;
          }
#line 33981 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1863:
#line 12482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_AUTHORS;
          }
#line 33990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1864:
#line 12487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_CONTRIBUTORS;
          }
#line 33999 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1865:
#line 12492 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_PRIVILEGES;
          }
#line 34008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1866:
#line 12497 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("warning_count"); }
#line 34014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1867:
#line 12499 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (void) create_select_for_variable("error_count"); }
#line 34020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1868:
#line 12501 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_WARNS;}
#line 34026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1869:
#line 12503 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_ERRORS;}
#line 34032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1870:
#line 12505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command = SQLCOM_SHOW_PROFILES; }
#line 34038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1871:
#line 12507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_PROFILE;
            if (prepare_schema_table(thd, lex, NULL, SCH_PROFILES) != 0)
              YYABORT;
          }
#line 34049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1872:
#line 12514 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_STATUS))
              MYSQL_YYABORT;
          }
#line 34061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1873:
#line 12522 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_PROCESSLIST;}
#line 34067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1874:
#line 12524 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_VARIABLES;
            lex->option_type= (yyvsp[-2].var_type);
            if (prepare_schema_table(thd, lex, 0, SCH_VARIABLES))
              MYSQL_YYABORT;
          }
#line 34079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1875:
#line 12532 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CHARSETS;
            if (prepare_schema_table(thd, lex, 0, SCH_CHARSETS))
              MYSQL_YYABORT;
          }
#line 34090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1876:
#line 12539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_COLLATIONS;
            if (prepare_schema_table(thd, lex, 0, SCH_COLLATIONS))
              MYSQL_YYABORT;
          }
#line 34101 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1877:
#line 12546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_GRANTS;
            if (!(Lex->grant_user= (LEX_USER*)thd->alloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            Lex->grant_user->user= current_user_and_current_role;
          }
#line 34112 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1878:
#line 12553 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SHOW_GRANTS;
            lex->grant_user=(yyvsp[0].lex_user);
          }
#line 34122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1879:
#line 12559 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command=SQLCOM_SHOW_CREATE_DB;
            Lex->create_info.options=(yyvsp[-1].num);
            Lex->name= (yyvsp[0].lex_str);
          }
#line 34132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1880:
#line 12565 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,0))
              MYSQL_YYABORT;
            lex->create_info.storage_media= HA_SM_DEFAULT;
          }
#line 34144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1881:
#line 12573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command = SQLCOM_SHOW_CREATE;
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL, 0))
              MYSQL_YYABORT;
            lex->only_view= 1;
          }
#line 34156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1882:
#line 12581 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_MASTER_STAT;
          }
#line 34164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1883:
#line 12585 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 1;
          }
#line 34173 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1884:
#line 12590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->mi.connection_name= thd->variables.default_master_connection;
            lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            lex->verbose= 0;
          }
#line 34184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1885:
#line 12597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_SHOW_SLAVE_STAT;
            Lex->verbose= 0;
          }
#line 34193 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1886:
#line 12602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           LEX *lex= Lex;
           lex->sql_command= SQLCOM_SHOW_CLIENT_STATS;
           if (prepare_schema_table(thd, lex, 0, SCH_CLIENT_STATS))
             MYSQL_YYABORT;
          }
#line 34204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1887:
#line 12609 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_USER_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_USER_STATS))
               MYSQL_YYABORT;
          }
#line 34215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1888:
#line 12616 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_TABLE_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_TABLE_STATS))
               MYSQL_YYABORT;
          }
#line 34226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1889:
#line 12623 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
             LEX *lex= Lex;
             lex->sql_command= SQLCOM_SHOW_INDEX_STATS;
             if (prepare_schema_table(thd, lex, 0, SCH_INDEX_STATS))
               MYSQL_YYABORT;
          }
#line 34237 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1890:
#line 12630 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_PROC;
            lex->spname= (yyvsp[0].spname);
          }
#line 34248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1891:
#line 12637 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            lex->sql_command = SQLCOM_SHOW_CREATE_FUNC;
            lex->spname= (yyvsp[0].spname);
          }
#line 34259 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1892:
#line 12644 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_CREATE_TRIGGER;
            lex->spname= (yyvsp[0].spname);
          }
#line 34269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1893:
#line 12650 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_PROC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 34280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1894:
#line 12657 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_SHOW_STATUS_FUNC;
            if (prepare_schema_table(thd, lex, 0, SCH_PROCEDURES))
              MYSQL_YYABORT;
          }
#line 34291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1895:
#line 12664 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_PROC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 34300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1896:
#line 12669 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_FUNC_CODE;
            Lex->spname= (yyvsp[0].spname);
          }
#line 34309 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1897:
#line 12674 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->spname= (yyvsp[0].spname);
            Lex->sql_command = SQLCOM_SHOW_CREATE_EVENT;
          }
#line 34318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1898:
#line 12679 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_SHOW_EXPLAIN;
            if (prepare_schema_table(thd, Lex, 0, SCH_EXPLAIN))
              MYSQL_YYABORT;
            add_value_to_list(thd, (yyvsp[0].item));
          }
#line 34329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1899:
#line 12689 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_STATUS; }
#line 34335 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1900:
#line 12691 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_MUTEX; }
#line 34341 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1901:
#line 12693 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHOW_ENGINE_LOGS; }
#line 34347 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1906:
#line 12707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= 0; }
#line 34353 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1907:
#line 12708 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)= (yyvsp[0].lex_str).str; }
#line 34359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1908:
#line 12712 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=0; }
#line 34365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1909:
#line 12713 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->verbose=1; }
#line 34371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1912:
#line 12722 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = 0; }
#line 34377 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1913:
#line 12723 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.log_file_name = (yyvsp[0].lex_str).str; }
#line 34383 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1914:
#line 12727 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = 4; /* skip magic number */ }
#line 34389 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1915:
#line 12728 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->mi.pos = (yyvsp[0].ulonglong_number); }
#line 34395 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1917:
#line 12734 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
#line 34406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1918:
#line 12741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->where= normalize_cond((yyvsp[0].item));
            if ((yyvsp[0].item))
              (yyvsp[0].item)->top_level_item();
          }
#line 34416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1919:
#line 12751 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            mysql_init_select(lex);
            lex->current_select->parsing_place= SELECT_LIST;
            lex->sql_command= SQLCOM_SHOW_FIELDS;
            lex->select_lex.db= 0;
            lex->verbose= 0;
            if (prepare_schema_table(thd, lex, (yyvsp[0].table), SCH_COLUMNS))
              MYSQL_YYABORT;
          }
#line 34431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1920:
#line 12762 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Select->parsing_place= NO_MATTER;
          }
#line 34439 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1921:
#line 12766 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_NORMAL; }
#line 34445 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1922:
#line 12768 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->select_lex.options|= SELECT_DESCRIBE;
          }
#line 34454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1930:
#line 12788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1931:
#line 12789 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_EXTENDED; }
#line 34466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1932:
#line 12790 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->describe|= DESCRIBE_PARTITIONS; }
#line 34472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1933:
#line 12794 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1934:
#line 12795 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->wild= (yyvsp[0].string); }
#line 34484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1935:
#line 12797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->wild= new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,
                                                    (yyvsp[0].lex_str).length,
                                                    system_charset_info);
            if (Lex->wild == NULL)
              MYSQL_YYABORT;
          }
#line 34496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1936:
#line 12811 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_FLUSH;
            lex->type= 0;
            lex->no_write_to_binlog= (yyvsp[0].num);
          }
#line 34507 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1937:
#line 12818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34513 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1938:
#line 12823 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_TABLES;
            /*
              Set type of metadata and table locks for
              FLUSH TABLES table_list [WITH READ LOCK].
            */
            YYPS->m_lock_type= TL_READ_NO_INSERT;
            YYPS->m_mdl_type= MDL_SHARED_HIGH_PRIO;
          }
#line 34527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1941:
#line 12837 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1942:
#line 12839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          TABLE_LIST *tables= Lex->query_tables;
          for (; tables; tables= tables->next_global)
          {
            tables->mdl_request.set_type(MDL_SHARED_NO_WRITE);
            tables->required_type= FRMTYPE_TABLE; /* Don't try to flush views. */
            tables->open_type= OT_BASE_ONLY;      /* Ignore temporary tables. */
          }
        }
#line 34547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1943:
#line 12852 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_READ_LOCK | (yyvsp[0].num); }
#line 34553 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1944:
#line 12854 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->query_tables == NULL) // Table list can't be empty
            {
              my_parse_error(ER(ER_NO_TABLES_USED));
              MYSQL_YYABORT;
            } 
            Lex->type|= REFRESH_FOR_EXPORT;
          }
#line 34566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1945:
#line 12861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1947:
#line 12867 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34578 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1948:
#line 12872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ERROR_LOG; }
#line 34584 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1949:
#line 12874 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_ENGINE_LOG; }
#line 34590 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1950:
#line 12876 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GENERAL_LOG; }
#line 34596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1951:
#line 12878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLOW_LOG; }
#line 34602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1952:
#line 12880 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_BINARY_LOG; }
#line 34608 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1953:
#line 12882 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->type & REFRESH_RELAY_LOG)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH", "RELAY LOGS");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_RELAY_LOG;
            lex->relay_log_connection_name= lex->mi.connection_name;
           }
#line 34623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1954:
#line 12893 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE_FREE; }
#line 34629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1955:
#line 12895 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_HOSTS; }
#line 34635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1956:
#line 12897 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_GRANT; }
#line 34641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1957:
#line 12899 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->type|= REFRESH_LOG;
            Lex->relay_log_connection_name.str= (char*) "";
            Lex->relay_log_connection_name.length= 0;
          }
#line 34651 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1958:
#line 12905 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_STATUS; }
#line 34657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1959:
#line 12907 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            LEX *lex= Lex;
            if (lex->type & REFRESH_SLAVE)
            {
              my_error(ER_WRONG_USAGE, MYF(0), "FLUSH","SLAVE");
              MYSQL_YYABORT;
	    }
            lex->type|= REFRESH_SLAVE;
            lex->reset_slave_info.all= false;
          }
#line 34672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1960:
#line 12918 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_CLIENT_STATS; }
#line 34678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1961:
#line 12920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_USER_STATS; }
#line 34684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1962:
#line 12922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_TABLE_STATS; }
#line 34690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1963:
#line 12924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_INDEX_STATS; }
#line 34696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1964:
#line 12926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_MASTER; }
#line 34702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1965:
#line 12928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_DES_KEY_FILE; }
#line 34708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1966:
#line 12930 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_USER_RESOURCES; }
#line 34714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1967:
#line 12934 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1968:
#line 12935 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1969:
#line 12939 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= 0;}
#line 34732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1970:
#line 12940 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.num)= REFRESH_CHECKPOINT; }
#line 34738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1971:
#line 12944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RESET; lex->type=0;
          }
#line 34747 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1972:
#line 12949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34753 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1975:
#line 12958 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_SLAVE; }
#line 34759 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1976:
#line 12960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 34765 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1977:
#line 12961 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_MASTER; }
#line 34771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1978:
#line 12962 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->type|= REFRESH_QUERY_CACHE;}
#line 34777 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1979:
#line 12966 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= false; }
#line 34783 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1980:
#line 12967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->reset_slave_info.all= true; }
#line 34789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1981:
#line 12972 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->type=0;
            lex->sql_command = SQLCOM_PURGE;
          }
#line 34799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1982:
#line 12978 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34805 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1984:
#line 12987 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->to_log = (yyvsp[0].lex_str).str;
          }
#line 34813 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1985:
#line 12991 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->value_list.empty();
            lex->value_list.push_front((yyvsp[0].item));
            lex->sql_command= SQLCOM_PURGE_BEFORE;
          }
#line 34824 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1986:
#line 13003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->value_list.empty();
            lex->users_list.empty();
            lex->sql_command= SQLCOM_KILL;
            lex->kill_type= KILL_TYPE_ID;
          }
#line 34836 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1987:
#line 13011 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->kill_signal= (killed_state) ((yyvsp[-2].num) | (yyvsp[-1].num));
          }
#line 34844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1988:
#line 13017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 34850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1989:
#line 13018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_HARD_BIT; }
#line 34856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1990:
#line 13019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 34862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1991:
#line 13022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 34868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1992:
#line 13023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_CONNECTION; }
#line 34874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1993:
#line 13024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= (int) KILL_QUERY; }
#line 34880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1994:
#line 13026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (int) KILL_QUERY;
            Lex->kill_type= KILL_TYPE_QUERY;
          }
#line 34889 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1995:
#line 13034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
          Lex->value_list.push_front((yyval.item));
         }
#line 34897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1996:
#line 13038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->users_list.push_back((yyvsp[0].lex_user));
            Lex->kill_type= KILL_TYPE_USER;
          }
#line 34906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1997:
#line 13046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->sql_command= SQLCOM_SHUTDOWN; }
#line 34912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1998:
#line 13053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command=SQLCOM_CHANGE_DB;
            lex->select_lex.db= (yyvsp[0].lex_str).str;
          }
#line 34922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 1999:
#line 13064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), 
                       (yyvsp[0].filetype) == FILETYPE_CSV ? "LOAD DATA" : "LOAD XML");
              MYSQL_YYABORT;
            }
          }
#line 34937 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2000:
#line 13075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_LOAD;
            lex->local_file=  (yyvsp[-2].num);
            lex->duplicates= DUP_ERROR;
            lex->ignore= 0;
            if (!(lex->exchange= new sql_exchange((yyvsp[0].lex_str).str, 0, (yyvsp[-5].filetype))))
              MYSQL_YYABORT;
          }
#line 34951 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2001:
#line 13085 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!Select->add_table_to_list(thd, (yyvsp[-1].table), NULL, TL_OPTION_UPDATING,
                                           (yyvsp[-9].lock_type), MDL_SHARED_WRITE, NULL, (yyvsp[0].string_list)))
              MYSQL_YYABORT;
            lex->field_list.empty();
            lex->update_list.empty();
            lex->value_list.empty();
          }
#line 34965 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2002:
#line 13095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->cs= (yyvsp[0].charset); }
#line 34971 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2003:
#line 13099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 34977 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2004:
#line 13103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_CSV; }
#line 34983 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2005:
#line 13104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.filetype)= FILETYPE_XML; }
#line 34989 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2006:
#line 13108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0;}
#line 34995 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2007:
#line 13109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1;}
#line 35001 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2008:
#line 13113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_DEFAULT; }
#line 35007 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2009:
#line 13115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Ignore this option in SP to avoid problem with query cache and
              triggers with non default priority locks
            */
            (yyval.lock_type)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 35019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2010:
#line 13122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lock_type)= TL_WRITE_LOW_PRIORITY; }
#line 35025 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2011:
#line 13126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_ERROR; }
#line 35031 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2012:
#line 13127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->duplicates=DUP_REPLACE; }
#line 35037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2013:
#line 13128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ignore= 1; }
#line 35043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2018:
#line 13143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->field_term= (yyvsp[0].string);
          }
#line 35052 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2019:
#line 13148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            DBUG_ASSERT(lex->exchange != 0);
            lex->exchange->enclosed= (yyvsp[0].string);
            lex->exchange->opt_enclosed= 1;
          }
#line 35063 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2020:
#line 13155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->enclosed= (yyvsp[0].string);
          }
#line 35072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2021:
#line 13160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->escaped= (yyvsp[0].string);
          }
#line 35081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2026:
#line 13178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_term= (yyvsp[0].string);
          }
#line 35090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2027:
#line 13183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->line_start= (yyvsp[0].string);
          }
#line 35099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2028:
#line 13190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35105 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2029:
#line 13192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->exchange->line_term = (yyvsp[0].string); }
#line 35111 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2031:
#line 13197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            DBUG_ASSERT(Lex->exchange != 0);
            Lex->exchange->skip_lines= atol((yyvsp[-1].lex_str).str);
          }
#line 35120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2032:
#line 13204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2033:
#line 13206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 35132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2034:
#line 13210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2035:
#line 13211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2036:
#line 13212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2037:
#line 13217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item)); }
#line 35156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2038:
#line 13219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->field_list.push_back((yyvsp[0].item)); }
#line 35162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2039:
#line 13223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {(yyval.item)= (yyvsp[0].item);}
#line 35168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2040:
#line 13225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_user_var_as_out_param((yyvsp[0].lex_str));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2041:
#line 13233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2042:
#line 13234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 35190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2045:
#line 13244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->update_list.push_back((yyvsp[-4].item)) || 
                lex->value_list.push_back((yyvsp[-1].item)))
                MYSQL_YYABORT;
            (yyvsp[-1].item)->set_name_no_truncate((yyvsp[-2].simple_string), (uint) ((yyvsp[0].simple_string) - (yyvsp[-2].simple_string)), thd->charset());
          }
#line 35202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2046:
#line 13257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING tmp;
            CHARSET_INFO *cs_con= thd->variables.collation_connection;
            CHARSET_INFO *cs_cli= thd->variables.character_set_client;
            uint repertoire= thd->lex->text_string_is_7bit &&
                             my_charset_is_ascii_based(cs_cli) ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            if (thd->charset_is_collation_connection ||
                (repertoire == MY_REPERTOIRE_ASCII &&
                 my_charset_is_ascii_based(cs_con)))
              tmp= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&tmp, cs_con, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, cs_cli))
                MYSQL_YYABORT;
            }
            (yyval.item)= new (thd->mem_root) Item_string(tmp.str, tmp.length, cs_con,
                                                DERIVATION_COERCIBLE,
                                                repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35229 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2047:
#line 13280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            uint repertoire= Lex->text_string_is_7bit ?
                             MY_REPERTOIRE_ASCII : MY_REPERTOIRE_UNICODE30;
            DBUG_ASSERT(my_charset_is_ascii_based(national_charset_info));
            (yyval.item)= new (thd->mem_root) Item_string((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                  national_charset_info,
                                                  DERIVATION_COERCIBLE,
                                                  repertoire);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2048:
#line 13292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_string_with_introducer((yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length, (yyvsp[-1].charset));
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2049:
#line 13299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string* item= (Item_string*) (yyvsp[-1].item);
            item->append((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!(item->collation.repertoire & MY_REPERTOIRE_EXTENDED))
            {
              /*
                 If the string has been pure ASCII so far,
                 check the new part.
              */
              CHARSET_INFO *cs= thd->variables.collation_connection;
              item->collation.repertoire|= my_string_repertoire(cs,
                                                                (yyvsp[0].lex_str).str,
                                                                (yyvsp[0].lex_str).length);
            }
          }
#line 35276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2050:
#line 13318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.string)= new (thd->mem_root) String((yyvsp[0].lex_str).str,
                                             (yyvsp[0].lex_str).length,
                                             thd->variables.collation_connection);
            if ((yyval.string) == NULL)
              MYSQL_YYABORT;
          }
#line 35288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2051:
#line 13325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.string)= (yyvsp[0].string); }
#line 35294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2052:
#line 13331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_hybrid((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2053:
#line 13343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_hex_string((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2054:
#line 13351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item *tmp= new (thd->mem_root) Item_bin_string((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (tmp == NULL)
              MYSQL_YYABORT;
            /*
              it is OK only emulate fix_fields, because we need only
              value of constant
            */
            tmp->quick_fix_field();
            (yyval.string)= tmp->val_str((String*) 0);
          }
#line 35338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2055:
#line 13366 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            Item_param *item;
            if (! lex->parsing_options.allows_variable)
            {
              my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
              MYSQL_YYABORT;
            }
            item= new (thd->mem_root) Item_param((uint) (lip->get_tok_start() - thd->query()));
            if (!((yyval.item)= item) || lex->param_list.push_back(item))
            {
              my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));
              MYSQL_YYABORT;
            }
          }
#line 35359 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2056:
#line 13385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 35365 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2057:
#line 13386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 35371 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2058:
#line 13388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyvsp[0].item_num)->max_length++;
            (yyval.item)= (yyvsp[0].item_num)->neg();
          }
#line 35380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2059:
#line 13395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item); }
#line 35386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2060:
#line 13396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item) = (yyvsp[0].item_num); }
#line 35392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2061:
#line 13397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35398 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2062:
#line 13399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              For the digest computation, in this context only,
              NULL is considered a literal, hence reduced to '?'
              REDUCE:
                TOK_GENERIC_VALUE := NULL_SYM
            */
            YYLIP->reduce_digest_token(TOK_GENERIC_VALUE, NULL_SYM);
            (yyval.item) = new (thd->mem_root) Item_null();
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            YYLIP->next_state= MY_LEX_OPERATOR_OR_IDENT;
          }
#line 35416 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2063:
#line 13413 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "FALSE",0,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2064:
#line 13419 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_int((char*) "TRUE",1,1);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2065:
#line 13425 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item) = new (thd->mem_root) Item_hex_hybrid((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2066:
#line 13431 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item) = new (thd->mem_root) Item_hex_string((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2067:
#line 13437 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)= new (thd->mem_root) Item_bin_string((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2068:
#line 13443 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_string_with_introducer *item_str;
            /*
              Pass NULL as name. Name will be set in the "select_item" rule and
              will include the introducer and the original hex/bin notation.
            */
            item_str= new (thd->mem_root)
               Item_string_with_introducer(NULL, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(), (yyvsp[-1].charset));
            if (!item_str || !item_str->check_well_formed_result(true))
              MYSQL_YYABORT;

            (yyval.item)= item_str;
          }
#line 35484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2069:
#line 13460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2070:
#line 13470 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            int error;
            (yyval.item_num)= new (thd->mem_root)
                  Item_int((yyvsp[0].lex_str).str,
                           (longlong) my_strtoll10((yyvsp[0].lex_str).str, NULL, &error),
                           (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2071:
#line 13480 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_uint((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if ((yyval.item_num) == NULL)
              MYSQL_YYABORT;
          }
#line 35522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2072:
#line 13486 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_decimal((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length,
                                                   thd->charset());
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 35535 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2073:
#line 13495 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item_num)= new (thd->mem_root) Item_float((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (((yyval.item_num) == NULL) || (thd->is_error()))
            {
              MYSQL_YYABORT;
            }
          }
#line 35547 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2074:
#line 13507 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATE, true)))
              MYSQL_YYABORT;
          }
#line 35557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2075:
#line 13513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_TIME, true)))
              MYSQL_YYABORT;
          }
#line 35567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2076:
#line 13519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.item)= create_temporal_literal(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, YYCSCL,
                                              MYSQL_TYPE_DATETIME, true)))
              MYSQL_YYABORT;
          }
#line 35577 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2077:
#line 13534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35583 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2078:
#line 13535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35589 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2079:
#line 13540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, "*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 35602 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2080:
#line 13549 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel= Select;
            const char* schema= thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                  NullS : (yyvsp[-4].lex_str).str;
            (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str,"*");
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
            sel->with_wild++;
          }
#line 35618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2081:
#line 13563 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 35624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2082:
#line 13568 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_variable *spv;
            sp_pcontext *spc = lex->spcont;
            if (spc && (spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              /* We're compiling a stored procedure and found a variable */
              if (! lex->parsing_options.allows_variable)
              {
                my_error(ER_VIEW_SELECT_VARIABLE, MYF(0));
                MYSQL_YYABORT;
              }

              Item_splocal *splocal;
              splocal= new (thd->mem_root)
                         Item_splocal((yyvsp[0].lex_str), spv->offset, spv->type,
                                      lip->get_tok_start_prev() - lex->sphead->m_tmp_query,
                                      lip->get_tok_end() - lip->get_tok_start_prev());
              if (splocal == NULL)
                MYSQL_YYABORT;
#ifndef DBUG_OFF
              splocal->m_sp= lex->sphead;
#endif
              (yyval.item)= splocal;
              lex->safe_to_cache_query=0;
            }
            else
            {
              SELECT_LEX *sel=Select;
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, NullS, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 35674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2083:
#line 13613 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35680 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2084:
#line 13618 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            SELECT_LEX *sel=Select;
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, NullS, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, NullS, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2085:
#line 13634 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)= (yyvsp[0].item); }
#line 35707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2086:
#line 13639 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            /*
              FIXME This will work ok in simple_ident_nospvar case because
              we can't meet simple_ident_nospvar in trigger now. But it
              should be changed in future.
            */
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") ||
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              Item_trigger_field *trg_fld;
              bool new_row= ((yyvsp[-2].lex_str).str[0]=='N' || (yyvsp[-2].lex_str).str[0]=='n');

              if (lex->trg_chistics.event == TRG_EVENT_INSERT &&
                  !new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "OLD", "on INSERT");
                MYSQL_YYABORT;
              }

              if (lex->trg_chistics.event == TRG_EVENT_DELETE &&
                  new_row)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0), "NEW", "on DELETE");
                MYSQL_YYABORT;
              }

              DBUG_ASSERT(!new_row ||
                          (lex->trg_chistics.event == TRG_EVENT_INSERT ||
                           lex->trg_chistics.event == TRG_EVENT_UPDATE));
              const bool read_only=
                !(new_row && lex->trg_chistics.action_time == TRG_ACTION_BEFORE);
              trg_fld= new (thd->mem_root)
                         Item_trigger_field(Lex->current_context(),
                                            new_row ?
                                              Item_trigger_field::NEW_ROW:
                                              Item_trigger_field::OLD_ROW,
                                            (yyvsp[0].lex_str).str,
                                            SELECT_ACL,
                                            read_only);
              if (trg_fld == NULL)
                MYSQL_YYABORT;

              /*
                Let us add this item to list of all Item_trigger_field objects
                in trigger.
              */
              lex->trg_table_fields.link_in_list(trg_fld,
                                                 &trg_fld->next_trg_field);

              (yyval.item)= trg_fld;
            }
            else
            {
              SELECT_LEX *sel= lex->current_select;
              if (sel->no_table_names_allowed)
              {
                my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                         MYF(0), (yyvsp[-2].lex_str).str, thd->where);
              }
              if ((sel->parsing_place != IN_HAVING) ||
                  (sel->get_in_sum_expr() > 0))
              {
                (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                   NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              else
              {
                (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
              }
              if ((yyval.item) == NULL)
                MYSQL_YYABORT;
            }
          }
#line 35789 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2087:
#line 13717 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);

            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               NullS, (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35817 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2088:
#line 13741 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            SELECT_LEX *sel= lex->current_select;
            const char* schema= (thd->client_capabilities & CLIENT_NO_SCHEMA ?
                                 NullS : (yyvsp[-4].lex_str).str);
            if (sel->no_table_names_allowed)
            {
              my_error(ER_TABLENAME_NOT_ALLOWED_HERE,
                       MYF(0), (yyvsp[-2].lex_str).str, thd->where);
            }
            if ((sel->parsing_place != IN_HAVING) ||
                (sel->get_in_sum_expr() > 0))
            {
              (yyval.item)= new (thd->mem_root) Item_field(Lex->current_context(),
                                                 schema,
                                                 (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            else
            {
              (yyval.item)= new (thd->mem_root) Item_ref(Lex->current_context(),
                                               schema,
                                               (yyvsp[-2].lex_str).str, (yyvsp[0].lex_str).str);
            }
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 35848 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2089:
#line 13770 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 35854 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2090:
#line 13772 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-4].lex_str).str, table->db))
            {
              my_error(ER_WRONG_DB_NAME, MYF(0), (yyvsp[-4].lex_str).str);
              MYSQL_YYABORT;
            }
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str,
                              table->table_name))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 35874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2091:
#line 13788 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            TABLE_LIST *table= Select->table_list.first;
            if (my_strcasecmp(table_alias_charset, (yyvsp[-2].lex_str).str, table->alias))
            {
              my_error(ER_WRONG_TABLE_NAME, MYF(0), (yyvsp[-2].lex_str).str);
              MYSQL_YYABORT;
            }
            (yyval.lex_str)=(yyvsp[0].lex_str);
          }
#line 35888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2092:
#line 13797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 35894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2093:
#line 13802 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 35904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2094:
#line 13808 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[-2].lex_str),(yyvsp[0].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 35914 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2095:
#line 13814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /* For Delphi */
            (yyval.table)= new Table_ident((yyvsp[0].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 35925 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2096:
#line 13824 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new Table_ident((yyvsp[-1].lex_str));
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 35935 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2097:
#line 13830 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.table)= new Table_ident(thd, (yyvsp[-3].lex_str),(yyvsp[-1].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 35945 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2098:
#line 13839 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX_STRING db={(char*) any_db,3};
            (yyval.table)= new Table_ident(thd, db,(yyvsp[0].lex_str),0);
            if ((yyval.table) == NULL)
              MYSQL_YYABORT;
          }
#line 35956 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2099:
#line 13848 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)= (yyvsp[0].lex_str); }
#line 35962 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2100:
#line 13850 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
            {
              CHARSET_INFO *cs= system_charset_info;
              int dummy_error;
              uint wlen= cs->cset->well_formed_len(cs, (yyvsp[0].lex_str).str,
                                                   (yyvsp[0].lex_str).str+(yyvsp[0].lex_str).length,
                                                   (yyvsp[0].lex_str).length, &dummy_error);
              if (wlen < (yyvsp[0].lex_str).length)
              {
                ErrConvString err((yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, &my_charset_bin);
                my_error(ER_INVALID_CHARACTER_STRING, MYF(0),
                         cs->csname, err.ptr());
                MYSQL_YYABORT;
              }
              (yyval.lex_str)= (yyvsp[0].lex_str);
            }
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 35991 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2101:
#line 13878 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_system_charset)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), system_charset_info,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 36006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2102:
#line 13892 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_collation_connection)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str), thd->variables.collation_connection,
                                  (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            } 
          }
#line 36021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2103:
#line 13906 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (thd->charset_is_character_set_filesystem)
              (yyval.lex_str)= (yyvsp[0].lex_str);
            else
            {
              if (thd->convert_string(&(yyval.lex_str),
                                      thd->variables.character_set_filesystem,
                                      (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length, thd->charset()))
                MYSQL_YYABORT;
            }
          }
#line 36037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2104:
#line 13920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 36043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2105:
#line 13922 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 36054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2106:
#line 13931 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str); }
#line 36060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2107:
#line 13933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_str).str= thd->strmake((yyvsp[0].symbol).str, (yyvsp[0].symbol).length);
            if ((yyval.lex_str).str == NULL)
              MYSQL_YYABORT;
            (yyval.lex_str).length= (yyvsp[0].symbol).length;
          }
#line 36071 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2108:
#line 13942 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36077 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2109:
#line 13943 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36083 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2110:
#line 13944 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_str)=(yyvsp[0].lex_str);}
#line 36089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2111:
#line 13949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= null_lex_str; // User or Role, see get_current_user()
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0))
              MYSQL_YYABORT;
          }
#line 36108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2112:
#line 13964 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[-2].lex_str); (yyval.lex_user)->host=(yyvsp[0].lex_str);
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length,
                                         system_charset_info, 0) ||
                check_host_name(&(yyval.lex_user)->host))
              MYSQL_YYABORT;
            if ((yyval.lex_user)->host.str[0])
            {
              /*
                Convert hostname part of username to lowercase.
                It's OK to use in-place lowercase as long as
                the character set is utf8.
              */
              my_casedn_str(system_charset_info, (yyval.lex_user)->host.str);
            }
            else
            {
              /*
                fix historical undocumented convention that empty host is the
                same as '%'
              */
              (yyval.lex_user)->host= host_not_specified;
            }
          }
#line 36144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2113:
#line 13996 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*)thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_user;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
#line 36156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2116:
#line 14008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
           if ((yyvsp[0].lex_user)->user.str != current_user.str && (yyvsp[0].lex_user)->host.str == 0)
             (yyvsp[0].lex_user)->host= host_not_specified;
           (yyval.lex_user)= (yyvsp[0].lex_user);
         }
#line 36166 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2117:
#line 14017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36172 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2118:
#line 14018 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36178 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2119:
#line 14019 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36184 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2120:
#line 14020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2121:
#line 14021 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36196 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2122:
#line 14022 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36202 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2123:
#line 14023 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2124:
#line 14024 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36214 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2125:
#line 14025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36220 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2126:
#line 14026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36226 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2127:
#line 14027 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36232 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2128:
#line 14028 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36238 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2129:
#line 14029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36244 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2130:
#line 14030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36250 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2131:
#line 14031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36256 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2132:
#line 14032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36262 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2133:
#line 14033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36268 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2134:
#line 14034 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36274 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2135:
#line 14035 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36280 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2136:
#line 14036 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36286 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2137:
#line 14037 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36292 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2138:
#line 14038 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36298 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2139:
#line 14039 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36304 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2140:
#line 14040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36310 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2141:
#line 14041 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36316 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2142:
#line 14042 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36322 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2143:
#line 14043 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36328 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2144:
#line 14044 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36334 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2145:
#line 14045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2146:
#line 14046 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36346 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2147:
#line 14047 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36352 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2148:
#line 14048 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36358 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2149:
#line 14049 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36364 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2150:
#line 14050 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2151:
#line 14051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36376 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2152:
#line 14052 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36382 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2153:
#line 14053 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2154:
#line 14054 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36394 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2155:
#line 14055 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36400 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2156:
#line 14056 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2157:
#line 14057 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2158:
#line 14058 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36418 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2159:
#line 14059 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36424 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2160:
#line 14060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36430 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2161:
#line 14061 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36436 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2162:
#line 14062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36442 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2163:
#line 14063 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36448 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2164:
#line 14064 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36454 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2165:
#line 14065 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36460 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2166:
#line 14066 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36466 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2167:
#line 14067 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2168:
#line 14068 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36478 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2169:
#line 14069 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36484 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2170:
#line 14070 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36490 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2171:
#line 14071 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36496 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2172:
#line 14072 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2173:
#line 14073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2174:
#line 14074 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2175:
#line 14075 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2176:
#line 14076 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2177:
#line 14086 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36532 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2178:
#line 14087 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36538 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2179:
#line 14088 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36544 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2180:
#line 14089 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36550 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2181:
#line 14090 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36556 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2182:
#line 14091 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36562 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2183:
#line 14092 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36568 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2184:
#line 14093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36574 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2185:
#line 14094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36580 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2186:
#line 14095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36586 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2187:
#line 14096 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36592 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2188:
#line 14097 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36598 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2189:
#line 14098 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36604 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2190:
#line 14099 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36610 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2191:
#line 14100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2192:
#line 14101 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36622 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2193:
#line 14102 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36628 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2194:
#line 14103 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36634 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2195:
#line 14104 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36640 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2196:
#line 14105 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36646 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2197:
#line 14106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36652 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2198:
#line 14107 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36658 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2199:
#line 14108 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36664 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2200:
#line 14109 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36670 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2201:
#line 14110 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36676 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2202:
#line 14111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36682 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2203:
#line 14112 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36688 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2204:
#line 14113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36694 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2205:
#line 14114 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36700 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2206:
#line 14115 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36706 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2207:
#line 14116 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36712 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2208:
#line 14117 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36718 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2209:
#line 14118 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36724 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2210:
#line 14119 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36730 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2211:
#line 14120 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36736 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2212:
#line 14121 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36742 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2213:
#line 14122 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36748 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2214:
#line 14123 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36754 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2215:
#line 14124 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36760 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2216:
#line 14125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36766 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2217:
#line 14126 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36772 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2218:
#line 14127 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36778 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2219:
#line 14128 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36784 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2220:
#line 14129 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36790 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2221:
#line 14130 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2222:
#line 14131 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36802 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2223:
#line 14132 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36808 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2224:
#line 14133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36814 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2225:
#line 14134 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36820 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2226:
#line 14135 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36826 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2227:
#line 14140 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36832 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2228:
#line 14141 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2229:
#line 14142 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36844 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2230:
#line 14143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36850 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2231:
#line 14144 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36856 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2232:
#line 14145 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36862 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2233:
#line 14146 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36868 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2234:
#line 14147 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36874 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2235:
#line 14148 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36880 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2236:
#line 14149 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36886 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2237:
#line 14150 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36892 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2238:
#line 14151 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36898 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2239:
#line 14152 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36904 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2240:
#line 14153 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36910 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2241:
#line 14154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36916 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2242:
#line 14155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36922 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2243:
#line 14156 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36928 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2244:
#line 14157 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36934 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2245:
#line 14158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36940 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2246:
#line 14159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2247:
#line 14160 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2248:
#line 14161 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36958 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2249:
#line 14162 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2250:
#line 14163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2251:
#line 14164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2252:
#line 14165 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2253:
#line 14166 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36988 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2254:
#line 14167 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 36994 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2255:
#line 14168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37000 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2256:
#line 14169 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2257:
#line 14170 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37012 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2258:
#line 14171 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37018 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2259:
#line 14172 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37024 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2260:
#line 14173 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37030 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2261:
#line 14174 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37036 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2262:
#line 14175 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37042 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2263:
#line 14176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37048 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2264:
#line 14177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37054 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2265:
#line 14178 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37060 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2266:
#line 14179 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37066 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2267:
#line 14180 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37072 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2268:
#line 14181 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37078 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2269:
#line 14182 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37084 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2270:
#line 14183 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37090 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2271:
#line 14184 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37096 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2272:
#line 14185 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2273:
#line 14186 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2274:
#line 14187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2275:
#line 14188 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2276:
#line 14189 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2277:
#line 14190 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2278:
#line 14191 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2279:
#line 14192 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2280:
#line 14193 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2281:
#line 14194 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2282:
#line 14195 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2283:
#line 14196 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2284:
#line 14197 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37174 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2285:
#line 14198 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37180 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2286:
#line 14199 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37186 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2287:
#line 14200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37192 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2288:
#line 14201 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37198 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2289:
#line 14202 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37204 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2290:
#line 14203 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37210 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2291:
#line 14204 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37216 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2292:
#line 14205 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37222 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2293:
#line 14206 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37228 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2294:
#line 14207 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37234 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2295:
#line 14208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37240 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2296:
#line 14209 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37246 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2297:
#line 14210 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37252 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2298:
#line 14211 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37258 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2299:
#line 14212 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37264 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2300:
#line 14213 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37270 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2301:
#line 14214 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37276 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2302:
#line 14215 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37282 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2303:
#line 14216 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37288 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2304:
#line 14217 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37294 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2305:
#line 14218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37300 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2306:
#line 14219 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2307:
#line 14220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37312 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2308:
#line 14221 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37318 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2309:
#line 14222 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37324 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2310:
#line 14223 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37330 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2311:
#line 14224 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2312:
#line 14225 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2313:
#line 14226 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2314:
#line 14227 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2315:
#line 14228 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37360 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2316:
#line 14229 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37366 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2317:
#line 14230 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37372 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2318:
#line 14231 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2319:
#line 14232 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37384 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2320:
#line 14233 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37390 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2321:
#line 14234 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2322:
#line 14235 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37402 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2323:
#line 14236 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2324:
#line 14237 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37414 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2325:
#line 14238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37420 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2326:
#line 14239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37426 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2327:
#line 14240 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37432 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2328:
#line 14241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2329:
#line 14242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37444 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2330:
#line 14243 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37450 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2331:
#line 14244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37456 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2332:
#line 14245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37462 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2333:
#line 14246 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37468 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2334:
#line 14247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37474 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2335:
#line 14248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37480 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2336:
#line 14249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37486 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2337:
#line 14250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2338:
#line 14251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2339:
#line 14252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37504 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2340:
#line 14253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37510 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2341:
#line 14254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37516 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2342:
#line 14255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37522 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2343:
#line 14256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37528 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2344:
#line 14257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37534 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2345:
#line 14258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37540 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2346:
#line 14259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37546 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2347:
#line 14260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37552 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2348:
#line 14261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37558 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2349:
#line 14262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37564 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2350:
#line 14263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37570 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2351:
#line 14264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37576 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2352:
#line 14265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37582 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2353:
#line 14266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37588 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2354:
#line 14267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37594 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2355:
#line 14268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37600 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2356:
#line 14269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37606 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2357:
#line 14270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37612 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2358:
#line 14271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37618 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2359:
#line 14272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37624 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2360:
#line 14273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37630 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2361:
#line 14274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37636 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2362:
#line 14275 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37642 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2363:
#line 14276 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37648 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2364:
#line 14277 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37654 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2365:
#line 14278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37660 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2366:
#line 14279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37666 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2367:
#line 14280 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37672 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2368:
#line 14281 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37678 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2369:
#line 14282 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37684 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2370:
#line 14283 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37690 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2371:
#line 14284 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37696 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2372:
#line 14285 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37702 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2373:
#line 14286 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37708 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2374:
#line 14287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37714 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2375:
#line 14288 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37720 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2376:
#line 14289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2377:
#line 14290 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37732 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2378:
#line 14291 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37738 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2379:
#line 14292 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37744 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2380:
#line 14293 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37750 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2381:
#line 14294 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2382:
#line 14295 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37762 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2383:
#line 14296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37768 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2384:
#line 14297 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37774 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2385:
#line 14298 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37780 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2386:
#line 14299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37786 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2387:
#line 14300 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37792 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2388:
#line 14301 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37798 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2389:
#line 14302 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2390:
#line 14303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37810 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2391:
#line 14304 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37816 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2392:
#line 14305 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37822 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2393:
#line 14306 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37828 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2394:
#line 14307 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37834 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2395:
#line 14308 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37840 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2396:
#line 14309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2397:
#line 14310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37852 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2398:
#line 14311 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37858 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2399:
#line 14312 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37864 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2400:
#line 14313 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37870 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2401:
#line 14314 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37876 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2402:
#line 14315 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37882 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2403:
#line 14316 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37888 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2404:
#line 14317 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37894 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2405:
#line 14318 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37900 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2406:
#line 14319 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37906 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2407:
#line 14320 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37912 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2408:
#line 14321 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37918 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2409:
#line 14322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37924 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2410:
#line 14323 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37930 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2411:
#line 14324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37936 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2412:
#line 14325 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37942 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2413:
#line 14326 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37948 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2414:
#line 14327 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37954 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2415:
#line 14328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37960 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2416:
#line 14329 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37966 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2417:
#line 14330 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37972 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2418:
#line 14331 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37978 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2419:
#line 14332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37984 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2420:
#line 14333 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37990 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2421:
#line 14334 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 37996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2422:
#line 14335 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38002 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2423:
#line 14336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2424:
#line 14337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38014 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2425:
#line 14338 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38020 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2426:
#line 14339 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38026 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2427:
#line 14340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38032 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2428:
#line 14341 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38038 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2429:
#line 14342 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38044 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2430:
#line 14343 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38050 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2431:
#line 14344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38056 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2432:
#line 14345 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38062 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2433:
#line 14346 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38068 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2434:
#line 14347 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38074 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2435:
#line 14348 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2436:
#line 14349 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38086 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2437:
#line 14350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38092 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2438:
#line 14351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38098 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2439:
#line 14352 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38104 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2440:
#line 14353 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38110 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2441:
#line 14354 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38116 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2442:
#line 14355 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38122 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2443:
#line 14356 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38128 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2444:
#line 14357 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38134 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2445:
#line 14358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2446:
#line 14359 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38146 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2447:
#line 14360 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38152 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2448:
#line 14361 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38158 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2449:
#line 14362 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2450:
#line 14363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38170 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2451:
#line 14364 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38176 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2452:
#line 14365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38182 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2453:
#line 14366 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38188 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2454:
#line 14367 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38194 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2455:
#line 14368 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2456:
#line 14369 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38206 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2457:
#line 14370 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38212 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2458:
#line 14371 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38218 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2459:
#line 14372 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38224 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2460:
#line 14373 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38230 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2461:
#line 14374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38236 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2462:
#line 14375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38242 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2463:
#line 14376 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38248 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2464:
#line 14377 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38254 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2465:
#line 14378 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38260 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2466:
#line 14379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2467:
#line 14380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38272 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2468:
#line 14381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2469:
#line 14382 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2470:
#line 14383 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2471:
#line 14384 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2472:
#line 14385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2473:
#line 14386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2474:
#line 14387 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38314 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2475:
#line 14388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38320 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2476:
#line 14389 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38326 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2477:
#line 14390 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38332 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2478:
#line 14391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38338 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2479:
#line 14392 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38344 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2480:
#line 14393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2481:
#line 14394 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2482:
#line 14395 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2483:
#line 14396 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2484:
#line 14397 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38374 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2485:
#line 14398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38380 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2486:
#line 14399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38386 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2487:
#line 14400 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38392 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2488:
#line 14412 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SET_OPTION;
            mysql_init_select(lex);
            lex->option_type=OPT_SESSION;
            lex->var_list.empty();
            lex->autocommit= 0;
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38406 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2489:
#line 14422 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 38412 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2490:
#line 14429 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 38421 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2492:
#line 14435 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= OPT_DEFAULT;
          }
#line 38429 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2493:
#line 14439 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT;
          }
#line 38438 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2494:
#line 14444 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 38446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2496:
#line 14454 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2498:
#line 14460 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2501:
#line 14474 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38472 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2502:
#line 14478 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38481 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2503:
#line 14483 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_create_assignment_lex(thd, yychar == YYEMPTY);
          }
#line 38489 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2504:
#line 14487 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (sp_create_assignment_instr(thd, yychar == YYEMPTY))
              MYSQL_YYABORT; 
          }
#line 38498 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2505:
#line 14496 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->option_type= (yyvsp[0].var_type);
          }
#line 38506 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2508:
#line 14504 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2509:
#line 14505 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2510:
#line 14506 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38524 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2511:
#line 14510 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38530 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2512:
#line 14511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38536 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2513:
#line 14512 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38542 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2514:
#line 14513 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38548 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2515:
#line 14517 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_DEFAULT; }
#line 38554 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2516:
#line 14518 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_GLOBAL; }
#line 38560 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2517:
#line 14519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38566 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2518:
#line 14520 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.var_type)=OPT_SESSION; }
#line 38572 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2519:
#line 14526 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var && (yyvsp[-2].variable).var != trg_new_row_fake_var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              /*
                Not in trigger assigning value to new row,
                and option_type preceding local variable is illegal.
              */
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
          }
#line 38596 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2520:
#line 14550 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if ((yyvsp[-2].variable).var == trg_new_row_fake_var)
            {
              /* We are in trigger and assigning value to field of new row */
              if (set_trigger_new_row(thd, &(yyvsp[-2].variable).base_name, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else if ((yyvsp[-2].variable).var)
            {
              /* It is a system variable. */
              if (set_system_variable(thd, &(yyvsp[-2].variable), lex->option_type, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
            else
            {
              sp_pcontext *spc= lex->spcont;
              sp_variable *spv= spc->find_variable((yyvsp[-2].variable).base_name, false);

              /* It is a local variable. */
              if (set_local_variable(thd, spv, (yyvsp[0].item)))
                MYSQL_YYABORT;
            }
          }
#line 38626 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2521:
#line 14576 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Item_func_set_user_var *item;
            item= new (thd->mem_root) Item_func_set_user_var((yyvsp[-2].lex_str), (yyvsp[0].item));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var_user *var= new set_var_user(item);
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
          }
#line 38641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2522:
#line 14587 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            struct sys_var_with_base tmp= (yyvsp[-2].variable);
            /* Lookup if necessary: must be a system variable. */
            if (tmp.var == NULL)
            {
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;
            }
            if (set_system_variable(thd, &tmp, (yyvsp[-3].var_type), (yyvsp[0].item)))
              MYSQL_YYABORT;
          }
#line 38657 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2523:
#line 14599 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            CHARSET_INFO *cs2;
            cs2= (yyvsp[0].charset) ? (yyvsp[0].charset): global_system_variables.character_set_client;
            set_var_collation_client *var;
            var= new set_var_collation_client(cs2,
                                              thd->variables.collation_database,
                                              cs2);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
#line 38674 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2524:
#line 14612 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING names;

            names.str= (char *)"names";
            names.length= 5;
            if (spc && spc->find_variable(names, false))
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), names.str);
            else
              my_parse_error(ER(ER_SYNTAX_ERROR));

            MYSQL_YYABORT;
          }
#line 38693 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2525:
#line 14627 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            CHARSET_INFO *cs2;
            CHARSET_INFO *cs3;
            cs2= (yyvsp[-1].charset) ? (yyvsp[-1].charset) : global_system_variables.character_set_client;
            cs3= (yyvsp[0].charset) ? (yyvsp[0].charset) : cs2;
            if (!my_charset_same(cs2, cs3))
            {
              my_error(ER_COLLATION_CHARSET_MISMATCH, MYF(0),
                       cs3->name, cs2->csname);
              MYSQL_YYABORT;
            }
            set_var_collation_client *var;
            var= new set_var_collation_client(cs3, cs3, cs3);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
#line 38716 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2526:
#line 14646 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex = Lex;
            set_var_role *var= new set_var_role((yyvsp[0].lex_str));
            lex->var_list.push_back(var);
          }
#line 38726 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2527:
#line 14652 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            LEX_USER *user;
            sp_pcontext *spc= lex->spcont;
            LEX_STRING pw;

            pw.str= (char *)"password";
            pw.length= 8;
            if (spc && spc->find_variable(pw, false))
            {
              my_error(ER_SP_BAD_VAR_SHADOW, MYF(0), pw.str);
              MYSQL_YYABORT;
            }
            if (!(user=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            user->user= current_user;
            set_var_password *var= new set_var_password(user, (yyvsp[0].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            thd->lex->var_list.push_back(var);
            thd->lex->autocommit= TRUE;
            if (lex->sphead)
              lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 38755 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2528:
#line 14677 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            set_var_password *var= new set_var_password((yyvsp[-2].lex_user),(yyvsp[0].simple_string));
            if (var == NULL)
              MYSQL_YYABORT;
            Lex->var_list.push_back(var);
            Lex->autocommit= TRUE;
            if (Lex->sphead)
              Lex->sphead->m_flags|= sp_head::HAS_SET_AUTOCOMMIT_STMT;
          }
#line 38769 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2529:
#line 14690 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sp_pcontext *spc= thd->lex->spcont;
            sp_variable *spv;

            /* Best effort lookup for system variable. */
            if (!spc || !(spv = spc->find_variable((yyvsp[0].lex_str), false)))
            {
              struct sys_var_with_base tmp= {NULL, (yyvsp[0].lex_str)};

              /* Not an SP local variable */
              if (find_sys_var_null_base(thd, &tmp))
                MYSQL_YYABORT;

              (yyval.variable)= tmp;
            }
            else
            {
              /*
                Possibly an SP local variable (or a shadowed sysvar).
                Will depend on the context of the SET statement.
              */
              (yyval.variable).var= NULL;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
          }
#line 38799 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2530:
#line 14716 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (check_reserved_words(&(yyvsp[-2].lex_str)))
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            if (lex->sphead && lex->sphead->m_type == TYPE_ENUM_TRIGGER &&
                (!my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "NEW") || 
                 !my_strcasecmp(system_charset_info, (yyvsp[-2].lex_str).str, "OLD")))
            {
              if ((yyvsp[-2].lex_str).str[0]=='O' || (yyvsp[-2].lex_str).str[0]=='o')
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "OLD", "");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.event == TRG_EVENT_DELETE)
              {
                my_error(ER_TRG_NO_SUCH_ROW_IN_TRG, MYF(0),
                         "NEW", "on DELETE");
                MYSQL_YYABORT;
              }
              if (lex->trg_chistics.action_time == TRG_ACTION_AFTER)
              {
                my_error(ER_TRG_CANT_CHANGE_ROW, MYF(0), "NEW", "after ");
                MYSQL_YYABORT;
              }
              /* This special combination will denote field of NEW row */
              (yyval.variable).var= trg_new_row_fake_var;
              (yyval.variable).base_name= (yyvsp[0].lex_str);
            }
            else
            {
              sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
              if (!tmp)
                MYSQL_YYABORT;
              if (!tmp->is_struct())
                my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
              (yyval.variable).var= tmp;
              (yyval.variable).base_name= (yyvsp[-2].lex_str);
            }
          }
#line 38846 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2531:
#line 14759 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            sys_var *tmp=find_sys_var(thd, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            if (!tmp)
              MYSQL_YYABORT;
            if (!tmp->is_struct())
              my_error(ER_VARIABLE_IS_NOT_STRUCT, MYF(0), (yyvsp[0].lex_str).str);
            (yyval.variable).var= tmp;
            (yyval.variable).base_name.str=    (char*) "default";
            (yyval.variable).base_name.length= 7;
          }
#line 38861 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2536:
#line 14780 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[0].num));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_read_only"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
#line 38879 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2537:
#line 14797 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            Item *item= new (thd->mem_root) Item_int((int32) (yyvsp[0].tx_isolation));
            if (item == NULL)
              MYSQL_YYABORT;
            set_var *var= new set_var(lex->option_type,
                                      find_sys_var(thd, "tx_isolation"),
                                      &null_lex_str,
                                      item);
            if (var == NULL)
              MYSQL_YYABORT;
            lex->var_list.push_back(var);
          }
#line 38897 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2538:
#line 14813 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= true; }
#line 38903 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2539:
#line 14814 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= false; }
#line 38909 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2540:
#line 14818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_UNCOMMITTED; }
#line 38915 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2541:
#line 14819 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_READ_COMMITTED; }
#line 38921 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2542:
#line 14820 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_REPEATABLE_READ; }
#line 38927 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2543:
#line 14821 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.tx_isolation)= ISO_SERIALIZABLE; }
#line 38933 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2544:
#line 14825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.simple_string)=(yyvsp[0].lex_str).str;}
#line 38939 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2545:
#line 14827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (yyvsp[-1].lex_str).length ? thd->variables.old_passwords ?
              Item_func_old_password::alloc(thd, (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length) :
              Item_func_password::alloc(thd, (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length) :
              (yyvsp[-1].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
#line 38952 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2546:
#line 14836 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.simple_string)= (yyvsp[-1].lex_str).length ? Item_func_old_password::
              alloc(thd, (yyvsp[-1].lex_str).str, (yyvsp[-1].lex_str).length) :
              (yyvsp[-1].lex_str).str;
            if ((yyval.simple_string) == NULL)
              MYSQL_YYABORT;
          }
#line 38964 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2547:
#line 14846 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=(yyvsp[0].item); }
#line 38970 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2548:
#line 14847 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.item)=0; }
#line 38976 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2549:
#line 14849 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys("ON",  2);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2550:
#line 14855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys("ALL", 3);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 38996 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2551:
#line 14861 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.item)=new (thd->mem_root) Item_string_sys("binary", 6);
            if ((yyval.item) == NULL)
              MYSQL_YYABORT;
          }
#line 39006 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2552:
#line 14872 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "LOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_LOCK_TABLES;
          }
#line 39021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2553:
#line 14883 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2554:
#line 14887 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 39033 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2555:
#line 14888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { }
#line 39039 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2558:
#line 14898 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thr_lock_type lock_type= (thr_lock_type) (yyvsp[0].num);
            bool lock_for_write= (lock_type >= TL_WRITE_ALLOW_WRITE);
            if (!Select->add_table_to_list(thd, (yyvsp[-2].table), (yyvsp[-1].lex_str_ptr), 0, lock_type,
                                           (lock_for_write ?
                                            lock_type == TL_WRITE_CONCURRENT_INSERT ?
                                            MDL_SHARED_WRITE :
                                            MDL_SHARED_NO_READ_WRITE :
                                            MDL_SHARED_READ)))
              MYSQL_YYABORT;
          }
#line 39055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2559:
#line 14912 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ_NO_INSERT; }
#line 39061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2560:
#line 14913 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_DEFAULT; }
#line 39067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2561:
#line 14915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.num)= (Lex->sphead ? TL_WRITE_DEFAULT : TL_WRITE_CONCURRENT_INSERT);
          }
#line 39075 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2562:
#line 14919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_WRITE_LOW_PRIORITY; }
#line 39081 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2563:
#line 14920 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= TL_READ; }
#line 39087 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2564:
#line 14925 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;

            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "UNLOCK");
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_UNLOCK_TABLES;
          }
#line 39102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2565:
#line 14936 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2566:
#line 14945 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_OPEN;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[-2].table), (yyvsp[0].lex_str_ptr), 0))
              MYSQL_YYABORT;
          }
#line 39124 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2567:
#line 14957 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_HA_CLOSE;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 39140 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2568:
#line 14969 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->sphead)
            {
              my_error(ER_SP_BADSTATEMENT, MYF(0), "HANDLER");
              MYSQL_YYABORT;
            }
            lex->expr_allows_subselect= FALSE;
            lex->sql_command = SQLCOM_HA_READ;
            lex->ha_rkey_mode= HA_READ_KEY_EXACT; /* Avoid purify warnings */
            Item *one= new (thd->mem_root) Item_int((int32) 1);
            if (one == NULL)
              MYSQL_YYABORT;
            lex->current_select->select_limit= one;
            lex->current_select->offset_limit= 0;
            lex->limit_rows_examined= 0;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[-1].table), 0, 0))
              MYSQL_YYABORT;
          }
#line 39164 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2569:
#line 14989 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->expr_allows_subselect= TRUE;
            /* Stored functions are not supported for HANDLER READ. */
            if (Lex->uses_stored_routines())
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0),
                       "stored functions in HANDLER ... READ");
              MYSQL_YYABORT;
            }
          }
#line 39179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2570:
#line 15002 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= null_lex_str; }
#line 39185 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2571:
#line 15003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ident= (yyvsp[-1].lex_str); }
#line 39191 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2572:
#line 15007 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 39197 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2573:
#line 15008 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 39203 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2574:
#line 15012 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RFIRST; }
#line 39209 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2575:
#line 15013 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RNEXT;  }
#line 39215 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2576:
#line 15014 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RPREV;  }
#line 39221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2577:
#line 15015 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->ha_read_mode = RLAST;  }
#line 39227 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2578:
#line 15017 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->ha_read_mode = RKEY;
            lex->ha_rkey_mode=(yyvsp[0].ha_rkey_mode);
            if (!(lex->insert_list = new List_item))
              MYSQL_YYABORT;
          }
#line 39239 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2579:
#line 15025 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39245 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2580:
#line 15029 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_EXACT;   }
#line 39251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2581:
#line 15030 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_NEXT; }
#line 39257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2582:
#line 15031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_KEY_OR_PREV; }
#line 39263 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2583:
#line 15032 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_AFTER_KEY;   }
#line 39269 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2584:
#line 15033 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.ha_rkey_mode)=HA_READ_BEFORE_KEY;  }
#line 39275 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2585:
#line 15040 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39281 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2586:
#line 15045 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= 0;
          }
#line 39291 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2587:
#line 15051 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 39306 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2588:
#line 15062 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 39321 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2589:
#line 15073 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_REVOKE_ALL;
          }
#line 39329 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2590:
#line 15077 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-2].lex_user));
            lex->sql_command= SQLCOM_REVOKE;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 39340 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2591:
#line 15084 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command= SQLCOM_REVOKE_ROLE;
            if (Lex->users_list.push_front((yyvsp[-2].lex_user)))
              MYSQL_YYABORT;
          }
#line 39350 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2592:
#line 15093 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 39356 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2593:
#line 15095 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; (yyval.lex_user)= (yyvsp[0].lex_user); }
#line 39362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2594:
#line 15100 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39368 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2595:
#line 15106 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT;
            lex->type= 0;
          }
#line 39378 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2596:
#line 15113 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_FUNCTION;
          }
#line 39393 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2597:
#line 15125 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            if (lex->columns.elements)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROCEDURE;
          }
#line 39408 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2598:
#line 15136 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->users_list.push_front ((yyvsp[-3].lex_user));
            lex->sql_command= SQLCOM_GRANT;
            lex->type= TYPE_ENUM_PROXY;
          }
#line 39419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2599:
#line 15143 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_GRANT_ROLE;
            /* The first role is the one that is granted */
            if (Lex->users_list.push_front((yyvsp[-3].lex_user)))
              MYSQL_YYABORT;
          }
#line 39431 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2600:
#line 15154 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = 0; }
#line 39437 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2601:
#line 15155 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->definer = (yyvsp[0].lex_user); }
#line 39443 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2602:
#line 15158 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= false; }
#line 39449 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2603:
#line 15159 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->with_admin_option= true; }
#line 39455 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2604:
#line 15163 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2605:
#line 15168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39473 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2606:
#line 15176 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (!((yyval.lex_user)=(LEX_USER*) thd->calloc(sizeof(LEX_USER))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user= current_role;
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;
          }
#line 39485 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2607:
#line 15187 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            CHARSET_INFO *cs= system_charset_info;
            /* trim end spaces (as they'll be lost in mysql.user anyway) */
            (yyvsp[0].lex_str).length= cs->cset->lengthsp(cs, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
            (yyvsp[0].lex_str).str[(yyvsp[0].lex_str).length] = '\0';
            if ((yyvsp[0].lex_str).length == 0)
            {
              my_error(ER_INVALID_ROLE, MYF(0), "");
              MYSQL_YYABORT;
            }
            if (!((yyval.lex_user)=(LEX_USER*) thd->alloc(sizeof(st_lex_user))))
              MYSQL_YYABORT;
            (yyval.lex_user)->user = (yyvsp[0].lex_str);
            (yyval.lex_user)->host= empty_lex_str;
            (yyval.lex_user)->password= null_lex_str; 
            (yyval.lex_user)->plugin= empty_lex_str;
            (yyval.lex_user)->auth= empty_lex_str;

            if (check_string_char_length(&(yyval.lex_user)->user, ER(ER_USERNAME),
                                         username_char_length, cs, 0))
              MYSQL_YYABORT;
          }
#line 39512 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2611:
#line 15218 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39518 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2612:
#line 15220 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            Lex->all_privileges= 1; 
            Lex->grant= GLOBAL_ACLS;
          }
#line 39527 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2617:
#line 15238 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = SELECT_ACL;}
#line 39533 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2618:
#line 15239 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39539 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2619:
#line 15241 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = INSERT_ACL;}
#line 39545 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2620:
#line 15242 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39551 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2621:
#line 15244 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = UPDATE_ACL; }
#line 39557 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2622:
#line 15245 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39563 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2623:
#line 15247 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->which_columns = REFERENCES_ACL;}
#line 39569 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2624:
#line 15248 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39575 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2625:
#line 15249 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DELETE_ACL;}
#line 39581 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2626:
#line 15250 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39587 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2627:
#line 15251 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= INDEX_ACL;}
#line 39593 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2628:
#line 15252 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_ACL;}
#line 39599 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2629:
#line 15253 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_ACL;}
#line 39605 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2630:
#line 15254 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= DROP_ACL;}
#line 39611 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2631:
#line 15255 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EXECUTE_ACL;}
#line 39617 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2632:
#line 15256 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= RELOAD_ACL;}
#line 39623 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2633:
#line 15257 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHUTDOWN_ACL;}
#line 39629 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2634:
#line 15258 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= PROCESS_ACL;}
#line 39635 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2635:
#line 15259 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= FILE_ACL;}
#line 39641 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2636:
#line 15260 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 39647 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2637:
#line 15261 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_DB_ACL;}
#line 39653 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2638:
#line 15262 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SUPER_ACL;}
#line 39659 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2639:
#line 15263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TMP_ACL;}
#line 39665 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2640:
#line 15264 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= LOCK_TABLES_ACL; }
#line 39671 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2641:
#line 15265 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_SLAVE_ACL; }
#line 39677 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2642:
#line 15266 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= REPL_CLIENT_ACL; }
#line 39683 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2643:
#line 15267 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_VIEW_ACL; }
#line 39689 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2644:
#line 15268 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= SHOW_VIEW_ACL; }
#line 39695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2645:
#line 15269 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_PROC_ACL; }
#line 39701 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2646:
#line 15270 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= ALTER_PROC_ACL; }
#line 39707 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2647:
#line 15271 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_USER_ACL; }
#line 39713 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2648:
#line 15272 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= EVENT_ACL;}
#line 39719 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2649:
#line 15273 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= TRIGGER_ACL; }
#line 39725 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2650:
#line 15274 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= CREATE_TABLESPACE_ACL; }
#line 39731 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2651:
#line 15278 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39737 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2652:
#line 15279 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 39743 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2655:
#line 15289 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_subject)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "SUBJECT");
              MYSQL_YYABORT;
            }
            lex->x509_subject=(yyvsp[0].lex_str).str;
          }
#line 39757 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2656:
#line 15299 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->x509_issuer)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "ISSUER");
              MYSQL_YYABORT;
            }
            lex->x509_issuer=(yyvsp[0].lex_str).str;
          }
#line 39771 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2657:
#line 15309 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (lex->ssl_cipher)
            {
              my_error(ER_DUP_ARGUMENT, MYF(0), "CIPHER");
              MYSQL_YYABORT;
            }
            lex->ssl_cipher=(yyvsp[0].lex_str).str;
          }
#line 39785 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2658:
#line 15322 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            size_t dummy;
            if (lex->copy_db_to(&lex->current_select->db, &dummy))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
#line 39804 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2659:
#line 15337 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = (yyvsp[-2].lex_str).str;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant = DB_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
#line 39821 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2660:
#line 15350 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->current_select->db = NULL;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant= GLOBAL_ACLS & ~GRANT_ACL;
            else if (lex->columns.elements)
            {
              my_message(ER_ILLEGAL_GRANT_FOR_TABLE,
                         ER(ER_ILLEGAL_GRANT_FOR_TABLE), MYF(0));
              MYSQL_YYABORT;
            }
          }
#line 39838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2661:
#line 15363 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->current_select->add_table_to_list(lex->thd, (yyvsp[0].table),NULL,
                                                        TL_OPTION_UPDATING))
              MYSQL_YYABORT;
            if (lex->grant == GLOBAL_ACLS)
              lex->grant =  TABLE_ACLS & ~GRANT_ACL;
          }
#line 39851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2662:
#line 15375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39860 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2663:
#line 15380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39869 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2664:
#line 15388 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2665:
#line 15393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39887 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2666:
#line 15401 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39896 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2667:
#line 15406 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (Lex->users_list.push_back((yyvsp[0].lex_user)))
              MYSQL_YYABORT;
          }
#line 39905 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2672:
#line 15417 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)=(yyvsp[-3].lex_user); (yyvsp[-3].lex_user)->password=(yyvsp[0].lex_str);
            if (Lex->sql_command == SQLCOM_REVOKE)
              MYSQL_YYABORT;
            if ((yyvsp[0].lex_str).length)
            {
              if (thd->variables.old_passwords == 1)
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH_323+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password_323(buff, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
                (yyvsp[-3].lex_user)->password.str= buff;
                (yyvsp[-3].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH_323;
              }
              else
              {
                char *buff= 
                  (char *) thd->alloc(SCRAMBLED_PASSWORD_CHAR_LENGTH+1);
                if (buff == NULL)
                  MYSQL_YYABORT;
                my_make_scrambled_password(buff, (yyvsp[0].lex_str).str, (yyvsp[0].lex_str).length);
                (yyvsp[-3].lex_user)->password.str= buff;
                (yyvsp[-3].lex_user)->password.length= SCRAMBLED_PASSWORD_CHAR_LENGTH;
              }
            }
          }
#line 39938 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2673:
#line 15446 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.lex_user)= (yyvsp[-4].lex_user); 
            (yyvsp[-4].lex_user)->password= (yyvsp[0].lex_str); 
          }
#line 39947 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2674:
#line 15451 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-3].lex_user);
            (yyvsp[-3].lex_user)->plugin= (yyvsp[0].lex_str);
            (yyvsp[-3].lex_user)->auth= empty_lex_str;
          }
#line 39957 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2675:
#line 15457 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.lex_user)= (yyvsp[-5].lex_user);
            (yyvsp[-5].lex_user)->plugin= (yyvsp[-2].lex_str);
            (yyvsp[-5].lex_user)->auth= (yyvsp[0].lex_str);
          }
#line 39967 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2676:
#line 15463 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.lex_user)= (yyvsp[0].lex_user); (yyvsp[0].lex_user)->password= null_lex_str; }
#line 39973 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2677:
#line 15468 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->grant |= lex->which_columns;
          }
#line 39982 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2681:
#line 15482 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            String *new_str = new (thd->mem_root) String((const char*) (yyvsp[0].lex_str).str,(yyvsp[0].lex_str).length,system_charset_info);
            if (new_str == NULL)
              MYSQL_YYABORT;
            List_iterator <LEX_COLUMN> iter(Lex->columns);
            class LEX_COLUMN *point;
            LEX *lex=Lex;
            while ((point=iter++))
            {
              if (!my_strcasecmp(system_charset_info,
                                 point->column.c_ptr(), new_str->c_ptr()))
                break;
            }
            lex->grant_tot_col|= lex->which_columns;
            if (point)
              point->rights |= lex->which_columns;
            else
            {
              LEX_COLUMN *col= new LEX_COLUMN (*new_str,lex->which_columns);
              if (col == NULL)
                MYSQL_YYABORT;
              lex->columns.push_back(col);
            }
          }
#line 40011 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2683:
#line 15511 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_SPECIFIED;
          }
#line 40019 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2684:
#line 15515 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_ANY;
          }
#line 40027 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2685:
#line 15519 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_X509;
          }
#line 40035 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2686:
#line 15523 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->ssl_type=SSL_TYPE_NONE;
          }
#line 40043 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2687:
#line 15529 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40049 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2689:
#line 15534 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40055 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2690:
#line 15535 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 40061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2691:
#line 15539 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40067 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2692:
#line 15540 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40073 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2693:
#line 15544 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->grant |= GRANT_ACL;}
#line 40079 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2694:
#line 15546 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.questions=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::QUERIES_PER_HOUR;
          }
#line 40089 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2695:
#line 15552 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.updates=(yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::UPDATES_PER_HOUR;
          }
#line 40099 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2696:
#line 15558 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.conn_per_hour= (yyvsp[0].ulong_num);
            lex->mqh.specified_limits|= USER_RESOURCES::CONNECTIONS_PER_HOUR;
          }
#line 40109 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2697:
#line 15564 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->mqh.user_conn= (yyvsp[0].num);
            lex->mqh.specified_limits|= USER_RESOURCES::USER_CONNECTIONS;
          }
#line 40119 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2698:
#line 15573 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command = SQLCOM_BEGIN;
            lex->start_transaction_opt= 0;
          }
#line 40129 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2699:
#line 15578 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40135 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2700:
#line 15582 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40141 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2701:
#line 15583 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40147 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2702:
#line 15588 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 40153 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2703:
#line 15589 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 40159 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2704:
#line 15590 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 40165 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2705:
#line 15595 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_UNKNOWN; }
#line 40171 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2706:
#line 15596 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_YES; }
#line 40177 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2707:
#line 15597 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.m_yes_no_unk)= TVL_NO; }
#line 40183 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2708:
#line 15601 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40189 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2709:
#line 15602 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40195 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2710:
#line 15607 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_COMMIT;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 40208 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2711:
#line 15619 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK;
            /* Don't allow AND CHAIN RELEASE. */
            MYSQL_YYABORT_UNLESS((yyvsp[-1].m_yes_no_unk) != TVL_YES || (yyvsp[0].m_yes_no_unk) != TVL_YES);
            lex->tx_chain= (yyvsp[-1].m_yes_no_unk);
            lex->tx_release= (yyvsp[0].m_yes_no_unk);
          }
#line 40221 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2712:
#line 15629 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_ROLLBACK_TO_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40231 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2713:
#line 15638 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40241 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2714:
#line 15647 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            lex->sql_command= SQLCOM_RELEASE_SAVEPOINT;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 40251 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2715:
#line 15660 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40257 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2717:
#line 15666 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), TRUE))
              MYSQL_YYABORT;
          }
#line 40266 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2718:
#line 15671 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              Remove from the name resolution context stack the context of the
              last select in the union.
            */
            Lex->pop_context();
          }
#line 40278 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2719:
#line 15681 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 0; }
#line 40284 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2720:
#line 15682 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40290 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2721:
#line 15683 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)= 1; }
#line 40296 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2722:
#line 15687 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.is_not_empty)= false; }
#line 40302 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2723:
#line 15688 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.is_not_empty)= true; }
#line 40308 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2724:
#line 15692 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            DBUG_ASSERT(lex->current_select->linkage != GLOBAL_OPTIONS_TYPE);
            SELECT_LEX *sel= lex->current_select;
            SELECT_LEX_UNIT *unit= sel->master_unit();
            SELECT_LEX *fake= unit->fake_select_lex;
            if (fake)
            {
              unit->global_parameters= fake;
              fake->no_table_names_allowed= 1;
              lex->current_select= fake;
            }
            thd->where= "global ORDER clause";
          }
#line 40327 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2725:
#line 15707 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->current_select->no_table_names_allowed= 0;
            thd->where= "";
          }
#line 40336 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2728:
#line 15719 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 40342 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2729:
#line 15720 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=1; }
#line 40348 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2730:
#line 15721 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { (yyval.num)=0; }
#line 40354 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2731:
#line 15726 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 40362 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2732:
#line 15730 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            (yyval.select_lex)= Lex->current_select->master_unit()->first_select();
          }
#line 40370 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2734:
#line 15739 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (add_select_to_union_list(Lex, (bool)(yyvsp[0].num), FALSE))
              MYSQL_YYABORT;
          }
#line 40379 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2735:
#line 15745 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->pop_context();
            (yyval.select_lex)= (yyvsp[-5].select_lex);
          }
#line 40388 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2736:
#line 15754 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { 
            (yyval.select_lex)= (yyvsp[-1].select_lex);
          }
#line 40396 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2737:
#line 15760 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;
            if (!lex->expr_allows_subselect ||
               lex->sql_command == (int)SQLCOM_PURGE)
            {
              my_parse_error(ER(ER_SYNTAX_ERROR));
              MYSQL_YYABORT;
            }
            /* 
              we are making a "derived table" for the parenthesis
              as we need to have a lex level to fit the union 
              after the parenthesis, e.g. 
              (SELECT .. ) UNION ...  becomes 
              SELECT * FROM ((SELECT ...) UNION ...)
            */
            if (mysql_new_select(Lex, 1))
              MYSQL_YYABORT;
          }
#line 40419 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2738:
#line 15781 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex=Lex;

            lex->pop_context();
            SELECT_LEX *child= lex->current_select;
            lex->current_select = lex->current_select->return_after_parsing();
            lex->nest_level--;
            lex->current_select->n_child_sum_items += child->n_sum_items;
            /*
              A subselect can add fields to an outer select. Reserve space for
              them.
            */
            lex->current_select->select_n_where_fields+=
            child->select_n_where_fields;

            /*
              Aggregate functions in having clause may add fields to an outer
              select. Count them also.
            */
            lex->current_select->select_n_having_items+=
            child->select_n_having_items;
          }
#line 40446 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2743:
#line 15816 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_STRAIGHT_JOIN; }
#line 40452 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2744:
#line 15818 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            YYPS->m_lock_type= TL_READ_HIGH_PRIORITY;
            YYPS->m_mdl_type= MDL_SHARED_READ;
            Select->options|= SELECT_HIGH_PRIORITY;
          }
#line 40464 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2745:
#line 15825 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_DISTINCT; }
#line 40470 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2746:
#line 15826 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_SMALL_RESULT; }
#line 40476 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2747:
#line 15827 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_BIG_RESULT; }
#line 40482 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2748:
#line 15829 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_BUFFER_RESULT;
          }
#line 40492 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2749:
#line 15835 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            if (check_simple_select())
              MYSQL_YYABORT;
            Select->options|= OPTION_FOUND_ROWS;
          }
#line 40502 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2750:
#line 15840 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Select->options|= SELECT_ALL; }
#line 40508 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2751:
#line 15851 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40514 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2752:
#line 15853 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40520 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2753:
#line 15855 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40526 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2767:
#line 15888 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            /*
              We have to distinguish missing DEFINER-clause from case when
              CURRENT_USER specified as definer explicitly in order to properly
              handle CREATE TRIGGER statements which come to replication thread
              from older master servers (i.e. to create non-suid trigger in this
              case).
            */
            thd->lex->definer= 0;
          }
#line 40541 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2768:
#line 15902 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            thd->lex->definer= (yyvsp[0].lex_user);
          }
#line 40549 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2769:
#line 15915 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= DTYPE_ALGORITHM_UNDEFINED; }
#line 40555 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2770:
#line 15917 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_MERGE; }
#line 40561 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2771:
#line 15919 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_algorithm= VIEW_ALGORITHM_TMPTABLE; }
#line 40567 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2772:
#line 15924 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFAULT; }
#line 40573 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2773:
#line 15926 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_DEFINER; }
#line 40579 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2774:
#line 15928 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_suid= VIEW_SUID_INVOKER; }
#line 40585 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2775:
#line 15933 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            lex->sql_command= SQLCOM_CREATE_VIEW;
            /* first table in list is target VIEW name */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[0].table), NULL,
                                                   TL_OPTION_UPDATING,
                                                   TL_IGNORE,
                                                   MDL_EXCLUSIVE))
              MYSQL_YYABORT;
            lex->query_tables->open_strategy= TABLE_LIST::OPEN_STUB;
          }
#line 40601 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2777:
#line 15949 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 40607 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2779:
#line 15955 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
            }
#line 40616 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2780:
#line 15960 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
              Lex->view_list.push_back((LEX_STRING*)
              sql_memdup(&(yyvsp[0].lex_str), sizeof(LEX_STRING)));
            }
#line 40625 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2781:
#line 15967 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->parsing_options.allows_variable= FALSE;
            lex->parsing_options.allows_select_into= FALSE;
            lex->parsing_options.allows_select_procedure= FALSE;
            lex->parsing_options.allows_derived= FALSE;
            lex->create_view_select.str= (char *) YYLIP->get_cpp_ptr();
          }
#line 40638 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2782:
#line 15976 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            uint len= YYLIP->get_cpp_ptr() - lex->create_view_select.str;
            void *create_view_select= thd->memdup(lex->create_view_select.str, len);
            lex->create_view_select.length= len;
            lex->create_view_select.str= (char *) create_view_select;
            trim_whitespace(thd->charset(), &lex->create_view_select);
            lex->parsing_options.allows_variable= TRUE;
            lex->parsing_options.allows_select_into= TRUE;
            lex->parsing_options.allows_select_procedure= TRUE;
            lex->parsing_options.allows_derived= TRUE;
          }
#line 40655 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2785:
#line 15997 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_NONE; }
#line 40661 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2786:
#line 15999 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 40667 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2787:
#line 16001 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_CASCADED; }
#line 40673 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2788:
#line 16003 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->create_view_check= VIEW_CHECK_LOCAL; }
#line 40679 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2789:
#line 16020 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $8 */
            Lex->raw_trg_on_table_name_begin= YYLIP->get_tok_start();
          }
#line 40687 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2790:
#line 16026 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $12 */
            Lex->raw_trg_on_table_name_end= YYLIP->get_tok_start();
          }
#line 40695 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2791:
#line 16031 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $15 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "TRIGGER");
              MYSQL_YYABORT;
            }

            if (!(sp= new sp_head()))
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_TRIGGER;
            sp->init_sp_name(thd, (yyvsp[-11].spname));
            lex->stmt_definition_begin= (yyvsp[-12].simple_string);
            lex->ident.str= (yyvsp[-7].simple_string);
            lex->ident.length= (yyvsp[-3].simple_string) - (yyvsp[-7].simple_string);

            lex->sphead= sp;
            lex->spname= (yyvsp[-11].spname);

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_ptr());
          }
#line 40728 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2792:
#line 16060 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $17 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            lex->sql_command= SQLCOM_CREATE_TRIGGER;
            sp->set_stmt_end(thd);
            sp->restore_thd_mem_root(thd);

            if (sp->is_not_allowed_in_function("trigger"))
              MYSQL_YYABORT;

            /*
              We have to do it after parsing trigger body, because some of
              sp_proc_stmt alternatives are not saving/restoring LEX, so
              lex->query_tables can be wiped out.
            */
            if (!lex->select_lex.add_table_to_list(thd, (yyvsp[-7].table),
                                                   (LEX_STRING*) 0,
                                                   TL_OPTION_UPDATING,
                                                   TL_READ_NO_INSERT,
                                                   MDL_SHARED_NO_WRITE))
              MYSQL_YYABORT;
          }
#line 40756 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2793:
#line 16094 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[-4].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[-4].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_AGGREGATE;
            lex->stmt_definition_begin= (yyvsp[-6].simple_string);
            lex->udf.name = (yyvsp[-4].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[-2].num);
            lex->udf.dl=(yyvsp[0].lex_str).str;
          }
#line 40776 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2794:
#line 16111 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            if (is_native_function(thd, & (yyvsp[-4].lex_str)))
            {
              my_error(ER_NATIVE_FCT_NAME_COLLISION, MYF(0),
                       (yyvsp[-4].lex_str).str);
              MYSQL_YYABORT;
            }
            lex->sql_command = SQLCOM_CREATE_FUNCTION;
            lex->udf.type= UDFTYPE_FUNCTION;
            lex->stmt_definition_begin= (yyvsp[-6].simple_string);
            lex->udf.name = (yyvsp[-4].lex_str);
            lex->udf.returns=(Item_result) (yyvsp[-2].num);
            lex->udf.dl=(yyvsp[0].lex_str).str;
          }
#line 40796 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2795:
#line 16133 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $5 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;
            sp_head *sp;
            const char* tmp_param_begin;

            lex->stmt_definition_begin= (yyvsp[-3].simple_string);
            lex->spname= (yyvsp[-1].spname);

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "FUNCTION");
              MYSQL_YYABORT;
            }
            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->init_sp_name(thd, lex->spname);

            sp->m_type= TYPE_ENUM_FUNCTION;
            lex->sphead= sp;

            tmp_param_begin= lip->get_cpp_tok_start();
            tmp_param_begin++;
            lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 40830 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2796:
#line 16164 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $8 */
            Lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
          }
#line 40838 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2797:
#line 16168 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $10 */
            LEX *lex= Lex;
            lex->charset= NULL;
            lex->length= lex->dec= NULL;
            lex->interval_list.empty();
            lex->type= 0;
            lex->vcol_info= 0;
          }
#line 40851 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2798:
#line 16177 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $12 */
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;
            /*
              This was disabled in 5.1.12. See bug #20701
              When collation support in SP is implemented, then this test
              should be removed.
            */
            if (((yyvsp[0].num) == MYSQL_TYPE_STRING || (yyvsp[0].num) == MYSQL_TYPE_VARCHAR)
                && (lex->type & BINCMP_FLAG))
            {
              my_error(ER_NOT_SUPPORTED_YET, MYF(0), "return value collation");
              MYSQL_YYABORT;
            }

            if (sp->fill_field_definition(thd, lex,
                                          (enum enum_field_types) (yyvsp[0].num),
                                          &sp->m_return_field_def))
              MYSQL_YYABORT;

            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 40878 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2799:
#line 16200 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { /* $14 */
            LEX *lex= thd->lex;
            Lex_input_stream *lip= YYLIP;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, lip->get_cpp_tok_start());
          }
#line 40890 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2800:
#line 16208 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;
            sp_head *sp= lex->sphead;

            if (sp->is_not_allowed_in_function("function"))
              MYSQL_YYABORT;

            lex->sql_command= SQLCOM_CREATE_SPFUNCTION;
            sp->set_stmt_end(thd);
            if (!(sp->m_flags & sp_head::HAS_RETURN))
            {
              my_error(ER_SP_NORETURN, MYF(0), sp->m_qname.str);
              MYSQL_YYABORT;
            }
            if (is_native_function(thd, & sp->m_name))
            {
              /*
                This warning will be printed when
                [1] A client query is parsed,
                [2] A stored function is loaded by db_load_routine.
                Printing the warning for [2] is intentional, to cover the
                following scenario:
                - A user define a SF 'foo' using MySQL 5.N
                - An application uses select foo(), and works.
                - MySQL 5.{N+1} defines a new native function 'foo', as
                part of a new feature.
                - MySQL 5.{N+1} documentation is updated, and should mention
                that there is a potential incompatible change in case of
                existing stored function named 'foo'.
                - The user deploys 5.{N+1}. At this point, 'select foo()'
                means something different, and the user code is most likely
                broken (it's only safe if the code is 'select db.foo()').
                With a warning printed when the SF is loaded (which has to occur
                before the call), the warning will provide a hint explaining
                the root cause of a later failure of 'select foo()'.
                With no warning printed, the user code will fail with no
                apparent reason.
                Printing a warning each time db_load_routine is executed for
                an ambiguous function is annoying, since that can happen a lot,
                but in practice should not happen unless there *are* name
                collisions.
                If a collision exists, it should not be silenced but fixed.
              */
              push_warning_printf(thd,
                                  Sql_condition::WARN_LEVEL_NOTE,
                                  ER_NATIVE_FCT_NAME_COLLISION,
                                  ER(ER_NATIVE_FCT_NAME_COLLISION),
                                  sp->m_name.str);
            }
            sp->restore_thd_mem_root(thd);
          }
#line 40946 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2801:
#line 16263 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp;

            if (lex->sphead)
            {
              my_error(ER_SP_NO_RECURSIVE_CREATE, MYF(0), "PROCEDURE");
              MYSQL_YYABORT;
            }

            lex->stmt_definition_begin= (yyvsp[-1].simple_string);

            /* Order is important here: new - reset - init */
            sp= new sp_head();
            if (sp == NULL)
              MYSQL_YYABORT;
            sp->reset_thd_mem_root(thd);
            sp->init(lex);
            sp->m_type= TYPE_ENUM_PROCEDURE;
            sp->init_sp_name(thd, (yyvsp[0].spname));

            lex->sphead= sp;
          }
#line 40974 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2802:
#line 16287 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            const char* tmp_param_begin;

            tmp_param_begin= YYLIP->get_cpp_tok_start();
            tmp_param_begin++;
            Lex->sphead->m_param_begin= tmp_param_begin;
          }
#line 40986 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2803:
#line 16296 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            lex->sphead->m_param_end= YYLIP->get_cpp_tok_start();
            bzero((char *)&lex->sp_chistics, sizeof(st_sp_chistics));
          }
#line 40997 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2804:
#line 16303 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= thd->lex;

            lex->sphead->m_chistics= &lex->sp_chistics;
            lex->sphead->set_body_start(thd, YYLIP->get_cpp_tok_start());
          }
#line 41008 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2805:
#line 16310 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            sp_head *sp= lex->sphead;

            sp->set_stmt_end(thd);
            lex->sql_command= SQLCOM_CREATE_PROCEDURE;
            sp->restore_thd_mem_root(thd);
          }
#line 41021 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2806:
#line 16324 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_START;
          }
#line 41029 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2807:
#line 16328 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_END;
          }
#line 41037 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2808:
#line 16332 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_PREPARE;
          }
#line 41045 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2809:
#line 16336 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_COMMIT;
          }
#line 41053 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2810:
#line 16340 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_ROLLBACK;
          }
#line 41061 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2811:
#line 16344 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            Lex->sql_command = SQLCOM_XA_RECOVER;
          }
#line 41069 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2812:
#line 16351 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[0].string)->length() <= MAXGTRIDSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length(), 0, 0);
          }
#line 41080 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2813:
#line 16358 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-2].string)->length() <= MAXGTRIDSIZE && (yyvsp[0].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set(1L, (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length(), (yyvsp[0].string)->ptr(), (yyvsp[0].string)->length());
          }
#line 41091 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2814:
#line 16365 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            MYSQL_YYABORT_UNLESS((yyvsp[-4].string)->length() <= MAXGTRIDSIZE && (yyvsp[-2].string)->length() <= MAXBQUALSIZE);
            if (!(Lex->xid=(XID *)thd->alloc(sizeof(XID))))
              MYSQL_YYABORT;
            Lex->xid->set((yyvsp[0].ulong_num), (yyvsp[-4].string)->ptr(), (yyvsp[-4].string)->length(), (yyvsp[-2].string)->ptr(), (yyvsp[-2].string)->length());
          }
#line 41102 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2815:
#line 16374 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41108 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2816:
#line 16375 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41114 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2817:
#line 16379 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41120 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2818:
#line 16380 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_JOIN;        }
#line 41126 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2819:
#line 16381 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_RESUME;      }
#line 41132 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2820:
#line 16385 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41138 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2821:
#line 16386 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_ONE_PHASE;   }
#line 41144 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2822:
#line 16391 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_NONE;        }
#line 41150 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2823:
#line 16393 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_SUSPEND;     }
#line 41156 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2825:
#line 16398 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {}
#line 41162 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2826:
#line 16399 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    { Lex->xa_opt=XA_FOR_MIGRATE; }
#line 41168 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2827:
#line 16404 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= (yyvsp[-2].lex_str);
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41179 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2828:
#line 16411 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_INSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41190 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2829:
#line 16421 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= (yyvsp[0].lex_str);
          }
#line 41200 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2830:
#line 16427 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
            LEX *lex= Lex;
            lex->sql_command= SQLCOM_UNINSTALL_PLUGIN;
            lex->comment= null_lex_str;
            lex->ident= (yyvsp[0].lex_str);
          }
#line 41211 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;

  case 2831:
#line 16438 "/home/buildbot/git/sql/sql_yacc.yy" /* yacc.c:1646  */
    {
	  YYERROR;
	}
#line 41219 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
    break;


#line 41223 "/home/buildbot/git/mkdist/sql/sql_yacc.cc" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (thd, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (thd, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, thd);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, thd);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (thd, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, thd);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, thd);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
